/**
 * –¢–µ—Å—Ç Enhanced CoverageAnalyzer
 */

const path = require('path');
const fs = require('fs').promises;

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è CoverageAnalyzer –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class CoverageAnalyzer {
  constructor(projectPath) {
    this.projectPath = projectPath;
  }

  async analyzeProject() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Enhanced CoverageAnalyzer –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ kinderly-events');
    console.log('============================================================');

    const result = {
      hasValidCoverage: false,
      coverageScore: 0,
      summary: null,
      testingTools: [],
      testScripts: [],
      recommendations: [],
      grade: 'POOR',
    };

    try {
      // 1. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
      const packageJsonPath = path.join(this.projectPath, 'package.json');
      let packageJson = {};

      if (await this.fileExists(packageJsonPath)) {
        const packageContent = await fs.readFile(packageJsonPath, 'utf-8');
        packageJson = JSON.parse(packageContent);
      }

      // 2. –ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      result.testingTools = this.findTestingTools(packageJson);
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${result.testingTools.length}`);

      // 3. –ü–æ–∏—Å–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      result.testScripts = this.findTestScripts(packageJson);
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤: ${result.testScripts.length}`);

      // 4. –ü–æ–∏—Å–∫ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–∫—Ä—ã—Ç–∏—è
      const coverageFiles = await this.findCoverageReports();
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø–æ–∫—Ä—ã—Ç–∏—è: ${coverageFiles.length}`);

      // 5. –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è
      if (coverageFiles.length > 0) {
        result.hasValidCoverage = true;
        result.summary = await this.analyzeCoverageData();
      }

      // 6. –ü–æ–¥—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏
      result.coverageScore = this.calculateScore(result);

      // 7. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      result.grade = this.determineGrade(result.coverageScore);

      // 8. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
      result.recommendations = this.generateRecommendations(result);

      this.printResults(result);

      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ–∫—Ä—ã—Ç–∏—è:', error);
      return result;
    }
  }

  findTestingTools(packageJson) {
    const tools = [];
    const allDeps = {
      ...(packageJson.dependencies || {}),
      ...(packageJson.devDependencies || {}),
    };

    const testingToolsMap = {
      jest: 'Jest testing framework',
      vitest: 'Vite testing framework',
      '@testing-library': 'Testing Library',
      mocha: 'Mocha test runner',
      chai: 'Chai assertion library',
      cypress: 'Cypress E2E testing',
      playwright: 'Playwright testing',
      nyc: 'NYC coverage tool',
      c8: 'C8 coverage tool',
    };

    for (const [tool, description] of Object.entries(testingToolsMap)) {
      const found = Object.keys(allDeps).find(dep => dep.includes(tool));
      if (found) {
        tools.push(`${tool}: ${found} - ${description}`);
      }
    }

    return tools;
  }

  findTestScripts(packageJson) {
    const scripts = packageJson.scripts || {};
    const testScripts = [];

    for (const [name, command] of Object.entries(scripts)) {
      if (
        name.includes('test') ||
        name.includes('coverage') ||
        (typeof command === 'string' && command.includes('test'))
      ) {
        testScripts.push(`${name}: ${command}`);
      }
    }

    return testScripts;
  }

  async findCoverageReports() {
    const coverageFiles = [];

    const possibleLocations = [
      'coverage',
      'nyc_output',
      '.nyc_output',
      'jest-coverage',
      'coverage-final.json',
      'lcov.info',
      'clover.xml',
    ];

    for (const location of possibleLocations) {
      const fullPath = path.join(this.projectPath, location);
      if (await this.fileExists(fullPath)) {
        coverageFiles.push(fullPath);
      }
    }

    return coverageFiles;
  }

  async analyzeCoverageData() {
    const summary = {
      totalFiles: 0,
      coveredFiles: 0,
      overallCoverage: {
        statements: { total: 0, covered: 0, percentage: 0 },
        branches: { total: 0, covered: 0, percentage: 0 },
        functions: { total: 0, covered: 0, percentage: 0 },
        lines: { total: 0, covered: 0, percentage: 0 },
      },
      filesCoverage: [],
      coverageByDirectory: {},
    };

    // –ü–æ–∏—Å–∫ coverage-final.json
    const jsonReportPath = path.join(this.projectPath, 'coverage', 'coverage-final.json');

    if (await this.fileExists(jsonReportPath)) {
      try {
        const content = await fs.readFile(jsonReportPath, 'utf-8');
        const data = JSON.parse(content);

        console.log('‚úÖ –ù–∞–π–¥–µ–Ω coverage-final.json, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ–¥—Ä–æ–±–Ω–æ...');

        let totalStatements = 0,
          coveredStatements = 0;
        let totalBranches = 0,
          coveredBranches = 0;
        let totalFunctions = 0,
          coveredFunctions = 0;
        let totalLines = 0,
          coveredLines = 0;

        // –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
        for (const [filePath, fileData] of Object.entries(data)) {
          if (typeof fileData === 'object' && fileData !== null) {
            const fd = fileData;

            // –ü–æ–¥—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞
            const fileStatements = Object.keys(fd.s || {}).length;
            const fileCoveredStatements = Object.values(fd.s || {}).filter(
              v => Number(v) > 0
            ).length;

            const fileBranches = Object.keys(fd.b || {}).length;
            const fileCoveredBranches = Object.values(fd.b || {}).filter(
              v => Array.isArray(v) && v.some(x => Number(x) > 0)
            ).length;

            const fileFunctions = Object.keys(fd.f || {}).length;
            const fileCoveredFunctions = Object.values(fd.f || {}).filter(
              v => Number(v) > 0
            ).length;

            const fileLines = Object.keys(fd.s || {}).length; // –£–ø—Ä–æ—â–µ–Ω–∏–µ
            const fileCoveredLines = Object.values(fd.s || {}).filter(v => Number(v) > 0).length;

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
            totalStatements += fileStatements;
            coveredStatements += fileCoveredStatements;
            totalBranches += fileBranches;
            coveredBranches += fileCoveredBranches;
            totalFunctions += fileFunctions;
            coveredFunctions += fileCoveredFunctions;
            totalLines += fileLines;
            coveredLines += fileCoveredLines;

            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
            const relativePath = path.relative(this.projectPath, filePath);
            if (fileStatements > 0 || fileBranches > 0 || fileFunctions > 0) {
              summary.filesCoverage.push({
                filePath: relativePath,
                statements: fileStatements > 0 ? (fileCoveredStatements / fileStatements) * 100 : 0,
                branches: fileBranches > 0 ? (fileCoveredBranches / fileBranches) * 100 : 0,
                functions: fileFunctions > 0 ? (fileCoveredFunctions / fileFunctions) * 100 : 0,
                lines: fileLines > 0 ? (fileCoveredLines / fileLines) * 100 : 0,
              });
            }
          }
        }

        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        summary.totalFiles = Object.keys(data).length;
        summary.coveredFiles = summary.filesCoverage.filter(f => f.statements > 0).length;

        summary.overallCoverage = {
          statements: {
            total: totalStatements,
            covered: coveredStatements,
            percentage: totalStatements > 0 ? (coveredStatements / totalStatements) * 100 : 0,
          },
          branches: {
            total: totalBranches,
            covered: coveredBranches,
            percentage: totalBranches > 0 ? (coveredBranches / totalBranches) * 100 : 0,
          },
          functions: {
            total: totalFunctions,
            covered: coveredFunctions,
            percentage: totalFunctions > 0 ? (coveredFunctions / totalFunctions) * 100 : 0,
          },
          lines: {
            total: totalLines,
            covered: coveredLines,
            percentage: totalLines > 0 ? (coveredLines / totalLines) * 100 : 0,
          },
        };

        console.log(`üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${summary.totalFiles}`);
        console.log(`üìà –ü–æ–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤: ${summary.coveredFiles}`);
        console.log(
          `üìâ –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–æ–∫: ${summary.overallCoverage.statements.percentage.toFixed(2)}%`
        );
        console.log(
          `üåø –ü–æ–∫—Ä—ã—Ç–∏–µ –≤–µ—Ç–æ–∫: ${summary.overallCoverage.branches.percentage.toFixed(2)}%`
        );
        console.log(
          `‚ö° –ü–æ–∫—Ä—ã—Ç–∏–µ —Ñ—É–Ω–∫—Ü–∏–π: ${summary.overallCoverage.functions.percentage.toFixed(2)}%`
        );

        // –¢–æ–ø –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤
        const lowCoverageFiles = summary.filesCoverage
          .filter(f => f.statements < 50)
          .sort((a, b) => a.statements - b.statements)
          .slice(0, 10);

        if (lowCoverageFiles.length > 0) {
          console.log(`\nüîç –§–∞–π–ª—ã —Å –Ω–∏–∑–∫–∏–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º (<50%):`);
          lowCoverageFiles.forEach(file => {
            console.log(`  - ${file.filePath}: ${file.statements.toFixed(1)}%`);
          });
        }

        // –¢–æ–ø —Ö–æ—Ä–æ—à–æ –ø–æ–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤
        const highCoverageFiles = summary.filesCoverage
          .filter(f => f.statements >= 80)
          .sort((a, b) => b.statements - a.statements)
          .slice(0, 5);

        if (highCoverageFiles.length > 0) {
          console.log(`\n‚úÖ –§–∞–π–ª—ã —Å –æ—Ç–ª–∏—á–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º (>=80%):`);
          highCoverageFiles.forEach(file => {
            console.log(`  - ${file.filePath}: ${file.statements.toFixed(1)}%`);
          });
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ coverage-final.json:', error);
      }
    }

    return summary;
  }

  calculateScore(result) {
    let score = 0;

    // –ù–∞–ª–∏—á–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–∫—Ä—ã—Ç–∏—è
    if (result.hasValidCoverage) {
      score += 30;
    }

    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    score += Math.min(result.testingTools.length * 10, 30);

    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
    score += Math.min(result.testScripts.length * 2, 30);

    // –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–∫—Ä—ã—Ç–∏—è
    if (result.summary && result.summary.overallCoverage) {
      const { statements, branches, functions } = result.summary.overallCoverage;
      const avgCoverage = (statements.percentage + branches.percentage + functions.percentage) / 3;

      if (avgCoverage >= 80) score += 10;
      else if (avgCoverage >= 60) score += 8;
      else if (avgCoverage >= 40) score += 6;
      else if (avgCoverage >= 20) score += 4;
      else if (avgCoverage >= 10) score += 2;
    }

    return Math.min(score, 100);
  }

  determineGrade(score) {
    if (score >= 95) return '–ü–†–ï–í–û–°–•–û–î–ù–û';
    if (score >= 90) return '–û–¢–õ–ò–ß–ù–û';
    if (score >= 75) return '–•–û–†–û–®–û';
    if (score >= 60) return '–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û';
    if (score >= 40) return '–¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø';
    return '–ö–†–ò–¢–ò–ß–ù–û';
  }

  generateRecommendations(result) {
    const recommendations = [];

    if (!result.hasValidCoverage) {
      recommendations.push('–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–∫—Ä—ã—Ç–∏—è (coverage reports)');
    }

    if (result.testingTools.length < 3) {
      recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }

    if (result.summary) {
      const { overallCoverage } = result.summary;

      if (overallCoverage.statements.percentage < 70) {
        recommendations.push('–£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞–º–∏ –¥–æ 70%+');
      }

      if (overallCoverage.branches.percentage < 60) {
        recommendations.push('–£–ª—É—á—à–∏—Ç–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –≤–µ—Ç–≤–ª–µ–Ω–∏–π –∫–æ–¥–∞');
      }

      if (overallCoverage.functions.percentage < 80) {
        recommendations.push('–î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç—ã –¥–ª—è –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π');
      }

      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –ø–æ–∫—Ä—ã—Ç–∏—è
      if (overallCoverage.statements.percentage < 20) {
        recommendations.push('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ! –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤');
      }
    }

    if (result.testScripts.length === 0) {
      recommendations.push('–î–æ–±–∞–≤—å—Ç–µ npm —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤');
    }

    return recommendations;
  }

  printResults(result) {
    console.log('\nüìä –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –ü–û–ö–†–´–¢–ò–Ø:');
    console.log('========================================');

    console.log(`\nüõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (${result.testingTools.length}):`);
    result.testingTools.forEach(tool => console.log(`  ‚úÖ ${tool}`));

    console.log(`\nüìù –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã (${result.testScripts.length}):`);
    result.testScripts.slice(0, 8).forEach(script => console.log(`  ‚úÖ ${script}`));
    if (result.testScripts.length > 8) {
      console.log(`  ... –∏ –µ—â–µ ${result.testScripts.length - 8} —Å–∫—Ä–∏–ø—Ç–æ–≤`);
    }

    if (result.summary) {
      console.log(`\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–ö–†–´–¢–ò–Ø –ö–û–î–ê:`);
      console.log(`  üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${result.summary.totalFiles}`);
      console.log(`  üìÑ –ü–æ–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤: ${result.summary.coveredFiles}`);
      console.log(
        `  üìä –ü–æ–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–æ–∫: ${result.summary.overallCoverage.statements.percentage.toFixed(1)}% (${result.summary.overallCoverage.statements.covered}/${result.summary.overallCoverage.statements.total})`
      );
      console.log(
        `  üåø –ü–æ–∫—Ä—ã—Ç–∏–µ –≤–µ—Ç–æ–∫: ${result.summary.overallCoverage.branches.percentage.toFixed(1)}% (${result.summary.overallCoverage.branches.covered}/${result.summary.overallCoverage.branches.total})`
      );
      console.log(
        `  ‚ö° –ü–æ–∫—Ä—ã—Ç–∏–µ —Ñ—É–Ω–∫—Ü–∏–π: ${result.summary.overallCoverage.functions.percentage.toFixed(1)}% (${result.summary.overallCoverage.functions.covered}/${result.summary.overallCoverage.functions.total})`
      );
    }

    console.log(`\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: ${result.coverageScore}/100 - ${result.grade}`);

    if (result.recommendations.length > 0) {
      console.log(`\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:`);
      result.recommendations.forEach(rec => console.log(`  - ${rec}`));
    }
  }

  async fileExists(filePath) {
    try {
      await fs.access(filePath);
      return true;
    } catch {
      return false;
    }
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
async function runAnalysis() {
  const analyzer = new CoverageAnalyzer('C:\\kinderly-events');
  const result = await analyzer.analyzeProject();

  console.log('\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
  return result;
}

runAnalysis().catch(console.error);
