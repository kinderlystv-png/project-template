/**
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –±–µ–∑ API —Å–µ—Ä–≤–µ—Ä–∞
 */
const path = require('path');

async function testAnalyzer() {
  console.log('üß™ –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...\n');

  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    const SimpleProjectAnalyzer = require('./simple-analyzer.cjs');

    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
    const analyzer = new SimpleProjectAnalyzer();
    console.log('‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞–Ω');

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    console.log('üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞...');

    const result = await analyzer.analyzeProject('.');

    if (result.success) {
      console.log('\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log('üìä –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞:', result.score + '/100');
      console.log('‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', result.executionTime + 'ms');
      console.log('üìÅ –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É:', result.projectPath);
      console.log('üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', result.results.length);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      if (result.results.length > 0) {
        console.log('\nüîç –ü–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:');
        result.results.slice(0, 5).forEach((res, index) => {
          console.log(
            `${index + 1}. ${res.category || '–û–±—â–µ–µ'}: ${res.message || res.description || res}`
          );
        });

        if (result.results.length > 5) {
          console.log(`   ... –∏ –µ—â–µ ${result.results.length - 5} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
        }
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
      if (result.report) {
        console.log('\nüìã –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç:');
        console.log(result.report.split('\n').slice(0, 10).join('\n'));
        console.log('   ...');
      }
    } else {
      console.log('‚ùå –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π');
      if (result.error) {
        console.log('–û—à–∏–±–∫–∞:', result.error);
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    console.error('Stack:', error.stack);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testAnalyzer()
  .then(() => {
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  })
  .catch(error => {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  });
