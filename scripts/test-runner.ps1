#!/usr/bin/env pwsh

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤

param(
    [Parameter(Position=0)]
    [ValidateSet("unit", "integration", "performance", "visual", "e2e", "coverage", "all", "watch")]
    [string]$TestType = "all",
    
    [Parameter()]
    [string]$Filter = "",
    
    [Parameter()]
    [switch]$Watch = $false,
    
    [Parameter()]
    [switch]$Coverage = $false,
    
    [Parameter()]
    [switch]$Detailed = $false,
    
    [Parameter()]
    [switch]$Help = $false
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏
function Show-Help {
    Write-Host "üß™ SHINOMONTAGKA Test Runner" -ForegroundColor Cyan
    Write-Host "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/test-runner.ps1 [—Ç–∏–ø] [–æ–ø—Ü–∏–∏]" -ForegroundColor White
    Write-Host ""
    Write-Host "–¢–ò–ü–´ –¢–ï–°–¢–û–í:" -ForegroundColor Yellow
    Write-Host "  unit         - –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤" -ForegroundColor Gray
    Write-Host "  integration  - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã" -ForegroundColor Gray
    Write-Host "  performance  - –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏" -ForegroundColor Gray
    Write-Host "  visual       - –í–∏–∑—É–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã UI" -ForegroundColor Gray
    Write-Host "  e2e          - End-to-End —Ç–µ—Å—Ç—ã" -ForegroundColor Gray
    Write-Host "  coverage     - –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞" -ForegroundColor Gray
    Write-Host "  all          - –í—Å–µ —Ç–µ—Å—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)" -ForegroundColor Gray
    Write-Host "  watch        - –†–µ–∂–∏–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è" -ForegroundColor Gray
    Write-Host ""
    Write-Host "–û–ü–¶–ò–ò:" -ForegroundColor Yellow
    Write-Host "  -Filter      - –§–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏ —Ç–µ—Å—Ç–∞" -ForegroundColor Gray
    Write-Host "  -Watch       - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è" -ForegroundColor Gray
    Write-Host "  -Coverage    - –í–∫–ª—é—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è" -ForegroundColor Gray
    Write-Host "  -Detailed    - –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥" -ForegroundColor Gray
    Write-Host ""
    Write-Host "–ü–†–ò–ú–ï–†–´:" -ForegroundColor Yellow
    Write-Host "  ./scripts/test-runner.ps1 unit" -ForegroundColor Gray
    Write-Host "  ./scripts/test-runner.ps1 unit -Filter Calculator" -ForegroundColor Gray
    Write-Host "  ./scripts/test-runner.ps1 integration -Watch" -ForegroundColor Gray
    Write-Host "  ./scripts/test-runner.ps1 all -Coverage" -ForegroundColor Gray
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Å–ø—Ä–∞–≤–∫–∏
if ($Help -or $args -contains "-h" -or $args -contains "--help" -or $args -contains "help") {
    Show-Help
    exit 0
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
if (-not (Test-Path "tests/reports")) {
    New-Item -ItemType Directory -Path "tests/reports" -Force | Out-Null
}

# –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Vitest
$BaseArgs = @("--config=tests/vitest.config.ts")

if ($Detailed) {
    $BaseArgs += "--reporter=verbose"
}

if ($Watch -or $TestType -eq "watch") {
    $BaseArgs += "--watch"
}

if ($Coverage) {
    $BaseArgs += "--coverage"
}

if ($Filter) {
    $BaseArgs += "--grep=$Filter"
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
function Invoke-TestCommand {
    param($TestPath, $TestName)
    
    Write-Host "üß™ –ó–∞–ø—É—Å–∫ $TestName..." -ForegroundColor Cyan
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è npm run test
    $BaseCommand = "npm"
    $RunArgs = @("run")
    
    if ($Watch -or $TestType -eq "watch") {
        $RunArgs += "test:watch"
        $RunArgs += "--"
        $RunArgs += $TestPath
    } else {
        $RunArgs += "test"
        $RunArgs += "--"
        $RunArgs += $TestPath
    }
    
    $CommandString = "$BaseCommand $($RunArgs -join ' ')"
    Write-Host "–ö–æ–º–∞–Ω–¥–∞: $CommandString" -ForegroundColor Gray
    
    $Process = Start-Process -FilePath $BaseCommand -ArgumentList $RunArgs -Wait -PassThru -NoNewWindow
    
    if ($Process.ExitCode -eq 0) {
        Write-Host "‚úÖ $TestName –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $TestName –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏" -ForegroundColor Red
    }
    
    return $Process.ExitCode
}

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
switch ($TestType) {
    "unit" {
        Invoke-TestCommand "tests/unit" "–Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã"
    }
    
    "integration" {
        Invoke-TestCommand "tests/integration" "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"
    }
    
    "performance" {
        Invoke-TestCommand "tests/performance" "–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    }
    
    "visual" {
        Invoke-TestCommand "tests/visual" "–í–∏–∑—É–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã"
    }
    
    "e2e" {
        Write-Host "üåê –ó–∞–ø—É—Å–∫ E2E —Ç–µ—Å—Ç–æ–≤ —Å Playwright..." -ForegroundColor Cyan
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Playwright
        if (-not (Get-Command npx -ErrorAction SilentlyContinue)) {
            Write-Error "npx –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js."
            exit 1
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Playwright –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if (-not (Test-Path "node_modules/@playwright/test")) {
            Write-Host "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Playwright..." -ForegroundColor Yellow
            npm install @playwright/test
            npx playwright install
        }
        
        $PlaywrightArgs = @("playwright", "test")
        if ($Detailed) { $PlaywrightArgs += "--reporter=list" }
        if ($Filter) { $PlaywrightArgs += "--grep=$Filter" }
        
        & npx @PlaywrightArgs
    }
    
    "coverage" {
        Write-Host "üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏..." -ForegroundColor Cyan
        Invoke-TestCommand "tests/unit tests/integration" "–ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞"
        
        if (Test-Path "tests/coverage/index.html") {
            Write-Host "üìÅ –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏: tests/coverage/index.html" -ForegroundColor Green
            
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            try {
                Start-Process "tests/coverage/index.html"
            } catch {
                Write-Host "üí° –û—Ç–∫—Ä–æ–π—Ç–µ tests/coverage/index.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–∞" -ForegroundColor Yellow
            }
        }
    }
    
    "watch" {
        Write-Host "üëÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è..." -ForegroundColor Cyan
        Write-Host "–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏" -ForegroundColor Gray
        
        $WatchArgs = @("vitest") + $BaseArgs + @("--watch", "tests/unit", "tests/integration")
        & npx @WatchArgs
    }
    
    "all" {
        Write-Host "üéØ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤..." -ForegroundColor Cyan
        
        $AllPassed = $true
        
        # –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã
        $Result1 = Invoke-TestCommand "tests/unit" "–Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã"
        if ($Result1 -ne 0) { $AllPassed = $false }
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        $Result2 = Invoke-TestCommand "tests/integration" "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"
        if ($Result2 -ne 0) { $AllPassed = $false }
        
        # –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        $Result3 = Invoke-TestCommand "tests/performance" "–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
        if ($Result3 -ne 0) { $AllPassed = $false }
        
        # –í–∏–∑—É–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
        $Result4 = Invoke-TestCommand "tests/visual" "–í–∏–∑—É–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã"
        if ($Result4 -ne 0) { $AllPassed = $false }
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        Write-Host "`n" + "="*50 -ForegroundColor Cyan
        if ($AllPassed) {
            Write-Host "üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!" -ForegroundColor Green
            exit 0
        } else {
            Write-Host "‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´!" -ForegroundColor Red
            exit 1
        }
    }
    
    default {
        Write-Error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–æ–≤: $TestType"
        Show-Help
        exit 1
    }
}

# –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
if ((Test-Path "tests/reports") -and -not ($Watch -or $TestType -eq "watch")) {
    Write-Host "`nüìÅ –û—Ç—á–µ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤:" -ForegroundColor Yellow
    Get-ChildItem "tests/reports" | ForEach-Object {
        Write-Host "   ‚Ä¢ $($_.Name)" -ForegroundColor Gray
    }
}
