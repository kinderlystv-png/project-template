#!/usr/bin/env node

/**
 * üßπ EAP Analyzer Deep Cleanup
 * –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ eap-analyzer –æ—Ç –º—É—Å–æ—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
 */

const fs = require('fs');
const path = require('path');

class EAPAnalyzerCleaner {
  constructor(eapPath) {
    this.eapPath = eapPath;
    this.toDelete = [];
    this.issues = [];
  }

  analyzeForCleanup() {
    console.log('üîç –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ EAP Analyzer –¥–ª—è –æ—á–∏—Å—Ç–∫–∏...\n');

    // 1. –î–ï–ú–û –ò –¢–ï–°–¢–û–í–´–ï –§–ê–ô–õ–´
    this.findDemoFiles();

    // 2. –î–£–ë–õ–ò–†–£–Æ–©–ò–ï–°–Ø .js/.ts –ü–ê–†–´
    this.findDuplicatePairs();

    // 3. –°–¢–ê–†–´–ï –û–¢–ß–ï–¢–´
    this.findOldReports();

    // 4. COMPLETION REPORTS
    this.findCompletionReports();

    // 5. GENERATED FILES
    this.findGeneratedFiles();

    // 6. –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê–õ–¨–ù–´–ï
    this.findExperimentalFiles();

    this.printResults();
  }

  findDemoFiles() {
    console.log('üé≠ –ü–æ–∏—Å–∫ –¥–µ–º–æ —Ñ–∞–π–ª–æ–≤...');

    const demoFiles = [
      'simple-demo.ts',
      'simple-demo.js',
      'advanced-demo.cjs',
      'src/simple-demo.ts',
      'demo-phase4-integration.cjs',
      'final-demo.mjs',
      'src/modules/structure-analyzer/demo.js',
      'src/reporters/templates/demo.ts',
      'src/reporters/template-demo.ts',
      'demo-report.json',
      'demo-report.md',
    ];

    for (const file of demoFiles) {
      this.checkAndAddForDeletion(file, 'Demo file');
    }
  }

  findDuplicatePairs() {
    console.log('üîÑ –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è .js/.ts –ø–∞—Ä...');

    // –ò—â–µ–º .js —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç .ts –≤–µ—Ä—Å–∏–∏
    const duplicates = [
      ['dist-cjs/utils/adaptive-thresholds.js', 'src/utils/adaptive-thresholds.ts'],
      ['dist-cjs/utils/file-utils.js', 'src/utils/file-utils.ts'],
      ['dist-cjs/utils/error-handler.js', 'src/utils/error-handler.ts'],
      ['dist-cjs/cli.js', 'src/cli.ts'],
      [
        'dist-cjs/modules/ai-insights/ai-insights-engine-simple.js',
        'src/modules/ai-insights/ai-insights-engine-simple.ts',
      ],
      ['dist-cjs/utils/detailed-roadmap-generator.js', 'src/utils/detailed-roadmap-generator.ts'],
      ['dist-cjs/utils/report-generator.js', 'src/utils/report-generator.ts'],
    ];

    for (const [jsFile, tsFile] of duplicates) {
      if (this.fileExists(jsFile) && this.fileExists(tsFile)) {
        this.checkAndAddForDeletion(jsFile, `Duplicate of ${tsFile}`);
      }
    }
  }

  findOldReports() {
    console.log('üìä –ü–æ–∏—Å–∫ —Å—Ç–∞—Ä—ã—Ö –æ—Ç—á–µ—Ç–æ–≤...');

    const oldReports = [
      // –°—Ç–∞—Ä—ã–µ –∞–Ω–∞–ª–∏–∑—ã —Å –¥–∞—Ç–∞–º–∏
      'reports/analysis_kinderly-events_2025-09-09_13-08-41.json',
      'reports/analysis_kinderly-events_2025-09-09_13-17-20.json',
      'reports/analysis_project-template_2025-09-09_13-14-22.json',
      'reports/analysis_src_2025-09-09_13-08-45.json',
      'reports/analysis___HEYS_2_2025-09-09_13-16-01.json',
      'reports/analysis___HEYS_2_2025-09-09_20-17-08.json',
      'reports/analysis___HEYS_2_2025-09-09_23-16-43.json',

      // –°—Ç–∞—Ä—ã–µ —Ä–æ–∞–¥–º–∞–ø—ã
      'reports/ROADMAP_kinderly-events_2025-09-09_13-08-41.md',
      'reports/ROADMAP_kinderly-events_2025-09-09_13-17-20.md',
      'reports/ROADMAP_project-template_2025-09-09_13-14-22.md',
      'reports/ROADMAP_src_2025-09-09_13-08-45.md',
      'reports/ROADMAP___HEYS_2_2025-09-09_13-16-01.md',
      'reports/ROADMAP___HEYS_2_2025-09-09_20-17-08.md',

      // –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –æ—Ç—á–µ—Ç—ã
      'eap-analysis-latest.json',
      'simple-analysis-report.json',
      'ai-analysis-report.json',
      'enhanced-ai-report.json',
      'self-analysis-report.json',
      'reports/validation-report.md',
      'reports/simple-analysis-report.json',
    ];

    for (const file of oldReports) {
      this.checkAndAddForDeletion(file, 'Old report');
    }
  }

  findCompletionReports() {
    console.log('‚úÖ –ü–æ–∏—Å–∫ completion –æ—Ç—á–µ—Ç–æ–≤...');

    const completionReports = [
      'AI-INTEGRATION-COMPLETE.md',
      'src/ai-integration/AI-INTEGRATION-COMPLETE.md',
      'PACKAGE-RENAME-COMPLETE.md',
      'ROADMAP-GENERATION-COMPLETE.md',
      'src/modules/structure-analyzer/INTEGRATION-COMPLETE.md',
      'PHASE-1-COMPLETION-REPORT.md',
      'PHASE-1-2-COMPLETION-REPORT.md',
      'PHASE-2-COMPLETION-REPORT.md',
      'PHASE-3-COMPLETION-REPORT.md',
      'PHASE-4.1-COMPLETION-REPORT.md',
      'PHASE-1.2-CI-CD-COMPLETE.md',
    ];

    for (const file of completionReports) {
      this.checkAndAddForDeletion(file, 'Completion report');
    }
  }

  findGeneratedFiles() {
    console.log('‚öôÔ∏è –ü–æ–∏—Å–∫ generated —Ñ–∞–π–ª–æ–≤...');

    // .svelte-kit —Ñ–∞–π–ª—ã –≤–æ–æ–±—â–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
    const generatedPatterns = ['.svelte-kit/generated/', '.svelte-kit/ambient.d.ts'];

    // –ò—â–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    this.walkDirectory(this.eapPath, filePath => {
      const relativePath = path.relative(this.eapPath, filePath);

      for (const pattern of generatedPatterns) {
        if (relativePath.includes(pattern)) {
          this.toDelete.push({
            file: relativePath,
            reason: 'Generated file (should not be analyzed)',
            fullPath: filePath,
          });
          break;
        }
      }
    });
  }

  findExperimentalFiles() {
    console.log('üß™ –ü–æ–∏—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');

    const experimentalFiles = [
      'ai-report.md',
      'reports/–≠–¢–ê–õ–û–ù –û–¢–ß–ï–¢–ê ‚Äî –∫–æ–ø–∏—è ‚Äî –∫–æ–ø–∏—è (2).md',
      'reports/–ß–Å–¢–ö–ò–ô –†–û–ê–î–ú–ê–ü –î–õ–Ø –ê–ü–ì–†–ï–ô–î–ê –¥–æ 4,0.md',
      'reports/ETALON_ANALIZ_ROADMAP.md',
      '–∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è .md',
      'HOW-TO-USE-SIMPLE.md',
    ];

    for (const file of experimentalFiles) {
      this.checkAndAddForDeletion(file, 'Experimental file');
    }
  }

  checkAndAddForDeletion(relativePath, reason) {
    const fullPath = path.join(this.eapPath, relativePath);

    if (this.fileExists(relativePath)) {
      this.toDelete.push({
        file: relativePath,
        reason: reason,
        fullPath: fullPath,
      });
    }
  }

  fileExists(relativePath) {
    const fullPath = path.join(this.eapPath, relativePath);
    return fs.existsSync(fullPath);
  }

  walkDirectory(dir, callback) {
    if (!fs.existsSync(dir)) return;

    const files = fs.readdirSync(dir);

    for (const file of files) {
      const fullPath = path.join(dir, file);
      const stat = fs.statSync(fullPath);

      if (stat.isDirectory()) {
        this.walkDirectory(fullPath, callback);
      } else {
        callback(fullPath);
      }
    }
  }

  printResults() {
    console.log('\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:');
    console.log(`–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${this.toDelete.length}\n`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º
    const grouped = {};
    for (const item of this.toDelete) {
      if (!grouped[item.reason]) {
        grouped[item.reason] = [];
      }
      grouped[item.reason].push(item.file);
    }

    for (const [reason, files] of Object.entries(grouped)) {
      console.log(`üóëÔ∏è ${reason} (${files.length} —Ñ–∞–π–ª–æ–≤):`);
      files.slice(0, 5).forEach(file => console.log(`   - ${file}`));
      if (files.length > 5) {
        console.log(`   ... –∏ –µ—â–µ ${files.length - 5} —Ñ–∞–π–ª–æ–≤`);
      }
      console.log('');
    }

    console.log('‚ùì –•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–∏ —Ñ–∞–π–ª—ã? (–ó–∞–ø—É—Å—Ç–∏—Ç–µ eap-cleaner-execute.js)');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    const cleanupData = {
      timestamp: new Date().toISOString(),
      eapPath: this.eapPath,
      toDelete: this.toDelete,
    };

    fs.writeFileSync(
      path.join(__dirname, 'eap-cleanup-data.json'),
      JSON.stringify(cleanupData, null, 2)
    );
  }
}

// –ó–∞–ø—É—Å–∫
const eapPath = process.argv[2] || path.resolve(__dirname, '../eap-analyzer');
const cleaner = new EAPAnalyzerCleaner(eapPath);
cleaner.analyzeForCleanup();
