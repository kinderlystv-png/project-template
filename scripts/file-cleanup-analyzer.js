#!/usr/bin/env node

/**
 * üßπ EAP Project File Cleanup Analyzer
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

class FileCleanupAnalyzer {
  constructor(projectRoot) {
    this.projectRoot = projectRoot;
    this.analysisResults = {
      duplicates: [],
      oldReports: [],
      generatedFiles: [],
      experimentalFiles: [],
      unusedFiles: [],
      safeToDelete: [],
      requiresReview: [],
    };
  }

  async analyzeProject() {
    console.log('üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...\n');

    try {
      await this.findDuplicateFiles();
      await this.findOldReports();
      await this.findGeneratedFiles();
      await this.findExperimentalFiles();
      await this.checkFileUsage();

      this.categorizeResults();
      this.generateReport();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
    }
  }

  async findDuplicateFiles() {
    console.log('üìÇ –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤ (.js/.ts –ø–∞—Ä—ã)...');

    const allFiles = this.getAllFiles(this.projectRoot);
    const duplicatePairs = new Map();

    for (const file of allFiles) {
      const ext = path.extname(file);
      const baseName = file.slice(0, -ext.length);

      if (ext === '.js') {
        const tsVersion = baseName + '.ts';
        if (allFiles.includes(tsVersion)) {
          duplicatePairs.set(file, tsVersion);
        }
      }
    }

    this.analysisResults.duplicates = Array.from(duplicatePairs.entries());
    console.log(`   –ù–∞–π–¥–µ–Ω–æ ${this.analysisResults.duplicates.length} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–∞—Ä\n`);
  }

  async findOldReports() {
    console.log('üìä –ü–æ–∏—Å–∫ —Å—Ç–∞—Ä—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');

    const reportPatterns = [
      /analysis_.*_\d{4}-\d{2}-\d{2}_\d{2}-\d{2}-\d{2}\.json$/,
      /ROADMAP_.*_\d{4}-\d{2}-\d{2}_\d{2}-\d{2}-\d{2}\.md$/,
      /PHASE-\d+.*REPORT.*\.md$/,
      /.*demo.*report.*\.(json|md)$/i,
      /.*-COMPLETE\.md$/,
      /.*SUMMARY\.md$/,
    ];

    const allFiles = this.getAllFiles(this.projectRoot);

    for (const file of allFiles) {
      const fileName = path.basename(file);
      const stats = fs.statSync(file);
      const daysSinceModified = (Date.now() - stats.mtime.getTime()) / (1000 * 60 * 60 * 24);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å—Ç–∞—Ä—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
      for (const pattern of reportPatterns) {
        if (pattern.test(fileName)) {
          this.analysisResults.oldReports.push({
            file,
            reason: `Matches pattern: ${pattern.source}`,
            age: Math.floor(daysSinceModified),
            size: stats.size,
          });
          break;
        }
      }

      // –§–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π –≤ –ø–∞–ø–∫–µ reports
      if (file.includes('/reports/') && daysSinceModified > 30) {
        this.analysisResults.oldReports.push({
          file,
          reason: 'Old report file (>30 days)',
          age: Math.floor(daysSinceModified),
          size: stats.size,
        });
      }
    }

    console.log(`   –ù–∞–π–¥–µ–Ω–æ ${this.analysisResults.oldReports.length} —Å—Ç–∞—Ä—ã—Ö –æ—Ç—á–µ—Ç–æ–≤\n`);
  }

  async findGeneratedFiles() {
    console.log('‚öôÔ∏è –ü–æ–∏—Å–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');

    const generatedPatterns = [
      /\.svelte-kit\//,
      /dist-cjs\//,
      /node_modules\//,
      /\.map$/,
      /\.d\.ts$/,
      /generated/,
    ];

    const allFiles = this.getAllFiles(this.projectRoot);

    for (const file of allFiles) {
      for (const pattern of generatedPatterns) {
        if (pattern.test(file)) {
          this.analysisResults.generatedFiles.push({
            file,
            reason: `Generated file: ${pattern.source}`,
          });
          break;
        }
      }
    }

    console.log(
      `   –ù–∞–π–¥–µ–Ω–æ ${this.analysisResults.generatedFiles.length} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤\n`
    );
  }

  async findExperimentalFiles() {
    console.log('üß™ –ü–æ–∏—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');

    const experimentalPatterns = [
      /demo(?!.*test)/i,
      /test.*demo/i,
      /simple.*demo/i,
      /example/i,
      /temp/i,
      /tmp/i,
      /-copy/i,
      /–∫–æ–ø–∏—è/i,
      /backup/i,
    ];

    const allFiles = this.getAllFiles(this.projectRoot);

    for (const file of allFiles) {
      const fileName = path.basename(file);

      for (const pattern of experimentalPatterns) {
        if (pattern.test(fileName)) {
          this.analysisResults.experimentalFiles.push({
            file,
            reason: `Experimental: ${pattern.source}`,
          });
          break;
        }
      }
    }

    console.log(
      `   –ù–∞–π–¥–µ–Ω–æ ${this.analysisResults.experimentalFiles.length} —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤\n`
    );
  }

  async checkFileUsage() {
    console.log('üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–¥–µ...');

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º git grep –¥–ª—è –ø–æ–∏—Å–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤
      const jsFiles = this.getAllFiles(this.projectRoot).filter(
        f => f.endsWith('.js') || f.endsWith('.ts') || f.endsWith('.json')
      );

      for (const file of jsFiles.slice(0, 50)) {
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        const fileName = path.basename(file, path.extname(file));

        try {
          const grepResult = execSync(
            `git grep -l "${fileName}" -- "*.js" "*.ts" "*.json" "*.md"`,
            { cwd: this.projectRoot, encoding: 'utf8' }
          );

          if (!grepResult.trim()) {
            this.analysisResults.unusedFiles.push({
              file,
              reason: 'No references found in codebase',
            });
          }
        } catch (e) {
          // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–¥–µ
          if (e.status === 1) {
            this.analysisResults.unusedFiles.push({
              file,
              reason: 'No references found in codebase',
            });
          }
        }
      }
    } catch (error) {
      console.log('   ‚ö†Ô∏è Git grep –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
    }

    console.log(`   –ù–∞–π–¥–µ–Ω–æ ${this.analysisResults.unusedFiles.length} –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤\n`);
  }

  categorizeResults() {
    console.log('üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');

    // –§–∞–π–ª—ã –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    const safePatterns = [
      /\.md$/, // –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ markdown —Ñ–∞–π–ª–æ–≤
      /reports\/.*\.json$/, // –°—Ç–∞—Ä—ã–µ –æ—Ç—á–µ—Ç—ã
      /PHASE-.*\.md$/, // –§–∞–∑–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã
      /demo.*\.(js|ts)$/, // –î–µ–º–æ —Ñ–∞–π–ª—ã
    ];

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    const allCandidates = [
      ...this.analysisResults.duplicates.map(([js, ts]) => ({
        file: js,
        reason: 'Duplicate JS file',
      })),
      ...this.analysisResults.oldReports,
      ...this.analysisResults.experimentalFiles,
      ...this.analysisResults.unusedFiles,
    ];

    for (const candidate of allCandidates) {
      const file = candidate.file;
      let isSafe = false;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      for (const pattern of safePatterns) {
        if (pattern.test(file)) {
          isSafe = true;
          break;
        }
      }

      // –ò—Å–∫–ª—é—á–∞–µ–º –≤–∞–∂–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      const criticalFiles = [
        'package.json',
        'tsconfig.json',
        'vite.config',
        'eslint.config',
        '.gitignore',
        'README.md',
      ];

      const isCritical = criticalFiles.some(critical => path.basename(file).includes(critical));

      if (isCritical) {
        continue; // –ù–µ —Ç—Ä–æ–≥–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
      }

      if (isSafe) {
        this.analysisResults.safeToDelete.push(candidate);
      } else {
        this.analysisResults.requiresReview.push(candidate);
      }
    }

    console.log(`   –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª–∏—Ç—å: ${this.analysisResults.safeToDelete.length}`);
    console.log(`   –¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: ${this.analysisResults.requiresReview.length}\n`);
  }

  generateReport() {
    console.log('üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...\n');

    const reportPath = path.join(this.projectRoot, 'cleanup-analysis-report.md');

    let report = `# üßπ –û—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞

–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: ${new Date().toLocaleString('ru-RU')}

## üìä –°–≤–æ–¥–∫–∞

- **–î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ–∞–π–ª—ã**: ${this.analysisResults.duplicates.length}
- **–°—Ç–∞—Ä—ã–µ –æ—Ç—á–µ—Ç—ã**: ${this.analysisResults.oldReports.length}
- **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã**: ${this.analysisResults.generatedFiles.length}
- **–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã**: ${this.analysisResults.experimentalFiles.length}
- **–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–∞–π–ª—ã**: ${this.analysisResults.unusedFiles.length}

### üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- **–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª–∏—Ç—å**: ${this.analysisResults.safeToDelete.length} —Ñ–∞–π–ª–æ–≤
- **–¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏**: ${this.analysisResults.requiresReview.length} —Ñ–∞–π–ª–æ–≤

## üü¢ –§–∞–π–ª—ã –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

`;

    for (const item of this.analysisResults.safeToDelete) {
      report += `- \`${item.file}\` - ${item.reason}\n`;
    }

    report += `\n## üü° –§–∞–π–ª—ã —Ç—Ä–µ–±—É—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏

`;

    for (const item of this.analysisResults.requiresReview.slice(0, 20)) {
      report += `- \`${item.file}\` - ${item.reason}\n`;
    }

    if (this.analysisResults.requiresReview.length > 20) {
      report += `\n... –∏ –µ—â–µ ${this.analysisResults.requiresReview.length - 20} —Ñ–∞–π–ª–æ–≤\n`;
    }

    report += `\n## üìã –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ–∞–π–ª—ã (.js/.ts –ø–∞—Ä—ã)

`;

    for (const [js, ts] of this.analysisResults.duplicates) {
      report += `- JS: \`${js}\`\n- TS: \`${ts}\`\n\n`;
    }

    fs.writeFileSync(reportPath, report);

    console.log(`‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
    console.log('\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç');
    console.log('2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
    console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–µ–Ω–∏—è');
  }

  getAllFiles(dir, fileList = []) {
    const files = fs.readdirSync(dir);

    for (const file of files) {
      const filePath = path.join(dir, file);
      const stat = fs.statSync(filePath);

      if (stat.isDirectory()) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏
        if (!['node_modules', '.git', '.svelte-kit', 'dist'].includes(file)) {
          this.getAllFiles(filePath, fileList);
        }
      } else {
        fileList.push(filePath.replace(this.projectRoot + path.sep, '').replace(/\\/g, '/'));
      }
    }

    return fileList;
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
const projectRoot = process.argv[2] || process.cwd();
const analyzer = new FileCleanupAnalyzer(projectRoot);
analyzer.analyzeProject().catch(console.error);
