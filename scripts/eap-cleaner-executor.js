#!/usr/bin/env node

/**
 * üßπ EAP Analyzer Cleanup Executor
 * –ò—Å–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

class EAPCleanupExecutor {
  constructor() {
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
    });
    this.deleted = [];
    this.errors = [];
  }

  async execute() {
    console.log('üóëÔ∏è EAP Analyzer Cleanup Executor\n');

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
      const dataPath = path.join(__dirname, 'eap-cleanup-data.json');

      if (!fs.existsSync(dataPath)) {
        console.log('‚ùå –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ eap-cleaner-analyzer.js');
        return;
      }

      const cleanupData = JSON.parse(fs.readFileSync(dataPath, 'utf8'));

      console.log(`üìÅ EAP –ø—É—Ç—å: ${cleanupData.eapPath}`);
      console.log(`üìÖ –ê–Ω–∞–ª–∏–∑ –æ—Ç: ${new Date(cleanupData.timestamp).toLocaleString('ru-RU')}`);
      console.log(`üóëÔ∏è –§–∞–π–ª–æ–≤ –∫ —É–¥–∞–ª–µ–Ω–∏—é: ${cleanupData.toDelete.length}\n`);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
      this.showPreview(cleanupData.toDelete);

      // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      const confirmed = await this.askConfirmation(
        `–£–¥–∞–ª–∏—Ç—å ${cleanupData.toDelete.length} —Ñ–∞–π–ª–æ–≤ –∏–∑ EAP Analyzer?`
      );

      if (!confirmed) {
        console.log('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        return;
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
      await this.performCleanup(cleanupData.toDelete);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
      this.generateReport();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
      this.rl.close();
    }
  }

  showPreview(toDelete) {
    console.log('üìã –ü–†–ï–í–¨–Æ –£–î–ê–õ–ï–ù–ò–Ø:\n');

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
    const grouped = {};
    for (const item of toDelete) {
      if (!grouped[item.reason]) {
        grouped[item.reason] = [];
      }
      grouped[item.reason].push(item.file);
    }

    for (const [reason, files] of Object.entries(grouped)) {
      console.log(`üóÇÔ∏è ${reason}: ${files.length} —Ñ–∞–π–ª–æ–≤`);
      files.slice(0, 3).forEach(file => console.log(`   ‚Ä¢ ${file}`));
      if (files.length > 3) {
        console.log(`   ... –∏ –µ—â–µ ${files.length - 3}`);
      }
      console.log('');
    }
  }

  async askConfirmation(question) {
    return new Promise(resolve => {
      this.rl.question(`${question} (y/N): `, answer => {
        resolve(answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes');
      });
    });
  }

  async performCleanup(toDelete) {
    console.log('üóëÔ∏è –ù–∞—á–∏–Ω–∞—é —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...\n');

    for (const item of toDelete) {
      try {
        if (fs.existsSync(item.fullPath)) {
          fs.unlinkSync(item.fullPath);
          console.log(`‚úÖ –£–¥–∞–ª–µ–Ω: ${item.file}`);
          this.deleted.push(item);
        } else {
          console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${item.file}`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${item.file}:`, error.message);
        this.errors.push({
          file: item.file,
          error: error.message,
        });
      }
    }

    console.log(`\n‚úÖ –£–¥–∞–ª–µ–Ω–æ: ${this.deleted.length} —Ñ–∞–π–ª–æ–≤`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${this.errors.length}`);
  }

  generateReport() {
    const reportPath = path.join(__dirname, '../eap-cleanup-execution-report.md');

    let report = `# üßπ –û—Ç—á–µ—Ç –ø–æ –æ—á–∏—Å—Ç–∫–µ EAP Analyzer

–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${new Date().toLocaleString('ru-RU')}

## üìä –°–≤–æ–¥–∫–∞

- **–£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤**: ${this.deleted.length}
- **–û—à–∏–±–æ–∫**: ${this.errors.length}

## ‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã

`;

    for (const item of this.deleted) {
      report += `- \`${item.file}\` - ${item.reason}\n`;
    }

    if (this.errors.length > 0) {
      report += `\n## ‚ùå –û—à–∏–±–∫–∏

`;
      for (const error of this.errors) {
        report += `- \`${error.file}\` - ${error.error}\n`;
      }
    }

    report += `\n## üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç

EAP Analyzer –æ—á–∏—â–µ–Ω –æ—Ç ${this.deleted.length} –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π: \`node live-generator.cjs\`
`;

    fs.writeFileSync(reportPath, report);
    console.log(`\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
  }
}

// –ó–∞–ø—É—Å–∫
const executor = new EAPCleanupExecutor();
executor.execute().catch(console.error);
