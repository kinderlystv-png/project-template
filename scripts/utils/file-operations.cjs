#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ JSON —Ñ–∞–π–ª–∞
 * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
 * @returns {object|null} - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
exports.readJsonFile = filePath => {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    return JSON.parse(content);
  } catch (error) {
    console.error(`‚ùå Error reading ${filePath}:`, error.message);
    return null;
  }
};

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–ø–∏—Å—å JSON —Ñ–∞–π–ª–∞
 * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
 * @param {object} content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
 * @returns {boolean} - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
exports.writeJsonFile = (filePath, content) => {
  try {
    const jsonString = JSON.stringify(content, null, 2);
    fs.writeFileSync(filePath, jsonString);
    return true;
  } catch (error) {
    console.error(`‚ùå Error writing ${filePath}:`, error.message);
    return false;
  }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –∑–∞–º–µ–Ω–∞–º–∏
 * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
 * @param {Array<[string, string]>} replacements - –ú–∞—Å—Å–∏–≤ –∑–∞–º–µ–Ω [—Å—Ç–∞—Ä–æ–µ, –Ω–æ–≤–æ–µ]
 * @returns {boolean} - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
exports.updateFile = (filePath, replacements) => {
  try {
    let content = fs.readFileSync(filePath, 'utf8');

    replacements.forEach(([search, replace]) => {
      content = content.replace(new RegExp(search, 'g'), replace);
    });

    fs.writeFileSync(filePath, content);
    return true;
  } catch (error) {
    console.error(`‚ùå Error updating ${filePath}:`, error.message);
    return false;
  }
};

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
 * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
 * @returns {boolean} - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
exports.deleteFile = filePath => {
  try {
    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath);
      console.log(`üóëÔ∏è Removed: ${path.basename(filePath)}`);
    }
    return true;
  } catch (error) {
    console.error(`‚ùå Error deleting ${filePath}:`, error.message);
    return false;
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
 * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
 * @returns {boolean} - –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
 */
exports.fileExists = filePath => {
  return fs.existsSync(filePath);
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)
 * @param {string} dirPath - –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
 * @returns {boolean} - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
exports.createDirectory = dirPath => {
  try {
    if (!fs.existsSync(dirPath)) {
      fs.mkdirSync(dirPath, { recursive: true });
      console.log(`üìÅ Created directory: ${dirPath}`);
    }
    return true;
  } catch (error) {
    console.error(`‚ùå Error creating directory ${dirPath}:`, error.message);
    return false;
  }
};

/**
 * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
 * @param {string} source - –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
 * @param {string} destination - –¶–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª
 * @returns {boolean} - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
exports.copyFile = (source, destination) => {
  try {
    fs.copyFileSync(source, destination);
    console.log(`üìã Copied: ${path.basename(source)} ‚Üí ${path.basename(destination)}`);
    return true;
  } catch (error) {
    console.error(`‚ùå Error copying ${source} to ${destination}:`, error.message);
    return false;
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
 * @param {string} dirPath - –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
 * @param {string} extension - –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {Array<string>} - –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
 */
exports.getFiles = (dirPath, extension = null) => {
  try {
    if (!fs.existsSync(dirPath)) {
      return [];
    }

    let files = fs.readdirSync(dirPath);

    if (extension) {
      files = files.filter(file => file.endsWith(extension));
    }

    return files.map(file => path.join(dirPath, file));
  } catch (error) {
    console.error(`‚ùå Error reading directory ${dirPath}:`, error.message);
    return [];
  }
};

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á —Å –æ—Ç—á–µ—Ç–æ–º –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
 * @param {Array<{name: string, fn: Function}>} tasks - –ú–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á
 * @returns {Promise<boolean>} - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
 */
exports.executeTasks = async tasks => {
  console.log(`üìã Executing ${tasks.length} tasks...\n`);

  let completed = 0;
  let failed = 0;

  for (const task of tasks) {
    try {
      console.log(`üîÑ ${task.name}...`);
      const result = await task.fn();

      if (result !== false) {
        console.log(`‚úÖ ${task.name} completed\n`);
        completed++;
      } else {
        throw new Error('Task returned false');
      }
    } catch (error) {
      console.error(`‚ùå ${task.name} failed:`, error.message);
      failed++;

      if (task.required !== false) {
        console.error('üõë Required task failed. Stopping execution.');
        return false;
      }
      console.log(`‚ö†Ô∏è Optional task failed. Continuing...\n`);
    }
  }

  console.log(`üìä Results: ${completed} completed, ${failed} failed`);
  return failed === 0;
};
