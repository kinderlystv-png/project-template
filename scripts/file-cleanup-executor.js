#!/usr/bin/env node

/**
 * üßπ EAP Project File Cleanup Tool
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const readline = require('readline');

class FileCleanupExecutor {
  constructor(projectRoot) {
    this.projectRoot = projectRoot;
    this.deletedFiles = [];
    this.skippedFiles = [];
    this.errors = [];

    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
    });
  }

  async executeCleanup() {
    console.log('üßπ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞...\n');

    try {
      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –≤–µ—Ç–∫—É
      await this.createBackupBranch();

      // –§–∞–∑–∞ 1: –£–¥–∞–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ–∞–π–ª—ã
      await this.phase1_SafeFiles();

      // –§–∞–∑–∞ 2: –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è .js —Ñ–∞–π–ª—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º .ts)
      await this.phase2_DuplicateJS();

      // –§–∞–∑–∞ 3: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      await this.phase3_InteractiveReview();

      // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
      this.generateFinalReport();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—á–∏—Å—Ç–∫–∏:', error.message);
    } finally {
      this.rl.close();
    }
  }

  async createBackupBranch() {
    console.log('üîí –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –≤–µ—Ç–∫–∏...');

    try {
      const currentBranch = execSync('git branch --show-current', {
        cwd: this.projectRoot,
        encoding: 'utf8',
      }).trim();

      const backupBranchName = `backup-before-cleanup-${new Date().getTime()}`;

      execSync(`git checkout -b ${backupBranchName}`, { cwd: this.projectRoot });
      execSync(`git checkout ${currentBranch}`, { cwd: this.projectRoot });

      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –≤–µ—Ç–∫–∞: ${backupBranchName}\n`);
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –≤–µ—Ç–∫—É (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)\n');
    }
  }

  async phase1_SafeFiles() {
    console.log('üü¢ –§–ê–ó–ê 1: –£–¥–∞–ª–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤');
    console.log('=======================================\n');

    const safeFiles = [
      // –°—Ç–∞—Ä—ã–µ –æ—Ç—á–µ—Ç—ã
      'DOCKER-IMPLEMENTATION-COMPLETE.md',
      'EAP-IMPLEMENTATION-COMPLETE.md',
      'ENVIRONMENT_SETUP_COMPLETE.md',
      'INFRASTRUCTURE_COMPLETE.md',
      'JEST-TESTING-FINAL-STATUS.md',
      'IMPLEMENTATION-V3-COMPLETE.md',

      // –§–∞–∑–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã
      'PHASE-1-COMPLETE.md',
      'PHASE-1.1-COMPLETION-REPORT.md',
      'PHASE-1.1-JEST-COMPLETION-REPORT.md',
      'PHASE-1.1-SUMMARY.md',
      'PHASE-2-COMPLETION-REPORT.md',
      'PHASE-2-PROGRESS.md',
      'PHASE-2-STAGE-1-COMPLETE.md',
      'PHASE-2-STAGE-1-SUCCESS-REPORT.md',
      'PHASE-2.1-COMPLETION-REPORT-CLEAN.md',
      'PHASE-2.1-COMPLETION-REPORT.md',
      'PHASE-2.2-COMPLETION-REPORT.md',
      'PHASE-3-COMPLETION-REPORT.md',
      'PHASE-4-COMPLETION-REPORT.md',
      'PHASE-4-SUCCESS.md',
      'PHASE-4.2-COMPLETE-FINAL.md',
      'PHASE-4.2-COMPLETION-REPORT.md',
      'PHASE-4.2-FINAL-TEST-REPORT.md',
      'PHASE-4.2-SUCCESS-REPORT.md',
      'PHASE-5-TECHNICAL-PLAN.md',
      'PHASE-5.1.1-COMPLETION-REPORT.md',
      'PHASE-5.1.1-PROGRESS.md',
      'PHASE-5.2-5.3-TECHNICAL-PLAN.md',
      'PHASE-5.2.1-COMPLETION-REPORT.md',
      'PHASE-5.2.1-PROGRESS.md',
      'PHASE-5.2.2-CRITICAL-ASSESSMENT.md',
      'PHASE-5.2.2-INTEGRATION-PLAN.md',
      'PHASE-5.2.2-TASK-1.1-COMPLETE.md',
      'PHASE-5.2.2-TASK-1.2-COMPLETE.md',
      'PHASE-5.2.2-TASK-1.3-COMPLETE.md',
      'PHASE-5.2.2-TECHNICAL-PLAN.md',
      'PHASE-6-COMPLETION-REPORT.md',

      // –î–µ–º–æ —Ñ–∞–π–ª—ã
      'phase1-demo.cjs',
      'task2-2-runtime-demo.js',

      // –°—Ç–∞—Ä—ã–µ –∞–Ω–∞–ª–∏–∑—ã
      'advanced-analysis-report.md',
      'eap-analysis-latest.json',
      'eap-analysis-report.json',
      'EAP-ANALYZER-FINAL-STATUS-REPORT.md',
      'EAP-ANALYZER-FINAL-STATUS.md',
      'EAP-ANALYZER-FULL-COMPONENT-CATALOG.md',
      'eap-analyzer-real-status.json',
      'eap-analyzer-v5-metrics.json',
      'EAP-ANALYZER-v6-TECHNICAL-PLAN.md',
      'EAP-ANALYZER-–ò–¢–û–ì–û–í–ê–Ø-–û–¶–ï–ù–ö–ê-v5.0.md',
      'EAP-CATEGORIES-STATUS-ANALYSIS.md',
      'EAP-CATEGORIES-SUMMARY.md',
      'EXTENDED-ARCHITECTURE-v3.md',
      'FINAL_STATUS_REPORT.md',
      'GITHUB-ISSUES-TECHNICAL-DEBT.md',
      'optimization-status-final.json',
      'optimization-status.json',

      // –ë–µ–∫–∞–ø—ã
      'index.html.backup',
    ];

    console.log(`–ë—É–¥—É —É–¥–∞–ª—è—Ç—å ${safeFiles.length} —Ñ–∞–π–ª–æ–≤...\n`);

    for (const file of safeFiles) {
      await this.deleteFile(file, 'Safe file cleanup');
    }

    console.log(`‚úÖ –§–∞–∑–∞ 1 –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ ${this.deletedFiles.length} —Ñ–∞–π–ª–æ–≤\n`);
  }

  async phase2_DuplicateJS() {
    console.log('üü° –§–ê–ó–ê 2: –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è .js —Ñ–∞–π–ª–æ–≤');
    console.log('==========================================\n');

    const duplicatePairs = [
      ['task2-2-runtime-demo.js', 'task2-2-runtime-demo.ts'],
      [
        'eap-analyzer/src/checkers/testing/UnifiedTestingAnalyzer.js',
        'eap-analyzer/src/checkers/testing/UnifiedTestingAnalyzer.ts',
      ],
      [
        'eap-analyzer/src/utils/adaptive-thresholds.js',
        'eap-analyzer/src/utils/adaptive-thresholds.ts',
      ],
      ['eap-analyzer/src/utils/error-handler.js', 'eap-analyzer/src/utils/error-handler.ts'],
      ['eap-analyzer/src/utils/file-utils.js', 'eap-analyzer/src/utils/file-utils.ts'],
      ['src/constants/test-ids.js', 'src/constants/test-ids.ts'],
      ['test-security-checker.js', 'test-security-checker.ts'],
      ['tests/fixtures/factories.js', 'tests/fixtures/factories.ts'],
    ];

    console.log('–£–¥–∞–ª—è—é .js –≤–µ—Ä—Å–∏–∏ (–æ—Å—Ç–∞–≤–ª—è—é .ts –≤–µ—Ä—Å–∏–∏)...\n');

    for (const [jsFile, tsFile] of duplicatePairs) {
      const jsPath = path.join(this.projectRoot, jsFile);
      const tsPath = path.join(this.projectRoot, tsFile);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ .ts —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (fs.existsSync(tsPath)) {
        await this.deleteFile(jsFile, `Duplicate of ${tsFile}`);
      } else {
        console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é ${jsFile} - .ts –≤–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        this.skippedFiles.push({
          file: jsFile,
          reason: '.ts version not found',
        });
      }
    }

    console.log(`‚úÖ –§–∞–∑–∞ 2 –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤: ${duplicatePairs.length}\n`);
  }

  async phase3_InteractiveReview() {
    console.log('üîç –§–ê–ó–ê 3: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤');
    console.log('=====================================================\n');

    const reviewFiles = [
      'vite.config.js', // –ï—Å—Ç—å .ts –≤–µ—Ä—Å–∏—è
      'vitest.config.js', // –ï—Å—Ç—å .ts –≤–µ—Ä—Å–∏—è
      'commitlint.config.cjs', // –î—É–±–ª–∏—Ä—É–µ—Ç—Å—è —Å .js
      'commitlint.config.js',
    ];

    for (const file of reviewFiles) {
      const shouldDelete = await this.askUserConfirmation(
        `–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª "${file}"?`,
        '–≠—Ç–æ—Ç —Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–º—Å—è –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–º'
      );

      if (shouldDelete) {
        await this.deleteFile(file, 'User confirmed deletion');
      } else {
        this.skippedFiles.push({
          file,
          reason: 'User chose to keep',
        });
      }
    }

    console.log(`‚úÖ –§–∞–∑–∞ 3 –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n`);
  }

  async deleteFile(relativePath, reason) {
    const fullPath = path.join(this.projectRoot, relativePath);

    try {
      if (fs.existsSync(fullPath)) {
        fs.unlinkSync(fullPath);
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω: ${relativePath}`);
        this.deletedFiles.push({
          file: relativePath,
          reason: reason,
          timestamp: new Date().toISOString(),
        });
      } else {
        console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${relativePath}`);
        this.skippedFiles.push({
          file: relativePath,
          reason: 'File not found',
        });
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${relativePath}:`, error.message);
      this.errors.push({
        file: relativePath,
        error: error.message,
        timestamp: new Date().toISOString(),
      });
    }
  }

  async askUserConfirmation(question, details) {
    console.log(`\n${details}`);
    return new Promise(resolve => {
      this.rl.question(`${question} (y/N): `, answer => {
        resolve(answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes');
      });
    });
  }

  generateFinalReport() {
    console.log('\nüìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢');
    console.log('==================\n');

    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${this.deletedFiles.length}`);
    console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${this.skippedFiles.length}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${this.errors.length}\n`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    const reportPath = path.join(this.projectRoot, 'cleanup-execution-report.md');

    let report = `# üßπ –û—Ç—á–µ—Ç –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞

–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${new Date().toLocaleString('ru-RU')}

## üìä –°–≤–æ–¥–∫–∞

- **–£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤**: ${this.deletedFiles.length}
- **–ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤**: ${this.skippedFiles.length}
- **–û—à–∏–±–æ–∫**: ${this.errors.length}

## ‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã

`;

    for (const item of this.deletedFiles) {
      report += `- \`${item.file}\` - ${item.reason}\n`;
    }

    if (this.skippedFiles.length > 0) {
      report += `\n## ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã

`;
      for (const item of this.skippedFiles) {
        report += `- \`${item.file}\` - ${item.reason}\n`;
      }
    }

    if (this.errors.length > 0) {
      report += `\n## ‚ùå –û—à–∏–±–∫–∏

`;
      for (const item of this.errors) {
        report += `- \`${item.file}\` - ${item.error}\n`;
      }
    }

    fs.writeFileSync(reportPath, report);

    console.log(`üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
    console.log('\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –ø—Ä–æ–µ–∫—Ç–∞');
    console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã');
    console.log('3. –°–¥–µ–ª–∞–π—Ç–µ –∫–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π');
    console.log('4. –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –≤–µ—Ç–∫—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
  }
}

// –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏
const projectRoot = process.argv[2] || process.cwd();
console.log(`üéØ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: ${projectRoot}\n`);

const executor = new FileCleanupExecutor(projectRoot);
executor.executeCleanup().catch(console.error);
