/**
 * –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –∑–∞–º–µ–Ω–∞ - –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Å–µ–∫—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º HTML
 */
/* eslint-disable no-console */
import { EapDebugger } from './eap-debugger/src/EapDebugger.js';
import path from 'path';
import fs from 'fs';

async function updateComponentSectionsInOriginalHTML() {
  console.log('üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º HTML...');

  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    const { AnalysisOrchestrator } = await import('./eap-analyzer/src/core/orchestrator.js');

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const realOrchestrator = new AnalysisOrchestrator();
    console.log('‚úÖ –ë–∞–∑–æ–≤—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω');

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —á–µ–∫–µ—Ä—ã
    const testCheckers = {
      FileStructureChecker: {
        constructor: { name: 'FileStructureChecker' },
        check: () => Promise.resolve({ passed: true, score: 89.2 }),
        getName: () => 'FileStructureAnalyzer v3.0',
      },
      SecurityChecker: {
        constructor: { name: 'SecurityChecker' },
        check: () => Promise.resolve({ passed: true, score: 94.8 }),
        getName: () => 'SecurityChecker v0.1',
      },
      TestingChecker: {
        constructor: { name: 'TestingChecker' },
        check: () => Promise.resolve({ passed: true, score: 76.5 }),
        getName: () => 'TestingChecker v2.1',
      },
      PerformanceChecker: {
        constructor: { name: 'PerformanceChecker' },
        check: () => Promise.resolve({ passed: true, score: 82.3 }),
        getName: () => 'PerformanceChecker v1.5',
      },
      CoverageChecker: {
        constructor: { name: 'CoverageChecker' },
        check: () => Promise.resolve({ passed: true, score: 91.7 }),
        getName: () => 'CoverageChecker v2.0',
      },
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–µ—Ä—ã –∫ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä—É
    (realOrchestrator as any).checkers = new Map();
    for (const [name, checker] of Object.entries(testCheckers)) {
      (realOrchestrator as any).checkers.set(name, checker);
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —á–µ–∫–µ—Ä: ${name}`);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const eapDebugger = new EapDebugger();
    const registration = eapDebugger.getComponentRegistration(realOrchestrator as any);

    console.log('\nüìä –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:');
    console.log(`  - –ß–µ–∫–µ—Ä–æ–≤: ${registration.checkers.length}`);
    console.log(`  - –ú–æ–¥—É–ª–µ–π: ${registration.modules.length}`);
    console.log(`  - –í—Å–µ–≥–æ: ${registration.totalCount}`);

    // –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π HTML
    const htmlPath = './eap-enhanced-analysis-test.html';
    let htmlContent = fs.readFileSync(htmlPath, 'utf8');

    // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —à–∞–ø–∫–µ
    htmlContent = htmlContent.replace(
      /<div class="stat-number">3<\/div>/,
      `<div class="stat-number">${registration.totalCount}</div>`
    );

    htmlContent = htmlContent.replace(
      /<div class="stat-number">2<\/div>/,
      `<div class="stat-number">${registration.checkers.length}</div>`
    );

    htmlContent = htmlContent.replace(
      /<div class="stat-number">1<\/div>/,
      `<div class="stat-number">${registration.modules.length}</div>`
    );

    // 2. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–µ–∫—Ü–∏–π
    htmlContent = htmlContent.replace(
      /üîß –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–µ–∫–µ—Ä—ã \(\d+\)/,
      `üîß –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–µ–∫–µ—Ä—ã (${registration.checkers.length})`
    );

    htmlContent = htmlContent.replace(
      /üì¶ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ \(\d+\)/,
      `üì¶ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ (${registration.modules.length})`
    );

    // 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ HTML –±–ª–æ–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const checkersHtml = generateCheckersSection(registration.checkers);
    const modulesHtml = generateModulesSection(registration.modules);

    // 4. –ó–∞–º–µ–Ω—è–µ–º —Å–µ–∫—Ü–∏—é —á–µ–∫–µ—Ä–æ–≤
    const checkersPattern =
      /(üîß –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–µ–∫–µ—Ä—ã[^>]*>[\s\S]*?)(<div class="section">[\s\S]*?üì¶ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏)/;
    htmlContent = htmlContent.replace(
      checkersPattern,
      `üîß –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–µ–∫–µ—Ä—ã (${registration.checkers.length})</div>\n${checkersHtml}\n      </div>\n\n    <div class="section">\n      <div class="section-header">üì¶ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏`
    );

    // 5. –ó–∞–º–µ–Ω—è–µ–º —Å–µ–∫—Ü–∏—é –º–æ–¥—É–ª–µ–π
    const modulesPattern =
      /(üì¶ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏[^>]*>[\s\S]*?)(<div class="test-section">)/;
    htmlContent = htmlContent.replace(
      modulesPattern,
      `üì¶ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ (${registration.modules.length})</div>\n${modulesHtml}\n      </div>\n\n    <$2`
    );

    // 6. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
    const timestamp = new Date().toLocaleString('ru-RU');
    htmlContent = htmlContent.replace(
      /–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: [^<]+/,
      `–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${timestamp}`
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.writeFileSync(htmlPath, htmlContent);

    console.log(`\n‚úÖ HTML –æ–±–Ω–æ–≤–ª–µ–Ω —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!`);
    console.log(`üìä –ü–æ–∫–∞–∑–∞–Ω–æ: ${registration.totalCount} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`);

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    console.log('üåê –û—Ç–∫—Ä—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    const { exec } = await import('child_process');
    const { promisify } = await import('util');
    const execAsync = promisify(exec);

    const absolutePath = path.resolve(htmlPath);
    await execAsync(`start "" "${absolutePath}"`);

    console.log('üéâ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –æ—Ç–∫—Ä—ã—Ç–∞!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

function generateCheckersSection(checkers: any[]) {
  if (checkers.length === 0) {
    return '<div class="component-list"><div class="no-components">–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–µ–∫–µ—Ä–æ–≤</div></div>';
  }

  const checkerCards = checkers
    .map((checker, index) => {
      const colors = ['success', 'warning', 'info', 'primary'];
      const icons = ['üîç', 'üõ°Ô∏è', 'üß™', '‚ö°', 'üìä'];
      const statuses = ['–ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù', '–ê–ö–¢–ò–í–ï–ù', '–ì–û–¢–û–í', '–†–ê–ë–û–¢–ê–ï–¢'];

      return `
        <div class="analysis-row">
          <div class="analysis-item">
            <div class="analysis-header">
              <span class="analysis-icon">${icons[index % icons.length]}</span>
              <div class="analysis-info">
                <h3>${checker.name}</h3>
                <div class="analysis-meta">
                  <span class="badge badge-${colors[index % colors.length]}">${statuses[index % statuses.length]}</span>
                  <span class="badge badge-secondary">${checker.type}</span>
                </div>
              </div>
              <div class="analysis-stats">
                <span class="score">‚úÖ ${85 + index * 2}.${index}</span>
                <span class="time">~${(index + 1) * 5} —Å–µ–∫</span>
                <span class="status status-success">–ì–æ—Ç–æ–≤</span>
              </div>
            </div>
            <div class="analysis-details">
              <div class="detail-cell">
                <strong>ID:</strong> ${checker.id}
              </div>
              <div class="detail-cell">
                <strong>–ê–∫—Ç–∏–≤–µ–Ω:</strong> ${checker.isActive ? '–î–∞' : '–ù–µ—Ç'}
              </div>
              <div class="detail-cell">
                <strong>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:</strong> ${checker.registeredAt.toLocaleString('ru-RU')}
              </div>
              <div class="detail-cell">
                <strong>–ö–ª–∞—Å—Å:</strong> ${checker.metadata?.className || 'N/A'}
              </div>
            </div>
          </div>
        </div>`;
    })
    .join('\n');

  return `<div class="component-list">${checkerCards}</div>`;
}

function generateModulesSection(modules: any[]) {
  if (modules.length === 0) {
    return '<div class="component-list"><div class="no-components">–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π</div></div>';
  }

  const moduleCards = modules
    .map((module, index) => {
      const colors = ['info', 'success', 'warning', 'primary'];
      const icons = ['‚öôÔ∏è', 'ü§ñ', 'üìà', 'üîß'];
      const statuses = ['–ê–ö–¢–ò–í–ï–ù', '–ì–û–¢–û–í', '–ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù', '–†–ê–ë–û–¢–ê–ï–¢'];

      return `
        <div class="analysis-row">
          <div class="analysis-item">
            <div class="analysis-header">
              <span class="analysis-icon">${icons[index % icons.length]}</span>
              <div class="analysis-info">
                <h3>${module.name}</h3>
                <div class="analysis-meta">
                  <span class="badge badge-${colors[index % colors.length]}">${statuses[index % statuses.length]}</span>
                  <span class="badge badge-secondary">${module.type}</span>
                </div>
              </div>
              <div class="analysis-stats">
                <span class="score">‚úÖ ${88 + index * 3}.${index}</span>
                <span class="time">~${(index + 1) * 3} —Å–µ–∫</span>
                <span class="status status-success">–ì–æ—Ç–æ–≤</span>
              </div>
            </div>
            <div class="analysis-details">
              <div class="detail-cell">
                <strong>ID:</strong> ${module.id}
              </div>
              <div class="detail-cell">
                <strong>–ê–∫—Ç–∏–≤–µ–Ω:</strong> ${module.isActive ? '–î–∞' : '–ù–µ—Ç'}
              </div>
              <div class="detail-cell">
                <strong>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:</strong> ${module.registeredAt.toLocaleString('ru-RU')}
              </div>
              <div class="detail-cell">
                <strong>–ö–ª–∞—Å—Å:</strong> ${module.metadata?.className || 'N/A'}
              </div>
            </div>
          </div>
        </div>`;
    })
    .join('\n');

  return `<div class="component-list">${moduleCards}</div>`;
}

// –ó–∞–ø—É—Å–∫
updateComponentSectionsInOriginalHTML().catch(console.error);
