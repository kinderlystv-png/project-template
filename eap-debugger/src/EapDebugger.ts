/**
 * EapDebugger - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ EAP –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */

import * as path from 'path';
import { exec } from 'child_process';
import { promisify } from 'util';
import { ComponentRegistry } from './core/ComponentRegistry.js';
import { HtmlGenerator } from './core/HtmlGenerator.js';
import { DebuggerState } from './models/Component.js';

const execAsync = promisify(exec);

// –ü—Ä–æ—Å—Ç–æ–π logger –¥–ª—è debugger'–∞
class Logger {
  static log(message: string): void {
    // eslint-disable-next-line no-console
    console.log(message);
  }

  static error(message: string, error?: unknown): void {
    // eslint-disable-next-line no-console
    console.error(message, error);
  }
}

export class EapDebugger {
  private componentRegistry: ComponentRegistry;
  private htmlGenerator: HtmlGenerator;
  private state: DebuggerState;
  private refreshInterval?: NodeJS.Timeout;

  constructor() {
    this.componentRegistry = new ComponentRegistry();
    this.htmlGenerator = new HtmlGenerator();
    this.state = {
      components: {
        checkers: [],
        modules: [],
        totalCount: 0,
        lastUpdated: new Date(),
      },
      autoRefresh: true,
      refreshInterval: 5000, // 5 —Å–µ–∫—É–Ω–¥
    };
  }

  /**
   * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç HTML —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  private static async openInBrowser(htmlPath: string): Promise<void> {
    try {
      const absolutePath = path.resolve(htmlPath);
      let command: string;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
      switch (process.platform) {
        case 'win32':
          command = `start "" "${absolutePath}"`;
          break;
        case 'darwin':
          command = `open "${absolutePath}"`;
          break;
        default:
          command = `xdg-open "${absolutePath}"`;
          break;
      }

      await execAsync(command);
      Logger.log(`üåê EAP Debugger: –û—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ - ${absolutePath}`);
    } catch (error) {
      Logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ:', error);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
   * –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ
   */
  public async generateComponentsHtmlWithAutoOpen(
    orchestrator: Record<string, unknown>,
    outputPath?: string,
    openInBrowser = true
  ): Promise<string> {
    const html = await this.generateComponentsHtml(orchestrator, outputPath);

    if (openInBrowser && outputPath) {
      await EapDebugger.openInBrowser(outputPath);
    }

    return html;
  }
  public async generateComponentsHtml(
    orchestrator: Record<string, unknown>,
    outputPath?: string
  ): Promise<string> {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
    const registration = this.componentRegistry.getRegisteredComponents(orchestrator);
    this.state.components = registration;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML
    const html = await this.htmlGenerator.generateHtml(registration);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å
    if (outputPath) {
      await this.htmlGenerator.saveHtml(html, outputPath);
      this.state.htmlPath = outputPath;
      Logger.log(`üîç EAP Debugger: HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${outputPath}`);
    }

    return html;
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ HTML —Ñ–∞–π–ª–∞
   */
  public startAutoRefresh(
    orchestrator: Record<string, unknown>,
    outputPath: string,
    intervalMs?: number
  ): void {
    this.stopAutoRefresh(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª

    const interval = intervalMs || this.state.refreshInterval;

    this.refreshInterval = setInterval(async () => {
      try {
        await this.generateComponentsHtml(orchestrator, outputPath);
        Logger.log(`üîÑ EAP Debugger: Auto-refresh completed at ${new Date().toLocaleTimeString()}`);
      } catch (error) {
        Logger.error('‚ùå EAP Debugger: Auto-refresh error:', error);
      }
    }, interval);

    Logger.log(`üöÄ EAP Debugger: Auto-refresh started (${interval}ms interval)`);
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
   */
  public stopAutoRefresh(): void {
    if (this.refreshInterval) {
      clearInterval(this.refreshInterval);
      this.refreshInterval = undefined;
      Logger.log('‚èπÔ∏è EAP Debugger: Auto-refresh stopped');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
   */
  public getComponentStats() {
    return this.componentRegistry.getComponentStats(this.state.components);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ debugger'–∞
   */
  public getState(): DebuggerState {
    return { ...this.state };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è HTML —Ñ–∞–π–ª–∞
   */
  public static getDefaultHtmlPath(): string {
    return path.resolve(process.cwd(), 'eap-debugger-components.html');
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML
   */
  public static async quickGenerate(
    orchestrator: Record<string, unknown>,
    outputPath?: string,
    openInBrowser = false
  ): Promise<string> {
    const eapDebugger = new EapDebugger();
    const htmlPath = outputPath || EapDebugger.getDefaultHtmlPath();

    const html = await eapDebugger.generateComponentsHtml(orchestrator, htmlPath);

    if (openInBrowser) {
      await EapDebugger.openInBrowser(htmlPath);
    }

    return html;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ
   */
  public static async quickGenerateAndOpen(
    orchestrator: Record<string, unknown>,
    outputPath?: string
  ): Promise<string> {
    return await EapDebugger.quickGenerate(orchestrator, outputPath, true);
  }

  /**
   * –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
   */
  public getComponentRegistration(orchestrator: Record<string, unknown>) {
    return this.componentRegistry.getRegisteredComponents(orchestrator);
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ HTML
   */
  public static async runAnalysisAndShow(
    orchestrator: Record<string, unknown>,
    projectPath: string,
    outputPath?: string
  ): Promise<string> {
    const finalOutputPath = outputPath || './eap-analysis-results.html';

    Logger.log(`üöÄ EAP Debugger: –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞ ${projectPath}...`);

    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
      Logger.log('üìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞...');
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const analysisResult = await (orchestrator as any).analyzeProject(projectPath);

      Logger.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: ${analysisResult.summary.overallScore}/100`);

      // –°–æ–∑–¥–∞–µ–º –¥–µ–±–∞–≥–≥–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
      const eapDebugger = new EapDebugger();

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
      const registration = eapDebugger.componentRegistry.getRegisteredComponents(orchestrator);

      // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
      eapDebugger.enrichWithAnalysisResults(registration, analysisResult);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      eapDebugger.state.components = registration;
      eapDebugger.state.analysisResult = analysisResult;
      eapDebugger.state.projectPath = projectPath;

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
      const html = await eapDebugger.htmlGenerator.generateHtmlWithResults(
        registration,
        analysisResult,
        projectPath
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º
      await eapDebugger.htmlGenerator.saveHtml(html, finalOutputPath);
      await EapDebugger.openInBrowser(finalOutputPath);

      Logger.log(`üîç EAP Debugger: HTML —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${finalOutputPath}`);
      Logger.log('üåê EAP Debugger: –û—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏!');

      return html;
    } catch (error) {
      Logger.error('‚ùå EAP Debugger: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error);
      throw error;
    }
  }

  /**
   * –û–±–æ–≥–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  private enrichWithAnalysisResults(registration: any, analysisResult: any): void {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫ —á–µ–∫–µ—Ä–∞–º
    if (analysisResult.checks) {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      registration.checkers.forEach((checker: any) => {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const result = analysisResult.checks.find((check: any) => check.checker === checker.id);
        if (result) {
          checker.analysisResult = result;
          checker.lastRun = new Date();
          checker.status = result.passed ? 'passed' : 'failed';
        }
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫ –º–æ–¥—É–ª—è–º
    if (analysisResult.modules) {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      registration.modules.forEach((module: any) => {
        const result = analysisResult.modules[module.id];
        if (result) {
          module.analysisResult = result;
          module.lastRun = new Date();
          module.status = 'completed';
        }
      });
    }
  } /**
   * Cleanup –º–µ—Ç–æ–¥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
   */
  public destroy(): void {
    this.stopAutoRefresh();
    Logger.log('üßπ EAP Debugger: Cleanup completed');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–∫–∂–µ Logger –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–Ω–µ –∫–ª–∞—Å—Å–∞
export { Logger };
