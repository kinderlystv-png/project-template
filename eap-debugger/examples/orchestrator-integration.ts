/**
 * –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ EapDebugger —Å —Ä–µ–∞–ª—å–Ω—ã–º AnalysisOrchestrator
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ HTML –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–Ω–∞–ª–∏–∑–∞
 */
/* eslint-disable no-console */
/* eslint-disable @typescript-eslint/no-explicit-any */

import { EapDebugger } from '../src/EapDebugger.js';
import { OrchestratorIntegration } from '../src/integration/OrchestratorIntegration.js';

/**
 * –ü—Ä–∏–º–µ—Ä 1: –ü—Ä—è–º–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
 */
export function addDebuggerToOrchestrator(orchestrator: any, autoOpenBrowser = true) {
  console.log('üîß –î–æ–±–∞–≤–ª—è–µ–º EAP Debugger –∫ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä—É...');

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  const originalRunAnalysis = orchestrator.runAnalysis?.bind(orchestrator);
  const originalRegisterChecker = orchestrator.registerChecker?.bind(orchestrator);
  const originalRegisterModule = orchestrator.registerModule?.bind(orchestrator);

  // –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ HTML
  const debugHtmlPath = './eap-orchestrator-debug.html';

  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
  orchestrator.runAnalysis = async function (...args: any[]) {
    console.log('üöÄ EAP Debugger: –ê–Ω–∞–ª–∏–∑ –Ω–∞—á–∞—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π HTML...');

    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º
      if (autoOpenBrowser) {
        await EapDebugger.quickGenerateAndOpen(this, debugHtmlPath);
      } else {
        await EapDebugger.quickGenerate(this, debugHtmlPath);
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
      const result = originalRunAnalysis ? await originalRunAnalysis(...args) : null;

      // –û–±–Ω–æ–≤–ª—è–µ–º HTML –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
      await EapDebugger.quickGenerate(this, debugHtmlPath);
      console.log('‚úÖ EAP Debugger: HTML –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞');

      return result;
    } catch (error) {
      console.error('‚ùå EAP Debugger: –û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:', error);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ª–∞–¥–∫–∏
      return originalRunAnalysis ? await originalRunAnalysis(...args) : null;
    }
  };

  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ–∫–µ—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è HTML
  if (originalRegisterChecker) {
    orchestrator.registerChecker = async function (name: string, checker: any) {
      const result = originalRegisterChecker(name, checker);

      try {
        await EapDebugger.quickGenerate(this, debugHtmlPath);
        console.log(`üîç EAP Debugger: HTML –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ–∫–µ—Ä–∞ "${name}"`);
      } catch (error) {
        console.warn('‚ö†Ô∏è EAP Debugger: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å HTML –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ–∫–µ—Ä–∞:', error);
      }

      return result;
    };
  }

  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –º–æ–¥—É–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è HTML
  if (originalRegisterModule) {
    orchestrator.registerModule = async function (name: string, module: any) {
      const result = originalRegisterModule(name, module);

      try {
        await EapDebugger.quickGenerate(this, debugHtmlPath);
        console.log(`‚öôÔ∏è EAP Debugger: HTML –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è "${name}"`);
      } catch (error) {
        console.warn('‚ö†Ô∏è EAP Debugger: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å HTML –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è:', error);
      }

      return result;
    };
  }

  console.log(`‚úÖ EAP Debugger –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω! HTML –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤: ${debugHtmlPath}`);
  return debugHtmlPath;
}

/**
 * –ü—Ä–∏–º–µ—Ä 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ö—É–∫–∏ (–±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–ø–æ—Å–æ–±)
 */
export function setupAdvancedIntegration(orchestrator: any, options = {}) {
  const config = {
    autoOpenBrowser: true,
    htmlPath: './eap-advanced-debug.html',
    refreshInterval: 2000,
    ...options,
  };

  console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ EAP Debugger...');

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  const integration = OrchestratorIntegration.getInstance();
  integration.setAutoOpenBrowser(config.autoOpenBrowser);
  integration.setDebugHtmlPath(config.htmlPath);

  const hooks = integration.getHooks();

  // –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Ö—É–∫–∏ –≤ –º–µ—Ç–æ–¥—ã –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const originalRunAnalysis = orchestrator.runAnalysis?.bind(orchestrator);

  orchestrator.runAnalysis = async function (...args: any[]) {
    // –•—É–∫ –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞
    if (hooks.onAnalysisStart) {
      await hooks.onAnalysisStart(this);
    }

    let result = null;
    try {
      result = originalRunAnalysis ? await originalRunAnalysis(...args) : null;
    } finally {
      // –•—É–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
      if (hooks.onAnalysisComplete) {
        await hooks.onAnalysisComplete(this, result);
      }
    }

    return result;
  };

  console.log(`‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞! HTML: ${config.htmlPath}`);
  return integration;
}

/**
 * –ü—Ä–∏–º–µ—Ä 3: –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
 */
export async function generateDebugSnapshot(orchestrator: any, filename?: string) {
  const htmlPath = filename || `./eap-snapshot-${Date.now()}.html`;

  console.log(`üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∏–º–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞...`);

  const html = await EapDebugger.quickGenerateAndOpen(orchestrator, htmlPath);

  console.log(`‚úÖ –°–Ω–∏–º–æ–∫ —Å–æ–∑–¥–∞–Ω: ${htmlPath} (${html.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
  return htmlPath;
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
if (import.meta.url === `file://${process.argv[1]}`) {
  console.log('üìñ –ü—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ EAP Debugger —Å –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:');
  console.log('');
  console.log('1. –ü—Ä—è–º–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:');
  console.log('   addDebuggerToOrchestrator(orchestrator, true);');
  console.log('');
  console.log('2. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:');
  console.log('   setupAdvancedIntegration(orchestrator, { autoOpenBrowser: true });');
  console.log('');
  console.log('3. –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Å–Ω–∏–º–æ–∫:');
  console.log('   generateDebugSnapshot(orchestrator);');
}
