/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è EAP Debugger
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
 */
/* eslint-disable no-console */

import { EapDebugger } from '../src/EapDebugger.js';

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –º–æ–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const realWorldOrchestrator: any = {
  checkers: new Map([
    [
      'SecurityChecker',
      {
        constructor: { name: 'SecurityChecker' },
        check: () => Promise.resolve({ passed: true, report: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å OK' }),
        getName() {
          return 'Security Analysis Checker';
        },
      },
    ],
    [
      'PerformanceChecker',
      {
        constructor: { name: 'PerformanceChecker' },
        check: () =>
          Promise.resolve({ passed: false, report: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏' }),
        getName() {
          return 'Performance Optimization Checker';
        },
      },
    ],
  ]),
  modules: new Map([
    [
      'CodeAnalyzer',
      {
        constructor: { name: 'CodeAnalyzer' },
        analyze: () => Promise.resolve({ score: 78 }),
        getName() {
          return 'Advanced Code Analyzer';
        },
      },
    ],
  ]),
};

const integrationTest = async (): Promise<void> => {
  console.log('üöÄ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç EAP Debugger...\n');

  try {
    console.log('üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞ –¥–ª—è production...');

    // –°–æ–∑–¥–∞–µ–º HTML –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    const outputPath = './eap-components-debug.html';
    const html = await EapDebugger.quickGenerate(realWorldOrchestrator, outputPath);

    console.log(`‚úÖ HTML –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ${outputPath}`);
    console.log(`üìä –†–∞–∑–º–µ—Ä –æ—Ç—á–µ—Ç–∞: ${html.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    console.log('üåê –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª eap-components-debug.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞');

    console.log('\nüéØ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ:', error);
    throw error;
  }
};

// –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
integrationTest().catch(console.error);
