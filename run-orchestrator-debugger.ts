/**
 * –ó–∞–ø—É—Å–∫ EAP Debugger –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 */
/* eslint-disable no-console */
/* eslint-disable @typescript-eslint/no-explicit-any */

import { EapDebugger } from './eap-debugger/src/EapDebugger.js';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑ eap-analyzer
async function runOrchestratorDebugger() {
  console.log('üîç –ó–∞–ø—É—Å–∫ EAP Debugger –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞...\n');

  try {
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const { AnalysisOrchestrator } = await import('./eap-analyzer/src/core/orchestrator.js');

    console.log('‚úÖ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const orchestrator = new AnalysisOrchestrator();
    console.log('‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞–Ω');

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
    console.log('\nüìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:');
    console.log(`  - –ß–µ–∫–µ—Ä–æ–≤: ${orchestrator.checkers?.size || 'N/A'}`);
    console.log(`  - –ú–æ–¥—É–ª–µ–π: ${orchestrator.modules?.size || 'N/A'}`);

    // –ï—Å–ª–∏ checkers/modules –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞–ø—Ä—è–º—É—é, –ø–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
    if (!orchestrator.checkers) {
      console.log('  - –î–µ—Ç–∞–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (–ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø–æ–ª—è)');
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML —Å –∞–≤—Ç–æ–æ—Ç–∫—Ä—ã—Ç–∏–µ–º –±—Ä–∞—É–∑–µ—Ä–∞
    console.log('\nüåê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ HTML —Å –∞–≤—Ç–æ–æ—Ç–∫—Ä—ã—Ç–∏–µ–º –±—Ä–∞—É–∑–µ—Ä–∞...');
    const html = await EapDebugger.quickGenerateAndOpen(
      orchestrator,
      './eap-orchestrator-current-state.html'
    );

    console.log(`‚úÖ HTML —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${html.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    console.log('üìÅ –§–∞–π–ª: eap-orchestrator-current-state.html');
    console.log('üåê –ë—Ä–∞—É–∑–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã–ª –æ—Ç–∫—Ä—ã—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!');

    // –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º —Å–Ω–∏–º–æ–∫ –±–µ–∑ –∞–≤—Ç–æ–æ—Ç–∫—Ä—ã—Ç–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    console.log('\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–Ω–∏–º–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...');
    const stats = await createDetailedSnapshot(orchestrator);

    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(JSON.stringify(stats, null, 2));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–µ–±–∞–≥–≥–µ—Ä–∞:', error);

    // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    console.log('\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
    await createDemoOrchestrator();
  }
}

// –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–Ω–∏–º–æ–∫
async function createDetailedSnapshot(orchestrator: any) {
  const eapDebugger = new EapDebugger();

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML
  await eapDebugger.generateComponentsHtml(orchestrator, './eap-detailed-snapshot.html');

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const stats = eapDebugger.getComponentStats();
  const state = eapDebugger.getState();
  return {
    stats,
    componentCount: state.components.totalCount,
    lastUpdated: state.components.lastUpdated,
    htmlFiles: ['./eap-orchestrator-current-state.html', './eap-detailed-snapshot.html'],
  };
}

// –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
async function createDemoOrchestrator() {
  console.log('üé≠ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');

  const demoOrchestrator = {
    checkers: new Map([
      [
        'StructureChecker',
        {
          constructor: { name: 'StructureChecker' },
          check: () => Promise.resolve({ passed: true, report: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞' }),
          getName() {
            return 'File Structure Checker';
          },
        },
      ],
      [
        'SecurityChecker',
        {
          constructor: { name: 'SecurityChecker' },
          check: () => Promise.resolve({ passed: true, report: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å OK' }),
          getName() {
            return 'Security Analysis Checker';
          },
        },
      ],
      [
        'TestChecker',
        {
          constructor: { name: 'TestChecker' },
          check: () => Promise.resolve({ passed: false, report: '–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤' }),
          getName() {
            return 'Test Coverage Checker';
          },
        },
      ],
    ]),
    modules: new Map([
      [
        'AIAnalyzer',
        {
          constructor: { name: 'AIAnalyzer' },
          analyze: () => Promise.resolve({ score: 85, insights: ['–•–æ—Ä–æ—à–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞'] }),
          getName() {
            return 'AI-Powered Code Analyzer';
          },
        },
      ],
      [
        'TechnicalDebtAnalyzer',
        {
          constructor: { name: 'SimpleTechnicalDebtAnalyzer' },
          analyze: () => Promise.resolve({ score: 72, debt: 15000 }),
          getName() {
            return 'Technical Debt Analyzer';
          },
        },
      ],
    ]),
  };

  console.log('üìä –î–µ–º–æ-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω:');
  console.log(`  - –ß–µ–∫–µ—Ä–æ–≤: ${demoOrchestrator.checkers.size}`);
  console.log(`  - –ú–æ–¥—É–ª–µ–π: ${demoOrchestrator.modules.size}`);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–ª—è –¥–µ–º–æ
  console.log('\nüåê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è –¥–µ–º–æ-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
  const html = await EapDebugger.quickGenerateAndOpen(
    demoOrchestrator,
    './eap-demo-orchestrator-state.html'
  );

  console.log(`‚úÖ –î–µ–º–æ HTML —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${html.length} —Å–∏–º–≤–æ–ª–æ–≤`);
  console.log('üìÅ –§–∞–π–ª: eap-demo-orchestrator-state.html');
  console.log('üåê –ë—Ä–∞—É–∑–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã–ª –æ—Ç–∫—Ä—ã—Ç—å—Å—è —Å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏!');
}

// –ó–∞–ø—É—Å–∫
console.log('üöÄ –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥—á–∏–∫–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞...\n');
runOrchestratorDebugger().catch(console.error);
