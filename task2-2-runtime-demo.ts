#!/usr/bin/env node

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Task 2.2: RuntimeMetricsAnalyzer + –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å runtime performance –∞–Ω–∞–ª–∏–∑–∞
 */

import { createPerformanceChecker } from './eap-analyzer/src/checkers/performance/index.js';
import { RuntimeMetricsAnalyzer } from './eap-analyzer/src/checkers/performance/RuntimeMetricsAnalyzer.js';
import * as path from 'path';

async function testRuntimeMetricsAnalyzer(): Promise<void> {
  // eslint-disable-next-line no-console
  console.log('üîç TASK 2.2: Testing RuntimeMetricsAnalyzer Integration');
  // eslint-disable-next-line no-console
  console.log('================================================');

  const projectPath = process.cwd();
  // eslint-disable-next-line no-console
  console.log(`üìÅ Analyzing project: ${projectPath}`);

  try {
    // 1. –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RuntimeMetricsAnalyzer
    // eslint-disable-next-line no-console
    console.log('\nüìä 1. Direct RuntimeMetricsAnalyzer Test:');
    const runtimeAnalyzer = new RuntimeMetricsAnalyzer();

    const startTime = Date.now();
    const result = await runtimeAnalyzer.analyze(projectPath);
    const analysisTime = Date.now() - startTime;

    // eslint-disable-next-line no-console
    console.log(`‚úÖ Analysis completed in ${analysisTime}ms`);
    // eslint-disable-next-line no-console
    console.log(`üìà Performance Score: ${result.score}/100`);
    // eslint-disable-next-line no-console
    console.log(`üéØ Issues Found: ${result.issues.length}`);
    // eslint-disable-next-line no-console
    console.log(`üí° Recommendations: ${result.recommendations.length}`);

    // –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ Core Web Vitals
    if (result.metrics.coreWebVitals) {
      const cwv = result.metrics.coreWebVitals as Record<string, unknown>;
      // eslint-disable-next-line no-console
      console.log('\nüåê Core Web Vitals Analysis:');
      // eslint-disable-next-line no-console
      console.log(`   LCP Factors: ${JSON.stringify(cwv.lcpFactors, null, 2)}`);
      // eslint-disable-next-line no-console
      console.log(`   FID Factors: ${JSON.stringify(cwv.fidFactors, null, 2)}`);
      // eslint-disable-next-line no-console
      console.log(`   CLS Factors: ${JSON.stringify(cwv.clsFactors, null, 2)}`);
    }

    // –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ JavaScript Performance
    if (result.metrics.jsPerformance) {
      const jsp = result.metrics.jsPerformance as Record<string, unknown>;
      // eslint-disable-next-line no-console
      console.log('\n‚ö° JavaScript Performance:');
      // eslint-disable-next-line no-console
      console.log(`   Total JS Files: ${jsp.totalJSFiles}`);
      // eslint-disable-next-line no-console
      console.log(`   Complex Functions: ${jsp.complexFunctions}`);
      // eslint-disable-next-line no-console
      console.log(`   Large Files: ${jsp.largeFiles}`);
      // eslint-disable-next-line no-console
      console.log(`   Async/Await Usage: ${jsp.asyncAwaitUsage}`);
      // eslint-disable-next-line no-console
      console.log(`   Promise Usage: ${jsp.promiseUsage}`);
    }

    // –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ DOM Operations
    if (result.metrics.domOperations) {
      const dom = result.metrics.domOperations as Record<string, unknown>;
      // eslint-disable-next-line no-console
      console.log('\nüèóÔ∏è  DOM Operations Analysis:');
      // eslint-disable-next-line no-console
      console.log(`   Total DOM Queries: ${dom.totalDOMQueries}`);
      // eslint-disable-next-line no-console
      console.log(`   DOM Modifications: ${dom.domModifications}`);
      // eslint-disable-next-line no-console
      console.log(`   Event Listeners: ${dom.eventListeners}`);
      // eslint-disable-next-line no-console
      console.log(`   Inefficient Queries: ${dom.inefficientQueries}`);
    }

    // –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ Memory Patterns
    if (result.metrics.memoryPatterns) {
      const mem = result.metrics.memoryPatterns as Record<string, unknown>;
      // eslint-disable-next-line no-console
      console.log('\nüß† Memory Patterns:');
      // eslint-disable-next-line no-console
      console.log(`   Memory Leak Risks: ${mem.memoryLeakRisks}`);
      // eslint-disable-next-line no-console
      console.log(`   Large Data Structures: ${mem.largeDataStructures}`);
      // eslint-disable-next-line no-console
      console.log(`   Inefficient Loops: ${mem.inefficientLoops}`);
    }

    // Issues and Recommendations
    if (result.issues.length > 0) {
      // eslint-disable-next-line no-console
      console.log('\n‚ö†Ô∏è  Issues Found:');
      result.issues.forEach((issue, index) => {
        // eslint-disable-next-line no-console
        console.log(`   ${index + 1}. [${issue.severity.toUpperCase()}] ${issue.message}`);
      });
    }

    if (result.recommendations.length > 0) {
      // eslint-disable-next-line no-console
      console.log('\nüí° Recommendations:');
      result.recommendations.forEach((rec, index) => {
        // eslint-disable-next-line no-console
        console.log(`   ${index + 1}. ${rec}`);
      });
    }

    // 2. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å PerformanceChecker
    // eslint-disable-next-line no-console
    console.log('\nüìä 2. Integrated PerformanceChecker Test:');
    const checker = createPerformanceChecker({
      enableRuntimeAnalysis: true,
      enableBundleAnalysis: true,
      enableDependencyAnalysis: true,
    });

    // eslint-disable-next-line no-console
    console.log(`üîß Registered analyzers: ${checker.getAnalyzers().length}`);
    checker.getAnalyzers().forEach((analyzer, index) => {
      // eslint-disable-next-line no-console
      console.log(`   ${index + 1}. ${analyzer.name} (${analyzer.category})`);
    });

    // –°–æ–∑–¥–∞–µ–º mock project –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const mockProject = {
      path: projectPath,
      name: 'runtime-metrics-test',
      getFileList: async () => [],
      getFileStats: async () => ({
        size: 0,
        isFile: false,
        isDirectory: true,
        created: new Date(),
        modified: new Date(),
      }),
      readFile: async () => '',
      hasFile: async () => false,
      exists: async () => true,
      resolvePath: (relativePath: string) => path.join(projectPath, relativePath),
    };

    const integratedResults = await checker.check(mockProject);

    // eslint-disable-next-line no-console
    console.log('\nüìã Integrated Analysis Results:');
    integratedResults.forEach((checkResult, index) => {
      // eslint-disable-next-line no-console
      console.log(
        `   ${index + 1}. ${checkResult.name}: ${checkResult.passed ? '‚úÖ' : '‚ùå'} (${checkResult.score}/${checkResult.maxScore})`
      );
      if (checkResult.message) {
        // eslint-disable-next-line no-console
        console.log(`      ${checkResult.message}`);
      }
    });

    // 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å Task 2.1 (BundleSizeAnalyzer)
    // eslint-disable-next-line no-console
    console.log('\nüìä 3. Task 2.1 vs Task 2.2 Comparison:');
    const bundleResults = integratedResults.filter(
      r => r.name.includes('Bundle') || r.name.includes('bundle')
    );
    const runtimeResults = integratedResults.filter(
      r => r.name.includes('Runtime') || r.name.includes('runtime')
    );

    // eslint-disable-next-line no-console
    console.log(`   Bundle Analysis (Task 2.1): ${bundleResults.length} checks`);
    // eslint-disable-next-line no-console
    console.log(`   Runtime Analysis (Task 2.2): ${runtimeResults.length} checks`);

    // –û–±—â–∏–π performance score
    const overviewResult = integratedResults.find(r => r.id === 'performance-overview');
    if (overviewResult) {
      // eslint-disable-next-line no-console
      console.log(`\nüéØ Overall Performance Score: ${overviewResult.score}/100`);
      // eslint-disable-next-line no-console
      console.log(`   Status: ${overviewResult.passed ? '‚úÖ PASSED' : '‚ùå NEEDS IMPROVEMENT'}`);
    }

    // eslint-disable-next-line no-console
    console.log('\n‚úÖ Task 2.2 Integration Complete!');
    // eslint-disable-next-line no-console
    console.log(
      'üéâ RuntimeMetricsAnalyzer successfully integrated with modular PerformanceChecker'
    );
  } catch (error) {
    // eslint-disable-next-line no-console
    console.error('‚ùå Test failed:', error);
    process.exit(1);
  }
}

async function demonstrateRuntimeFeatures(): Promise<void> {
  // eslint-disable-next-line no-console
  console.log('\nüé® Demonstrating RuntimeMetricsAnalyzer Features:');
  // eslint-disable-next-line no-console
  console.log('================================================');

  const analyzer = new RuntimeMetricsAnalyzer();

  // eslint-disable-next-line no-console
  console.log('üîß Analyzer Configuration:');
  // eslint-disable-next-line no-console
  console.log(`   Name: ${analyzer.name}`);
  // eslint-disable-next-line no-console
  console.log(`   Category: ${analyzer.category}`);

  // eslint-disable-next-line no-console
  console.log('\nüéØ Core Web Vitals Analysis:');
  // eslint-disable-next-line no-console
  console.log('   ‚úì LCP (Largest Contentful Paint) - –∞–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
  // eslint-disable-next-line no-console
  console.log('   ‚úì FID (First Input Delay) - –∞–Ω–∞–ª–∏–∑ —Ç—è–∂–µ–ª—ã—Ö JS –±–ª–æ–∫–æ–≤');
  // eslint-disable-next-line no-console
  console.log('   ‚úì CLS (Cumulative Layout Shift) - –∞–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');

  // eslint-disable-next-line no-console
  console.log('\n‚ö° JavaScript Performance Analysis:');
  // eslint-disable-next-line no-console
  console.log('   ‚úì –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å (cyclomatic complexity)');
  // eslint-disable-next-line no-console
  console.log('   ‚úì –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è');
  // eslint-disable-next-line no-console
  console.log('   ‚úì Async/await vs Promise patterns');
  // eslint-disable-next-line no-console
  console.log('   ‚úì –ë–ª–æ–∫–∏—Ä—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏');

  // eslint-disable-next-line no-console
  console.log('\nüèóÔ∏è  DOM Operations Analysis:');
  // eslint-disable-next-line no-console
  console.log('   ‚úì querySelector usage patterns');
  // eslint-disable-next-line no-console
  console.log('   ‚úì DOM modification efficiency');
  // eslint-disable-next-line no-console
  console.log('   ‚úì Event listener management');
  // eslint-disable-next-line no-console
  console.log('   ‚úì Layout thrashing detection');

  // eslint-disable-next-line no-console
  console.log('\nüß† Memory Pattern Analysis:');
  // eslint-disable-next-line no-console
  console.log('   ‚úì Memory leak risk detection');
  // eslint-disable-next-line no-console
  console.log('   ‚úì Large data structure analysis');
  // eslint-disable-next-line no-console
  console.log('   ‚úì Inefficient loop patterns');
  // eslint-disable-next-line no-console
  console.log('   ‚úì Event listener cleanup');

  // eslint-disable-next-line no-console
  console.log('\nüé≠ Framework-Specific Optimizations:');
  // eslint-disable-next-line no-console
  console.log('   ‚úì React: useMemo, useCallback, keys');
  // eslint-disable-next-line no-console
  console.log('   ‚úì Vue: Composition API recommendations');
  // eslint-disable-next-line no-console
  console.log('   ‚úì Svelte: Built-in optimizations');
  // eslint-disable-next-line no-console
  console.log('   ‚úì Angular: Change detection strategies');
}

// Main execution
if (require.main === module) {
  (async () => {
    await demonstrateRuntimeFeatures();
    await testRuntimeMetricsAnalyzer();
  })();
}

export { testRuntimeMetricsAnalyzer, demonstrateRuntimeFeatures };
