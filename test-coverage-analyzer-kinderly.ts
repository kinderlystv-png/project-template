#!/usr/bin/env node
/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CoverageAnalyzer –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ kinderly-events
 */

import { CoverageAnalyzer } from './eap-analyzer/src/checkers/testing/checkers/CoverageAnalyzer';
import { Project } from './eap-analyzer/src/types/Project';

async function testCoverageAnalyzer() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CoverageAnalyzer –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ kinderly-events');
  console.log('='.repeat(60));

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    const analyzer = new CoverageAnalyzer();
    console.log(`üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä: ${analyzer.name}`);
    console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${analyzer.description}`);
    console.log(`üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${analyzer.category}`);
    console.log();

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç kinderly
    const kindlerlyPath = 'C:\\kinderly-events';
    console.log(`üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø—Ä–æ–µ–∫—Ç: ${kindlerlyPath}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    const fs = await import('fs/promises');
    try {
      await fs.access(kindlerlyPath);
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω');
    } catch (error) {
      console.log('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏');
      const currentPath = process.cwd();
      console.log(`üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º: ${currentPath}`);
    }

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Project
    const project: Project = {
      name: 'kinderly-events',
      path: kindlerlyPath,
      packageJsonPath: `${kindlerlyPath}/package.json`,
      dependencies: [], // –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      devDependencies: [],
      scripts: {},
      files: [],
      testFiles: [],
      configFiles: [],
      version: '1.0.0',
      type: 'web',
    };

    console.log();
    console.log('üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∫—Ä—ã—Ç–∏—è...');
    console.log('-'.repeat(40));

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
    const startTime = Date.now();
    const results = await analyzer.check(project);
    const endTime = Date.now();

    console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${endTime - startTime}ms`);
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${results.length}`);
    console.log();

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results.forEach((result, index) => {
      console.log(`üìã –†–µ–∑—É–ª—å—Ç–∞—Ç ${index + 1}:`);
      console.log(`   üéØ –ò–º—è: ${result.name}`);
      console.log(`   ‚ö†Ô∏è –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: ${result.severity}`);
      console.log(`   üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${result.message}`);
      console.log(`   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω: ${result.passed ? '–î–∞' : '–ù–µ—Ç'}`);

      if (result.details && Object.keys(result.details).length > 0) {
        console.log(`   üìã –î–µ—Ç–∞–ª–∏:`);
        Object.entries(result.details).forEach(([key, value]) => {
          if (typeof value === 'object') {
            console.log(`      ${key}: ${JSON.stringify(value, null, 2)}`);
          } else {
            console.log(`      ${key}: ${value}`);
          }
        });
      }

      if (result.suggestions && result.suggestions.length > 0) {
        console.log(`   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:`);
        result.suggestions.forEach(suggestion => {
          console.log(`      - ${suggestion}`);
        });
      }

      if (result.files && result.files.length > 0) {
        console.log(`   üìÅ –§–∞–π–ª—ã (${result.files.length}):`);
        result.files.slice(0, 5).forEach(file => {
          console.log(`      - ${file}`);
        });
        if (result.files.length > 5) {
          console.log(`      ... –∏ –µ—â–µ ${result.files.length - 5} —Ñ–∞–π–ª–æ–≤`);
        }
      }

      console.log();
    });

    // –°–≤–æ–¥–∫–∞
    const passedResults = results.filter(r => r.passed);
    const failedResults = results.filter(r => !r.passed);

    console.log('üìä –°–í–û–î–ö–ê –ê–ù–ê–õ–ò–ó–ê:');
    console.log('='.repeat(30));
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${passedResults.length}`);
    console.log(`‚ùå –ü—Ä–æ–±–ª–µ–º—ã: ${failedResults.length}`);
    console.log(`üìä –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: ${Math.round((passedResults.length / results.length) * 100)}%`);

    if (failedResults.length > 0) {
      console.log();
      console.log('üö® –û–°–ù–û–í–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
      failedResults.forEach((result, index) => {
        console.log(`${index + 1}. ${result.name}: ${result.message}`);
      });
    }

    console.log();
    console.log('üéØ –ö–†–ò–¢–ï–†–ò–ò –û–¶–ï–ù–ö–ò:');
    console.log('-'.repeat(30));
    console.log('üü¢ –•–æ—Ä–æ—à–æ (80%+): –í—ã—Å–æ–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è');
    console.log('üü° –°—Ä–µ–¥–Ω–µ (60-79%): –ë–∞–∑–æ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ, –Ω—É–∂–Ω—ã —É–ª—É—á—à–µ–Ω–∏—è');
    console.log('üî¥ –ü–ª–æ—Ö–æ (<60%): –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ, –Ω—É–∂–Ω–∞ —Å–µ—Ä—å–µ–∑–Ω–∞—è —Ä–∞–±–æ—Ç–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error);
    if (error instanceof Error) {
      console.error('üìã –î–µ—Ç–∞–ª–∏:', error.message);
      console.error('üîç –°—Ç–µ–∫:', error.stack);
    }
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  testCoverageAnalyzer().catch(console.error);
}

export { testCoverageAnalyzer };
