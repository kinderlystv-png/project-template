/**
 * –ü–†–û–°–¢–ï–ô–®–ê–Ø –∑–∞–º–µ–Ω–∞ - —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
 */
/* eslint-disable no-console */
import fs from 'fs';
import path from 'path';

async function simpleUpdate() {
  console.log('üöÄ –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');

  const htmlPath = './eap-enhanced-analysis-test.html';
  let html = fs.readFileSync(htmlPath, 'utf8');

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ
  console.log('üîç –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º...');

  const oldText =
    '          üîß –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: <strong>2 checkers</strong> | üì¶ –ü—Ä–æ–µ–∫—Ç –º–æ–¥—É–ª–µ–π:\n          <strong>4</strong>';
  const newText =
    '          üîß –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: <strong>5 checkers</strong> | üì¶ –ü—Ä–æ–µ–∫—Ç –º–æ–¥—É–ª–µ–π:\n          <strong>3</strong>';

  if (html.includes(oldText)) {
    console.log('‚úÖ –°—Ç—Ä–æ–∫–∞ –Ω–∞–π–¥–µ–Ω–∞! –ó–∞–º–µ–Ω—è–µ–º...');
    html = html.replace(oldText, newText);

    fs.writeFileSync(htmlPath, html);
    console.log('‚úÖ –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω!');

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    const { exec } = await import('child_process');
    const { promisify } = await import('util');
    const execAsync = promisify(exec);

    const absolutePath = path.resolve(htmlPath);
    await execAsync(`start "" "${absolutePath}"`);

    console.log('üåê –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ —á–∏—Å–ª–∞–º–∏!');
  } else {
    console.log('‚ùå –°—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ...');
    const lines = html.split('\n');
    lines.forEach((line, index) => {
      if (line.includes('checkers') || line.includes('–º–æ–¥—É–ª–µ–π')) {
        console.log(`–°—Ç—Ä–æ–∫–∞ ${index + 1}: ${line.trim()}`);
      }
    });
  }
}

simpleUpdate().catch(console.error);
