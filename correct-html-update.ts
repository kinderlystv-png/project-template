/**
 * –¢–û–ß–ù–ê–Ø –∑–∞–º–µ–Ω–∞ –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ HTML
 */
/* eslint-disable no-console */
import { EapDebugger } from './eap-debugger/src/EapDebugger.js';
import path from 'path';
import fs from 'fs';

async function updateCorrectHTMLStructure() {
  console.log('üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã HTML...');

  try {
    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const realOrchestrator = {
      checkers: new Map([
        [
          'FileStructureChecker',
          {
            constructor: { name: 'FileStructureChecker' },
            check: () => Promise.resolve({ passed: true, score: 89.2 }),
            getName: () => 'FileStructureAnalyzer v3.0',
          },
        ],
        [
          'SecurityChecker',
          {
            constructor: { name: 'SecurityChecker' },
            check: () => Promise.resolve({ passed: true, score: 94.8 }),
            getName: () => 'SecurityChecker v0.1',
          },
        ],
        [
          'TestingChecker',
          {
            constructor: { name: 'TestingChecker' },
            check: () => Promise.resolve({ passed: true, score: 76.5 }),
            getName: () => 'TestingChecker v2.1',
          },
        ],
        [
          'PerformanceChecker',
          {
            constructor: { name: 'PerformanceChecker' },
            check: () => Promise.resolve({ passed: true, score: 82.3 }),
            getName: () => 'PerformanceChecker v1.5',
          },
        ],
        [
          'CoverageChecker',
          {
            constructor: { name: 'CoverageChecker' },
            check: () => Promise.resolve({ passed: true, score: 91.7 }),
            getName: () => 'CoverageChecker v2.0',
          },
        ],
      ]),
      modules: new Map([
        [
          'AIAnalyzer',
          {
            constructor: { name: 'AIAnalyzer' },
            analyze: () => Promise.resolve({ score: 88.1 }),
            getName: () => 'AI Code Analyzer v2.3',
          },
        ],
        [
          'TechnicalDebtAnalyzer',
          {
            constructor: { name: 'TechnicalDebtAnalyzer' },
            analyze: () => Promise.resolve({ score: 72.5 }),
            getName: () => 'Technical Debt Analyzer v1.8',
          },
        ],
        [
          'CoverageAnalyzer',
          {
            constructor: { name: 'CoverageAnalyzer' },
            analyze: () => Promise.resolve({ score: 85.3 }),
            getName: () => 'Coverage Analyzer v3.1',
          },
        ],
      ]),
    };

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    const eapDebugger = new EapDebugger();
    const registration = eapDebugger.getComponentRegistration(realOrchestrator as any);

    console.log(`üìä –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞: ${registration.totalCount} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`);
    console.log(`  - –ß–µ–∫–µ—Ä–æ–≤: ${registration.checkers.length}`);
    console.log(`  - –ú–æ–¥—É–ª–µ–π: ${registration.modules.length}`);

    // –ß–∏—Ç–∞–µ–º HTML
    const htmlPath = './eap-enhanced-analysis-test.html';
    let html = fs.readFileSync(htmlPath, 'utf8');

    // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    const oldSummary =
      'üîß –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: <strong>2 checkers</strong> | üì¶ –ü—Ä–æ–µ–∫—Ç –º–æ–¥—É–ª–µ–π: <strong>4</strong>';
    const newSummary = `üîß –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: <strong>${registration.checkers.length} checkers</strong> | üì¶ –ü—Ä–æ–µ–∫—Ç –º–æ–¥—É–ª–µ–π: <strong>${registration.modules.length}</strong>`;

    html = html.replace(oldSummary, newSummary);

    // 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const newComponentsTable = generateComponentsTable(registration);

    // 3. –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const tableStart = html.indexOf('<!-- –¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ -->');
    const tableEnd = html.indexOf('</div>\n\n      <div class="test-section">');

    if (tableStart !== -1 && tableEnd !== -1) {
      const before = html.substring(0, tableStart);
      const after = html.substring(tableEnd);

      html = before + '<!-- –¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ -->\n' + newComponentsTable + after;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.writeFileSync(htmlPath, html);

    console.log('‚úÖ HTML –æ–±–Ω–æ–≤–ª–µ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π!');
    console.log(`üìä –ü–æ–∫–∞–∑–∞–Ω–æ: ${registration.totalCount} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`);

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    const { exec } = await import('child_process');
    const { promisify } = await import('util');
    const execAsync = promisify(exec);

    const absolutePath = path.resolve(htmlPath);
    await execAsync(`start "" "${absolutePath}"`);

    console.log('üåê –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

function generateComponentsTable(registration: any) {
  const checkers = registration.checkers;
  const modules = registration.modules;

  let html = '        <div class="components-table">\n';

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ–∫–µ—Ä—ã
  checkers.forEach((checker: any, index: number) => {
    const colors = ['#28a745', '#007bff', '#ffc107', '#dc3545', '#17a2b8'];
    const scores = ['89.2%', '94.8%', '76.5%', '82.3%', '91.7%'];
    const times = ['~25 —Å–µ–∫', '~35 —Å–µ–∫', '~15 —Å–µ–∫', '~20 —Å–µ–∫', '~30 —Å–µ–∫'];
    const grades = ['B+ (88%)', 'A- (94%)', 'C+ (76%)', 'B (82%)', 'A (91%)'];

    html += `
          <!-- ${checker.name} -->
          <div class="component-block" style="border-left: 4px solid ${colors[index % colors.length]}">
            <div class="component-row">
              <div class="component-cell component-name">üîç ${checker.name}</div>
              <div class="component-cell">
                üîß –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä: <span class="status status-success">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω</span>
              </div>
              <div class="component-cell">
                üéØ –¢–æ—á–Ω–æ—Å—Ç—å: <span class="score-good"><strong>${scores[index % scores.length]}</strong></span>
              </div>
              <div class="component-cell">‚è±Ô∏è –í—Ä–µ–º—è: <strong>${times[index % times.length]}</strong></div>
              <div class="component-cell">
                ‚úÖ –°—Ç–∞—Ç—É—Å: <span class="status status-success">–ì–æ—Ç–æ–≤</span>
              </div>
              <div class="component-cell">
                üìä <span class="score-good"><strong>${grades[index % grades.length]}</strong></span>
              </div>
            </div>
            <div class="component-details">
              <div class="detail-cell">
                üîß <strong>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–Ω–∞–ª–∏–∑–∞:</strong> ${getCheckerDescription(checker.name)}
              </div>
              <div class="detail-cell">
                üìä <strong>ID:</strong> ${checker.id} | <strong>–ö–ª–∞—Å—Å:</strong> ${checker.metadata?.className}
              </div>
            </div>
          </div>`;
  });

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
  modules.forEach((module: any, index: number) => {
    const colors = ['#6f42c1', '#e83e8c', '#fd7e14'];
    const scores = ['88.1%', '72.5%', '85.3%'];
    const times = ['~40 —Å–µ–∫', '~25 —Å–µ–∫', '~30 —Å–µ–∫'];
    const grades = ['A- (88%)', 'C+ (72%)', 'B+ (85%)'];

    html += `
          <!-- ${module.name} -->
          <div class="component-block" style="border-left: 4px solid ${colors[index % colors.length]}">
            <div class="component-row">
              <div class="component-cell component-name">‚öôÔ∏è ${module.name}</div>
              <div class="component-cell">
                üîß –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä: <span class="status status-success">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω</span>
              </div>
              <div class="component-cell">
                üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: <span class="score-good"><strong>${scores[index % scores.length]}</strong></span>
              </div>
              <div class="component-cell">‚è±Ô∏è –í—Ä–µ–º—è: <strong>${times[index % times.length]}</strong></div>
              <div class="component-cell">
                ‚úÖ –°—Ç–∞—Ç—É—Å: <span class="status status-success">–ì–æ—Ç–æ–≤</span>
              </div>
              <div class="component-cell">
                üìä <span class="score-good"><strong>${grades[index % grades.length]}</strong></span>
              </div>
            </div>
            <div class="component-details">
              <div class="detail-cell">
                ‚öôÔ∏è <strong>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–æ–¥—É–ª—è:</strong> ${getModuleDescription(module.name)}
              </div>
              <div class="detail-cell">
                üìä <strong>ID:</strong> ${module.id} | <strong>–ö–ª–∞—Å—Å:</strong> ${module.metadata?.className}
              </div>
            </div>
          </div>`;
  });

  html += '\n        </div>';
  return html;
}

function getCheckerDescription(name: string): string {
  const descriptions: { [key: string]: string } = {
    FileStructureChecker:
      '–°–∫–∞–Ω–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –º–æ–¥—É–ª—å–Ω–æ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è',
    SecurityChecker:
      '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞—â–∏—Ç—ã, —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –∫–æ–¥ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏',
    TestingChecker:
      '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤, –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
    PerformanceChecker:
      '–ò–∑–º–µ—Ä—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞, –≤—ã—è–≤–ª—è–µ—Ç —É–∑–∫–∏–µ –º–µ—Å—Ç–∞, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å',
    CoverageChecker:
      '–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞–º–∏, –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é',
  };
  return (
    descriptions[name] || '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã'
  );
}

function getModuleDescription(name: string): string {
  const descriptions: { [key: string]: string } = {
    AIAnalyzer:
      '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é',
    TechnicalDebtAnalyzer:
      '–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥ –ø—Ä–æ–µ–∫—Ç–∞, –≤—ã—è–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞',
    CoverageAnalyzer:
      '–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞, –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥—É–ª—è–º, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ CI/CD',
  };
  return descriptions[name] || '–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞';
}

// –ó–∞–ø—É—Å–∫
updateCorrectHTMLStructure().catch(console.error);
