/**
 * –¢–µ—Å—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è UAK v2.0
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
 */

const { isAutoGenerated, detectCodeDuplication } = require('./smart-analyzer.cjs');
const fs = require('fs');
const path = require('path');

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
const TEST_CASES = [
  {
    name: 'DockerAnalyzer',
    file: '../eap-analyzer/src/analyzers/docker-analyzer.ts',
    expectedType: 'ANALYZER',
    shouldHaveDuplication: false, // –ü–æ—Ö–æ–∂–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ - —ç—Ç–æ –Ω–æ—Ä–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    description: '–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä Docker - –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –±–µ–∑ –ª–æ–∂–Ω–æ–≥–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è',
  },
  {
    name: 'EMTAnalyzer',
    file: '../eap-analyzer/src/analyzers/emt-analyzer.ts',
    expectedType: 'ANALYZER',
    shouldHaveDuplication: false, // –¢–∏–ø–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    description: 'EMT –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä - –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –±–µ–∑ –ª–æ–∂–Ω–æ–≥–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è',
  },
  {
    name: 'UserService (—Ä–µ–∞–ª—å–Ω—ã–π –¥—É–±–ª–∏—Ä—É—é—â–∏–π –∫–æ–¥)',
    content: `
    export class UserService {
      validateEmail(email) {
        if (!email) return false;
        return email.includes('@');
      }

      validateEmail2(email) {
        if (!email) return false;
        return email.includes('@');
      }

      process() { /* —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ */ }
    }`,
    expectedType: 'SERVICE',
    shouldHaveDuplication: true, // –†–µ–∞–ª—å–Ω–æ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
    description: '–°–µ—Ä–≤–∏—Å —Å —Ä–µ–∞–ª—å–Ω—ã–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º - –¥–æ–ª–∂–µ–Ω –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
  },
  {
    name: 'ValidatorCollection (–Ω–æ—Ä–º–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤)',
    content: `
    export class ValidatorCollection {
      validateRequired(value) {
        return value != null && value !== '';
      }

      validateEmail(email) {
        return email && email.includes('@');
      }

      validatePhone(phone) {
        return phone && phone.length >= 10;
      }
    }`,
    expectedType: 'VALIDATOR',
    shouldHaveDuplication: false, // –ü–æ—Ö–æ–∂–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - –Ω–æ—Ä–º–∞
    description: '–ö–æ–ª–ª–µ–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ - –ø–æ—Ö–æ–∂–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —ç—Ç–æ –Ω–æ—Ä–º–∞',
  },
];

// –¢–µ—Å—Ç –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
const AUTO_GENERATED_TESTS = [
  {
    name: 'SvelteKit app.js',
    filepath: '.svelte-kit/generated/client/app.js',
    content: `import * as client_hooks from '../../../src/hooks.client.ts';\n\nexport { matchers } from './matchers.js';\nexport const nodes = [\n\t() => import('./nodes/0'),\n\t() => import('./nodes/1')\n];`,
    shouldBeFiltered: true,
  },
  {
    name: 'Regular TypeScript file',
    filepath: 'src/services/UserService.ts',
    content: `export class UserService {\n  getUserById(id: string) {\n    return this.database.find(id);\n  }\n}`,
    shouldBeFiltered: false,
  },
];

console.log('üß™ –¢–ï–°–¢ –¢–û–ß–ù–û–°–¢–ò –£–õ–£–ß–®–ï–ù–ò–ô SMART ANALYZER v2.0');
console.log('='.repeat(60));

let totalTests = 0;
let passedTests = 0;

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
console.log('\nüîç –¢–ï–°–¢ 1: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤');
console.log('-'.repeat(50));

for (const test of AUTO_GENERATED_TESTS) {
  totalTests++;
  const isFiltered = isAutoGenerated(test.filepath, test.content);
  const passed = isFiltered === test.shouldBeFiltered;

  console.log(`${passed ? '‚úÖ' : '‚ùå'} ${test.name}`);
  console.log(`   –ü—É—Ç—å: ${test.filepath}`);
  console.log(`   –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: ${test.shouldBeFiltered}`);
  console.log(`   –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω: ${isFiltered}`);

  if (passed) passedTests++;
  console.log('');
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
console.log('\nüîç –¢–ï–°–¢ 2: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è');
console.log('-'.repeat(50));

for (const test of TEST_CASES) {
  totalTests++;

  let content;
  if (test.content) {
    content = test.content;
  } else {
    try {
      const fullPath = path.join(__dirname, test.file);
      content = fs.readFileSync(fullPath, 'utf8');
    } catch (error) {
      console.log(`‚ö†Ô∏è  –§–∞–π–ª ${test.file} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç`);
      continue;
    }
  }

  const duplicationScore = detectCodeDuplication(content, test.expectedType);
  const hasDuplication = duplicationScore > 0;
  const passed = hasDuplication === test.shouldHaveDuplication;

  console.log(`${passed ? '‚úÖ' : '‚ùå'} ${test.name} (${test.expectedType})`);
  console.log(`   ${test.description}`);
  console.log(`   –û–∂–∏–¥–∞–µ—Ç—Å—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: ${test.shouldHaveDuplication}`);
  console.log(
    `   –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: ${hasDuplication} (score: ${duplicationScore.toFixed(3)})`
  );

  if (passed) passedTests++;
  console.log('');
}

// –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
console.log('\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê');
console.log('-'.repeat(50));
const accuracy = ((passedTests / totalTests) * 100).toFixed(1);
console.log(`–ü—Ä–æ—à–ª–æ —Ç–µ—Å—Ç–æ–≤: ${passedTests}/${totalTests}`);
console.log(`–¢–æ—á–Ω–æ—Å—Ç—å: ${accuracy}%`);

if (accuracy >= 90) {
  console.log('üéâ –û–¢–õ–ò–ß–ù–û! Smart Analyzer –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É');
} else if (accuracy >= 80) {
  console.log('‚ö†Ô∏è  –•–û–†–û–®–û, –Ω–æ –Ω—É–∂–Ω—ã —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞');
} else {
  console.log('‚ùå –¢–†–ï–ë–£–Æ–¢–°–Ø –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø');
}

console.log('\nüöÄ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
