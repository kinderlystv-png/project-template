#!/usr/bin/env node

/**
 * EAP Analyzer Report Generator
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node report-generator.js [--output path] [--format md|json] [--deep-scan]
 */

const fs = require('fs').promises;
const path = require('path');
const { execSync } = require('child_process');

class EAPReportGenerator {
  constructor(options = {}) {
    this.projectRoot = options.projectRoot || process.cwd();
    this.eapAnalyzerPath = path.join(this.projectRoot, 'eap-analyzer');
    this.outputPath =
      options.outputPath ||
      path.join(this.projectRoot, 'eap-analyzer-dashboard', 'data', 'reports');
    this.format = options.format || 'md';
    this.deepScan = options.deepScan || false;

    this.categories = {
      testing: { name: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', icon: 'üß™', priority: '–í–´–°–û–ö–ò–ô' },
      security: { name: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', icon: 'üîí', priority: '–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô' },
      performance: { name: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', icon: '‚ö°', priority: '–í–´–°–û–ö–ò–ô' },
      docker: { name: 'Docker & –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è', icon: 'üê≥', priority: '–°–†–ï–î–ù–ò–ô' },
      dependencies: { name: '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏', icon: 'üì¶', priority: '–°–†–ï–î–ù–ò–ô' },
      logging: { name: '–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ', icon: 'üìù', priority: '–ù–ò–ó–ö–ò–ô' },
      cicd: { name: 'CI/CD', icon: 'üîÑ', priority: '–°–†–ï–î–ù–ò–ô' },
      'code-quality': { name: '–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞', icon: 'üíé', priority: '–í–´–°–û–ö–ò–ô' },
      core: { name: '–Ø–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã', icon: 'üèóÔ∏è', priority: '–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô' },
      ai: { name: '–ò–ò –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', icon: 'ü§ñ', priority: '–ò–ù–ù–û–í–ê–¶–ò–û–ù–ù–´–ô' },
      architecture: { name: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', icon: 'üèõÔ∏è', priority: '–í–´–°–û–ö–ò–ô' },
      infrastructure: { name: '–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞', icon: '‚öôÔ∏è', priority: '–°–†–ï–î–ù–ò–ô' },
    };
  }

  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
   */
  async generateReport() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ EAP Analyzer...');

    try {
      // 1. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      console.log('üìÇ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...');
      const components = await this.scanComponents();

      // 2. –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
      console.log('üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫...');
      const analyzedComponents = await this.analyzeComponents(components);

      // 3. –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      console.log('üìä –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
      const statistics = this.calculateStatistics(analyzedComponents);

      // 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
      console.log('üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...');
      const report = await this.createReport(analyzedComponents, statistics);

      // 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
      const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
      const filename = `EAP-ANALYZER-REPORT-${timestamp}.${this.format}`;
      const outputFile = path.join(this.outputPath, filename);

      await this.ensureDirectoryExists(this.outputPath);
      await fs.writeFile(outputFile, report, 'utf8');

      // 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      const mainFile = path.join(this.outputPath, 'EAP-ANALYZER-FULL-COMPONENT-CATALOG.md');
      if (this.format === 'md') {
        await fs.writeFile(mainFile, report, 'utf8');
        console.log(`‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω: ${mainFile}`);
      }

      console.log(`‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${outputFile}`);
      console.log(`üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${Object.keys(analyzedComponents).length}`);
      console.log(
        `üìà –°—Ä–µ–¥–Ω—è—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ${statistics.avgLogic.toFixed(1)}% / ${statistics.avgFunctionality.toFixed(1)}%`
      );

      return {
        components: analyzedComponents,
        statistics,
        outputFile,
        timestamp,
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:', error.message);
      throw error;
    }
  }

  /**
   * –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ eap-analyzer
   */
  async scanComponents() {
    const components = {};

    try {
      const files = await this.getAllFiles(this.eapAnalyzerPath, ['.js', '.cjs', '.ts']);

      for (const file of files) {
        const relativePath = path.relative(this.eapAnalyzerPath, file);
        const componentName = this.extractComponentName(file);
        const category = this.determineCategory(file, componentName);

        components[componentName] = {
          name: componentName,
          file: relativePath,
          fullPath: file,
          category,
          size: 0,
          lines: 0,
          functions: 0,
          classes: 0,
          tests: null,
          logic: 0,
          functionality: 0,
          description: '',
          lastModified: null,
        };
      }

      return components;
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å eap-analyzer –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é:', error.message);
      return {};
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   */
  async analyzeComponents(components) {
    for (const [name, component] of Object.entries(components)) {
      try {
        // –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
        const stats = await fs.stat(component.fullPath);
        component.lastModified = stats.mtime;
        component.size = stats.size;

        // –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        const content = await fs.readFile(component.fullPath, 'utf8');
        const analysis = this.analyzeCode(content);

        Object.assign(component, analysis);

        // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        const metrics = this.calculateReadinessMetrics(component, content);
        component.logic = metrics.logic;
        component.functionality = metrics.functionality;

        // –ü–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        component.tests = await this.findRelatedTests(component);

        if (this.deepScan) {
          // –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ (AST, —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ —Ç.–¥.)
          const deepAnalysis = await this.performDeepAnalysis(content, component.fullPath);
          Object.assign(component, deepAnalysis);
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ${name}:`, error.message);
      }
    }

    return components;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
   */
  analyzeCode(content) {
    const lines = content.split('\n');
    const nonEmptyLines = lines.filter(line => line.trim() && !line.trim().startsWith('//')).length;

    // –ü–æ–¥—Å—á–µ—Ç —Ñ—É–Ω–∫—Ü–∏–π
    const functionMatches =
      content.match(/(function\s+\w+|const\s+\w+\s*=\s*\(?|class\s+\w+|async\s+function)/g) || [];

    // –ü–æ–¥—Å—á–µ—Ç –∫–ª–∞—Å—Å–æ–≤
    const classMatches = content.match(/class\s+\w+/g) || [];

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    const descriptionMatch = content.match(
      /\/\*\*[\s\S]*?\*\/([\s\S]*?)(?:class|function|const|module\.exports)/
    );
    let description = '';

    if (descriptionMatch) {
      const commentBlock = descriptionMatch[0];
      const descLines = commentBlock
        .split('\n')
        .map(line => line.replace(/^\s*\*\s?/, '').trim())
        .filter(line => line && !line.startsWith('@'))
        .slice(1, 3);
      description = descLines.join(' ');
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    if (!description) {
      description = this.generateAutoDescription(content);
    }

    return {
      lines: nonEmptyLines,
      functions: functionMatches.length,
      classes: classMatches.length,
      description: description.slice(0, 200), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    };
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞
   */
  calculateReadinessMetrics(component, content) {
    let logicScore = 0;
    let functionalityScore = 0;

    // –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const sizeScore = Math.min((component.lines / 100) * 30, 30);
    const functionScore = Math.min((component.functions / 10) * 20, 20);
    const classScore = Math.min((component.classes / 3) * 15, 15);

    logicScore = sizeScore + functionScore + classScore;

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –¥–ª—è –ª–æ–≥–∏–∫–∏
    if (content.includes('async') && content.includes('await')) logicScore += 10;
    if (content.includes('try') && content.includes('catch')) logicScore += 8;
    if (content.includes('class') && content.includes('constructor')) logicScore += 12;
    if (content.includes('module.exports') || content.includes('export')) logicScore += 5;

    // –û—Ü–µ–Ω–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    functionalityScore = logicScore * 0.8; // –ë–∞–∑–æ–≤–æ 80% –æ—Ç –ª–æ–≥–∏–∫–∏

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    if (component.tests) functionalityScore += 10;
    if (content.includes('console.log') || content.includes('logger')) functionalityScore += 5;
    if (content.includes('validation') || content.includes('validate')) functionalityScore += 8;

    // –ö–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    const categoryMultipliers = {
      testing: { logic: 1.1, functionality: 1.2 },
      security: { logic: 1.05, functionality: 1.1 },
      core: { logic: 1.0, functionality: 1.05 },
      ai: { logic: 1.15, functionality: 1.1 },
    };

    const multiplier = categoryMultipliers[component.category] || {
      logic: 1.0,
      functionality: 1.0,
    };
    logicScore *= multiplier.logic;
    functionalityScore *= multiplier.functionality;

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    logicScore = Math.min(Math.max(Math.round(logicScore), 10), 98);
    functionalityScore = Math.min(Math.max(Math.round(functionalityScore), 5), 95);

    return { logic: logicScore, functionality: functionalityScore };
  }

  /**
   * –ü–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
   */
  async findRelatedTests(component) {
    const testDirs = [
      path.join(this.projectRoot, 'tests'),
      path.join(this.projectRoot, '__tests__'),
      path.join(this.projectRoot, 'test'),
      path.join(this.projectRoot, 'spec'),
    ];

    const baseName = path.basename(component.file, path.extname(component.file));
    const testPatterns = [
      `${baseName}.test.js`,
      `${baseName}.spec.js`,
      `${baseName}.test.ts`,
      `${baseName}.spec.ts`,
    ];

    for (const testDir of testDirs) {
      try {
        const exists = await fs
          .access(testDir)
          .then(() => true)
          .catch(() => false);
        if (!exists) continue;

        for (const pattern of testPatterns) {
          const testFile = path.join(testDir, pattern);
          const testExists = await fs
            .access(testFile)
            .then(() => true)
            .catch(() => false);
          if (testExists) {
            const testContent = await fs.readFile(testFile, 'utf8');
            const testCount = (testContent.match(/it\(|test\(|describe\(/g) || []).length;
            return `${testCount} —Ç–µ—Å—Ç–æ–≤`;
          }
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
      }
    }

    return null;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   */
  determineCategory(filePath, componentName) {
    const pathLower = filePath.toLowerCase();
    const nameLower = componentName.toLowerCase();

    if (pathLower.includes('test') || nameLower.includes('test') || nameLower.includes('jest')) {
      return 'testing';
    }
    if (pathLower.includes('security') || nameLower.includes('security')) {
      return 'security';
    }
    if (pathLower.includes('performance') || nameLower.includes('performance')) {
      return 'performance';
    }
    if (pathLower.includes('docker') || nameLower.includes('docker')) {
      return 'docker';
    }
    if (
      pathLower.includes('ai') ||
      pathLower.includes('intelligence') ||
      nameLower.includes('ai')
    ) {
      return 'ai';
    }
    if (pathLower.includes('core') || pathLower.includes('orchestrator')) {
      return 'core';
    }
    if (pathLower.includes('architecture') || nameLower.includes('structure')) {
      return 'architecture';
    }
    if (pathLower.includes('infrastructure') || nameLower.includes('infrastructure')) {
      return 'infrastructure';
    }
    if (nameLower.includes('dependencies') || nameLower.includes('dependency')) {
      return 'dependencies';
    }
    if (nameLower.includes('logging') || nameLower.includes('log')) {
      return 'logging';
    }
    if (nameLower.includes('ci') || nameLower.includes('cd')) {
      return 'cicd';
    }
    if (nameLower.includes('quality') || nameLower.includes('lint')) {
      return 'code-quality';
    }

    return 'core'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–∑ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
   */
  extractComponentName(filePath) {
    const basename = path.basename(filePath, path.extname(filePath));
    return basename.replace(/[-_]/g, '');
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
   */
  generateAutoDescription(content) {
    const firstComment = content.match(/\/\*\*([\s\S]*?)\*\//);
    if (firstComment) {
      return firstComment[1]
        .split('\n')
        .map(line => line.replace(/^\s*\*\s?/, '').trim())
        .filter(line => line)
        .slice(0, 2)
        .join(' ');
    }

    // –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞
    const lines = content.split('\n').filter(line => line.trim());
    const meaningfulLine = lines.find(
      line =>
        (!line.startsWith('//') &&
          !line.startsWith('/*') &&
          !line.startsWith('*') &&
          line.includes('class')) ||
        line.includes('function') ||
        line.includes('const')
    );

    return meaningfulLine ? `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç` : '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –º–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º—ã';
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  calculateStatistics(components) {
    const componentList = Object.values(components);
    const totalComponents = componentList.length;

    if (totalComponents === 0) {
      return {
        total: 0,
        avgLogic: 0,
        avgFunctionality: 0,
        ready: 0,
        inProgress: 0,
        planned: 0,
        categories: {},
      };
    }

    const totalLogic = componentList.reduce((sum, comp) => sum + comp.logic, 0);
    const totalFunctionality = componentList.reduce((sum, comp) => sum + comp.functionality, 0);

    const avgLogic = totalLogic / totalComponents;
    const avgFunctionality = totalFunctionality / totalComponents;

    // –ü–æ–¥—Å—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    let ready = 0,
      inProgress = 0,
      planned = 0;
    componentList.forEach(comp => {
      const overall = (comp.logic + comp.functionality) / 2;
      if (overall >= 90) ready++;
      else if (overall >= 50) inProgress++;
      else planned++;
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categories = {};
    componentList.forEach(comp => {
      if (!categories[comp.category]) {
        categories[comp.category] = {
          count: 0,
          avgLogic: 0,
          avgFunctionality: 0,
          components: [],
        };
      }
      categories[comp.category].count++;
      categories[comp.category].avgLogic += comp.logic;
      categories[comp.category].avgFunctionality += comp.functionality;
      categories[comp.category].components.push(comp.name);
    });

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    Object.values(categories).forEach(cat => {
      cat.avgLogic = Math.round(cat.avgLogic / cat.count);
      cat.avgFunctionality = Math.round(cat.avgFunctionality / cat.count);
    });

    return {
      total: totalComponents,
      avgLogic,
      avgFunctionality,
      ready,
      inProgress,
      planned,
      categories,
    };
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ Markdown –æ—Ç—á–µ—Ç–∞
   */
  async createReport(components, statistics) {
    const timestamp = new Date().toLocaleDateString('ru-RU');
    const componentsByCategory = this.groupByCategory(components);

    let report = `# üìã EAP ANALYZER - –ü–û–õ–ù–´–ô –ö–ê–¢–ê–õ–û–ì –ö–û–ú–ü–û–ù–ï–ù–¢–û–í

*–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: ${timestamp}*
*–í–µ—Ä—Å–∏—è: ${new Date().getFullYear()}.${new Date().getMonth() + 1}*

## üìä –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –ì–û–¢–û–í–ù–û–°–¢–ò

- **–ü–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞**: –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ª–æ–≥–∏–∫–∏ (% —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
- **–í—Ç–æ—Ä–∞—è —Ü–∏—Ñ—Ä–∞**: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (% —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏)

## üìà –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
- **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:** ${statistics.total}
- **–°—Ä–µ–¥–Ω—è—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ª–æ–≥–∏–∫–∏:** ${statistics.avgLogic.toFixed(1)}%
- **–°—Ä–µ–¥–Ω—è—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:** ${statistics.avgFunctionality.toFixed(1)}%
- **–ì–æ—Ç–æ–≤—ã –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É (>90%):** ${statistics.ready} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- **–í –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (50-90%):** ${statistics.inProgress} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤  
- **–í –ø–ª–∞–Ω–∞—Ö (<50%):** ${statistics.planned} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

---

## üéØ **–û–°–ù–û–í–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò –ê–ù–ê–õ–ò–ó–ê**

`;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for (const [categoryKey, categoryComponents] of Object.entries(componentsByCategory)) {
      const categoryInfo = this.categories[categoryKey];
      const categoryStats = statistics.categories[categoryKey];

      if (!categoryInfo || !categoryStats) continue;

      report += `### ${Object.keys(componentsByCategory).indexOf(categoryKey) + 1}. ${categoryInfo.icon} **${categoryInfo.name.toUpperCase()}** [${categoryStats.avgLogic}% / ${categoryStats.avgFunctionality}%]

*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${categoryInfo.priority} | –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${categoryStats.count}*

`;

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      categoryComponents.forEach(component => {
        const testsInfo = component.tests || '–¢–µ—Å—Ç–æ–≤ –Ω–µ—Ç';
        report += `#### ${component.name}
- **–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ª–æ–≥–∏–∫–∏:** ${component.logic}%
- **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:** ${component.functionality}%
- **–§–∞–π–ª:** \`${component.file}\`
- **–û–ø–∏—Å–∞–Ω–∏–µ:** ${component.description || '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç'}
- **–¢–µ—Å—Ç—ã:** ${testsInfo}
- **–°—Ç—Ä–æ–∫ –∫–æ–¥–∞:** ${component.lines}
- **–§—É–Ω–∫—Ü–∏–π:** ${component.functions}

`;
      });

      report += `---

`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
    report += `## –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π

### ${timestamp}
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${statistics.total} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- –°—Ä–µ–¥–Ω—è—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ª–æ–≥–∏–∫–∏: ${statistics.avgLogic.toFixed(1)}%
- –°—Ä–µ–¥–Ω—è—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${statistics.avgFunctionality.toFixed(1)}%

---

*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π EAP Analyzer Report Generator*
*–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ: \`node report-generator.js\`*
`;

    return report;
  }

  /**
   * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
   */
  groupByCategory(components) {
    const grouped = {};

    Object.values(components).forEach(component => {
      const category = component.category;
      if (!grouped[category]) {
        grouped[category] = [];
      }
      grouped[category].push(component);
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    Object.values(grouped).forEach(categoryComponents => {
      categoryComponents.sort((a, b) => {
        const overallA = (a.logic + a.functionality) / 2;
        const overallB = (b.logic + b.functionality) / 2;
        return overallB - overallA; // –ü–æ —É–±—ã–≤–∞–Ω–∏—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
      });
    });

    return grouped;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
   */
  async getAllFiles(dir, extensions = []) {
    const files = [];

    try {
      const entries = await fs.readdir(dir, { withFileTypes: true });

      for (const entry of entries) {
        const fullPath = path.join(dir, entry.name);

        if (entry.isDirectory()) {
          // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
          const subFiles = await this.getAllFiles(fullPath, extensions);
          files.push(...subFiles);
        } else if (entry.isFile()) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
          const ext = path.extname(entry.name);
          if (extensions.length === 0 || extensions.includes(ext)) {
            files.push(fullPath);
          }
        }
      }
    } catch (error) {
      console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ${dir}:`, error.message);
    }

    return files;
  }

  /**
   * –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
   */
  async ensureDirectoryExists(dirPath) {
    try {
      await fs.access(dirPath);
    } catch {
      await fs.mkdir(dirPath, { recursive: true });
    }
  }

  /**
   * –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
   */
  async performDeepAnalysis(content, filePath) {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å AST –∞–Ω–∞–ª–∏–∑, —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ —Ç.–¥.
    return {
      complexity: Math.floor(Math.random() * 10) + 1, // –ó–∞–≥–ª—É—à–∫–∞
      maintainability: Math.floor(Math.random() * 100), // –ó–∞–≥–ª—É—à–∫–∞
    };
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const args = process.argv.slice(2);
  const options = {};

  for (let i = 0; i < args.length; i++) {
    switch (args[i]) {
      case '--output':
        options.outputPath = args[++i];
        break;
      case '--format':
        options.format = args[++i];
        break;
      case '--deep-scan':
        options.deepScan = true;
        break;
      case '--help':
        console.log(`
EAP Analyzer Report Generator

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node report-generator.js [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --output <path>    –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ./eap-analyzer-dashboard/data/reports)
  --format <format>  –§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞: md –∏–ª–∏ json (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: md)
  --deep-scan        –í–∫–ª—é—á–∏—Ç—å –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
  --help            –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  node report-generator.js
  node report-generator.js --output ./reports --format json
  node report-generator.js --deep-scan
`);
        process.exit(0);
    }
  }

  try {
    const generator = new EAPReportGenerator(options);
    await generator.generateReport();
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = EAPReportGenerator;
