#!/usr/bin/env node

/**
 * EAP Analyzer Report Generator (CommonJS –≤–µ—Ä—Å–∏—è)
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã
 */

const fs = require('fs').promises;
const path = require('path');

class EAPReportGenerator {
  constructor(options = {}) {
    this.projectRoot = options.projectRoot || process.cwd();
    this.eapAnalyzerPath = path.join(this.projectRoot, 'eap-analyzer');
    this.outputPath =
      options.outputPath ||
      path.join(this.projectRoot, 'eap-analyzer-dashboard', 'data', 'reports');
    this.format = options.format || 'md';

    this.categories = {
      testing: { name: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', icon: 'üß™', priority: '–í–´–°–û–ö–ò–ô' },
      security: { name: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', icon: 'üîí', priority: '–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô' },
      performance: { name: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', icon: '‚ö°', priority: '–í–´–°–û–ö–ò–ô' },
      docker: { name: 'Docker & –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è', icon: 'üê≥', priority: '–°–†–ï–î–ù–ò–ô' },
      dependencies: { name: '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏', icon: 'üì¶', priority: '–°–†–ï–î–ù–ò–ô' },
      logging: { name: '–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ', icon: 'üìù', priority: '–ù–ò–ó–ö–ò–ô' },
      cicd: { name: 'CI/CD', icon: 'üîÑ', priority: '–°–†–ï–î–ù–ò–ô' },
      'code-quality': { name: '–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞', icon: 'üíé', priority: '–í–´–°–û–ö–ò–ô' },
      core: { name: '–Ø–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã', icon: 'üèóÔ∏è', priority: '–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô' },
      ai: { name: '–ò–ò –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', icon: 'ü§ñ', priority: '–ò–ù–ù–û–í–ê–¶–ò–û–ù–ù–´–ô' },
      architecture: { name: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', icon: 'üèõÔ∏è', priority: '–í–´–°–û–ö–ò–ô' },
      infrastructure: { name: '–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞', icon: '‚öôÔ∏è', priority: '–°–†–ï–î–ù–ò–ô' },
    };
  }

  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
   */
  async generateReport() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ EAP Analyzer...');

    try {
      console.log('üìÇ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...');
      const components = await this.scanComponents();

      console.log('üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫...');
      const analyzedComponents = await this.analyzeComponents(components);

      console.log('üìä –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
      const statistics = this.calculateStatistics(analyzedComponents);

      console.log('üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...');
      const report = await this.createReport(analyzedComponents, statistics);

      const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
      const filename = `EAP-ANALYZER-REPORT-${timestamp}.${this.format}`;
      const outputFile = path.join(this.outputPath, filename);

      await this.ensureDirectoryExists(this.outputPath);
      await fs.writeFile(outputFile, report, 'utf8');

      const mainFile = path.join(this.outputPath, 'EAP-ANALYZER-FULL-COMPONENT-CATALOG.md');
      if (this.format === 'md') {
        await fs.writeFile(mainFile, report, 'utf8');
        console.log(`‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω: ${mainFile}`);
      }

      console.log(`‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${outputFile}`);
      console.log(`üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${Object.keys(analyzedComponents).length}`);
      console.log(
        `üìà –°—Ä–µ–¥–Ω—è—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ${statistics.avgLogic.toFixed(1)}% / ${statistics.avgFunctionality.toFixed(1)}%`
      );

      return { components: analyzedComponents, statistics, outputFile, timestamp };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:', error.message);
      throw error;
    }
  }

  /**
   * –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
   */
  async scanComponents() {
    const components = {};

    try {
      const files = await this.getAllFiles(this.eapAnalyzerPath, ['.js', '.cjs', '.ts']);

      for (const file of files) {
        const relativePath = path.relative(this.eapAnalyzerPath, file);
        const componentName = this.extractComponentName(file);
        const category = this.determineCategory(file, componentName);

        components[componentName] = {
          name: componentName,
          file: relativePath,
          fullPath: file,
          category,
          size: 0,
          lines: 0,
          functions: 0,
          classes: 0,
          logic: 0,
          functionality: 0,
          description: '',
          lastModified: null,
        };
      }

      return components;
    } catch (error) {
      console.warn('‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è eap-analyzer –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', error.message);
      return {};
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
   */
  async analyzeComponents(components) {
    for (const [name, component] of Object.entries(components)) {
      try {
        const stats = await fs.stat(component.fullPath);
        component.lastModified = stats.mtime;
        component.size = stats.size;

        const content = await fs.readFile(component.fullPath, 'utf8');
        const analysis = this.analyzeCode(content);

        Object.assign(component, analysis);

        const metrics = this.calculateReadinessMetrics(component, content);
        component.logic = metrics.logic;
        component.functionality = metrics.functionality;
      } catch (error) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ${name}:`, error.message);
      }
    }

    return components;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
   */
  analyzeCode(content) {
    const lines = content.split('\n');
    const nonEmptyLines = lines.filter(line => line.trim() && !line.trim().startsWith('//')).length;

    const functionMatches =
      content.match(/(function\s+\w+|const\s+\w+\s*=\s*\(?|class\s+\w+|async\s+function)/g) || [];
    const classMatches = content.match(/class\s+\w+/g) || [];

    let description = this.extractDescription(content) || this.generateAutoDescription(content);

    return {
      lines: nonEmptyLines,
      functions: functionMatches.length,
      classes: classMatches.length,
      description: description.slice(0, 200),
    };
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
   */
  extractDescription(content) {
    const commentMatch = content.match(/\/\*\*([\s\S]*?)\*\//);
    if (commentMatch) {
      const lines = commentMatch[1]
        .split('\n')
        .map(line => line.replace(/^\s*\*\s?/, '').trim())
        .filter(line => line && !line.startsWith('@'))
        .slice(0, 2);
      return lines.join(' ');
    }
    return '';
  }

  /**
   * –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
   */
  generateAutoDescription(content) {
    if (content.includes('class')) return '–ö–ª–∞—Å—Å-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã';
    if (content.includes('function')) return '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å';
    if (content.includes('async')) return '–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç';
    return '–ú–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞';
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
   */
  calculateReadinessMetrics(component, content) {
    let logicScore = 0;
    let functionalityScore = 0;

    // –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    const sizeScore = Math.min((component.lines / 100) * 30, 30);
    const functionScore = Math.min((component.functions / 10) * 20, 20);
    const classScore = Math.min((component.classes / 3) * 15, 15);

    logicScore = sizeScore + functionScore + classScore;

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
    if (content.includes('async') && content.includes('await')) logicScore += 10;
    if (content.includes('try') && content.includes('catch')) logicScore += 8;
    if (content.includes('class') && content.includes('constructor')) logicScore += 12;
    if (content.includes('module.exports') || content.includes('export')) logicScore += 5;

    functionalityScore = logicScore * 0.8;

    if (content.includes('test') || content.includes('describe')) functionalityScore += 10;
    if (content.includes('console.log') || content.includes('logger')) functionalityScore += 5;

    // –ö–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    const multipliers = {
      testing: { logic: 1.1, functionality: 1.2 },
      security: { logic: 1.05, functionality: 1.1 },
      ai: { logic: 1.15, functionality: 1.1 },
    };

    const multiplier = multipliers[component.category] || { logic: 1.0, functionality: 1.0 };
    logicScore *= multiplier.logic;
    functionalityScore *= multiplier.functionality;

    return {
      logic: Math.min(Math.max(Math.round(logicScore), 10), 98),
      functionality: Math.min(Math.max(Math.round(functionalityScore), 5), 95),
    };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  determineCategory(filePath, componentName) {
    const pathLower = filePath.toLowerCase();
    const nameLower = componentName.toLowerCase();

    if (pathLower.includes('test') || nameLower.includes('test') || nameLower.includes('jest'))
      return 'testing';
    if (pathLower.includes('security') || nameLower.includes('security')) return 'security';
    if (pathLower.includes('performance') || nameLower.includes('performance'))
      return 'performance';
    if (pathLower.includes('docker') || nameLower.includes('docker')) return 'docker';
    if (pathLower.includes('ai') || nameLower.includes('ai')) return 'ai';
    if (pathLower.includes('core') || pathLower.includes('orchestrator')) return 'core';
    if (pathLower.includes('architecture')) return 'architecture';
    if (nameLower.includes('dependencies')) return 'dependencies';
    if (nameLower.includes('logging')) return 'logging';
    if (nameLower.includes('quality')) return 'code-quality';

    return 'core';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   */
  extractComponentName(filePath) {
    return path.basename(filePath, path.extname(filePath)).replace(/[-_]/g, '');
  }

  /**
   * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  calculateStatistics(components) {
    const componentList = Object.values(components);
    const totalComponents = componentList.length;

    if (totalComponents === 0) {
      return {
        total: 0,
        avgLogic: 0,
        avgFunctionality: 0,
        ready: 0,
        inProgress: 0,
        planned: 0,
        categories: {},
      };
    }

    const totalLogic = componentList.reduce((sum, comp) => sum + comp.logic, 0);
    const totalFunctionality = componentList.reduce((sum, comp) => sum + comp.functionality, 0);

    const avgLogic = totalLogic / totalComponents;
    const avgFunctionality = totalFunctionality / totalComponents;

    let ready = 0,
      inProgress = 0,
      planned = 0;
    componentList.forEach(comp => {
      const overall = (comp.logic + comp.functionality) / 2;
      if (overall >= 90) ready++;
      else if (overall >= 50) inProgress++;
      else planned++;
    });

    const categories = {};
    componentList.forEach(comp => {
      if (!categories[comp.category]) {
        categories[comp.category] = { count: 0, avgLogic: 0, avgFunctionality: 0 };
      }
      categories[comp.category].count++;
      categories[comp.category].avgLogic += comp.logic;
      categories[comp.category].avgFunctionality += comp.functionality;
    });

    Object.values(categories).forEach(cat => {
      cat.avgLogic = Math.round(cat.avgLogic / cat.count);
      cat.avgFunctionality = Math.round(cat.avgFunctionality / cat.count);
    });

    return {
      total: totalComponents,
      avgLogic,
      avgFunctionality,
      ready,
      inProgress,
      planned,
      categories,
    };
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
   */
  async createReport(components, statistics) {
    const timestamp = new Date().toLocaleDateString('ru-RU');
    const componentsByCategory = this.groupByCategory(components);

    let report = `# üìã EAP ANALYZER - –ü–û–õ–ù–´–ô –ö–ê–¢–ê–õ–û–ì –ö–û–ú–ü–û–ù–ï–ù–¢–û–í

*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${timestamp}*

## üìä –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –ì–û–¢–û–í–ù–û–°–¢–ò

- **–ü–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞**: –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ª–æ–≥–∏–∫–∏ (% —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
- **–í—Ç–æ—Ä–∞—è —Ü–∏—Ñ—Ä–∞**: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (% —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏)

## üìà –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
- **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:** ${statistics.total}
- **–°—Ä–µ–¥–Ω—è—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ª–æ–≥–∏–∫–∏:** ${statistics.avgLogic.toFixed(1)}%
- **–°—Ä–µ–¥–Ω—è—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:** ${statistics.avgFunctionality.toFixed(1)}%
- **–ì–æ—Ç–æ–≤—ã –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É (>90%):** ${statistics.ready} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- **–í –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (50-90%):** ${statistics.inProgress} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- **–í –ø–ª–∞–Ω–∞—Ö (<50%):** ${statistics.planned} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

---

## üéØ **–û–°–ù–û–í–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò –ê–ù–ê–õ–ò–ó–ê**

`;

    for (const [categoryKey, categoryComponents] of Object.entries(componentsByCategory)) {
      const categoryInfo = this.categories[categoryKey];
      const categoryStats = statistics.categories[categoryKey];

      if (!categoryInfo || !categoryStats) continue;

      report += `### ${Object.keys(componentsByCategory).indexOf(categoryKey) + 1}. ${categoryInfo.icon} **${categoryInfo.name.toUpperCase()}** [${categoryStats.avgLogic}% / ${categoryStats.avgFunctionality}%]

*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${categoryInfo.priority} | –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${categoryStats.count}*

`;

      categoryComponents.forEach(component => {
        report += `#### ${component.name}
- **–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ª–æ–≥–∏–∫–∏:** ${component.logic}%
- **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:** ${component.functionality}%
- **–§–∞–π–ª:** \`${component.file}\`
- **–û–ø–∏—Å–∞–Ω–∏–µ:** ${component.description}
- **–°—Ç—Ä–æ–∫ –∫–æ–¥–∞:** ${component.lines}
- **–§—É–Ω–∫—Ü–∏–π:** ${component.functions}

`;
      });

      report += `---

`;
    }

    report += `## –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π

### ${timestamp}
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${statistics.total} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- –°—Ä–µ–¥–Ω—è—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ${statistics.avgLogic.toFixed(1)}% / ${statistics.avgFunctionality.toFixed(1)}%

---

*–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π EAP Analyzer Report Generator*
`;

    return report;
  }

  /**
   * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
   */
  groupByCategory(components) {
    const grouped = {};

    Object.values(components).forEach(component => {
      const category = component.category;
      if (!grouped[category]) {
        grouped[category] = [];
      }
      grouped[category].push(component);
    });

    Object.values(grouped).forEach(categoryComponents => {
      categoryComponents.sort((a, b) => {
        const overallA = (a.logic + a.functionality) / 2;
        const overallB = (b.logic + b.functionality) / 2;
        return overallB - overallA;
      });
    });

    return grouped;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
   */
  async getAllFiles(dir, extensions = []) {
    const files = [];

    try {
      const entries = await fs.readdir(dir, { withFileTypes: true });

      for (const entry of entries) {
        const fullPath = path.join(dir, entry.name);

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if (entry.isDirectory()) {
          if (
            entry.name.startsWith('.') ||
            entry.name === 'node_modules' ||
            entry.name === 'dist' ||
            entry.name === 'build'
          ) {
            continue;
          }
          const subFiles = await this.getAllFiles(fullPath, extensions);
          files.push(...subFiles);
        } else if (entry.isFile()) {
          const ext = path.extname(entry.name);
          if (extensions.length === 0 || extensions.includes(ext)) {
            files.push(fullPath);
          }
        }
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    }

    return files;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
   */
  async ensureDirectoryExists(dirPath) {
    try {
      await fs.access(dirPath);
    } catch {
      await fs.mkdir(dirPath, { recursive: true });
    }
  }
}

// –ó–∞–ø—É—Å–∫
async function main() {
  try {
    const generator = new EAPReportGenerator();
    await generator.generateReport();
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = EAPReportGenerator;
