#!/usr/bin/env node

/**
 * ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
 * ‚ïë                   CONFIG SYNC UTILITY                        ‚ïë
 * ‚ïë          –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞            ‚ïë
 * ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
 */

const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
const SYNC_CONFIG = {
  sourceDir: '..', // –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
  targetDir: '../eap-analyzer', // –ü–∞–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
  criticalFiles: [
    'vitest.performance.config.ts',
    'vitest.config.ts',
    'package.json',
    'tsconfig.json',
  ],
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–∂–Ω–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞
 */
function needsSync(sourceFile, targetFile) {
  if (!fs.existsSync(targetFile)) {
    return { needed: true, reason: '–§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ target' };
  }

  const sourceStat = fs.statSync(sourceFile);
  const targetStat = fs.statSync(targetFile);

  if (sourceStat.mtime > targetStat.mtime) {
    return {
      needed: true,
      reason: `Source –Ω–æ–≤–µ–µ (${sourceStat.mtime.toISOString()} vs ${targetStat.mtime.toISOString()})`,
    };
  }

  if (sourceStat.size !== targetStat.size) {
    return {
      needed: true,
      reason: `–†–∞–∑–Ω—ã–π —Ä–∞–∑–º–µ—Ä (${sourceStat.size} vs ${targetStat.size} –±–∞–π—Ç)`,
    };
  }

  return { needed: false, reason: '–§–∞–π–ª—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã' };
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Ñ–∞–π–ª–∞
 */
function syncFile(sourceFile, targetFile) {
  try {
    fs.copyFileSync(sourceFile, targetFile);
    const stat = fs.statSync(targetFile);
    return {
      success: true,
      size: stat.size,
      timestamp: stat.mtime.toISOString(),
    };
  } catch (error) {
    return {
      success: false,
      error: error.message,
    };
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
function main() {
  console.log('üîÑ EAP Config Sync Utility');
  console.log('‚ïê'.repeat(50));

  let syncedCount = 0;
  let skippedCount = 0;
  let errorCount = 0;

  for (const filename of SYNC_CONFIG.criticalFiles) {
    const sourceFile = path.join(SYNC_CONFIG.sourceDir, filename);
    const targetFile = path.join(SYNC_CONFIG.targetDir, filename);

    console.log(`\\nüìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞: ${filename}`);

    if (!fs.existsSync(sourceFile)) {
      console.log(`   ‚ö†Ô∏è  Source —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${sourceFile}`);
      errorCount++;
      continue;
    }

    const syncCheck = needsSync(sourceFile, targetFile);

    if (syncCheck.needed) {
      console.log(`   üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: ${syncCheck.reason}`);

      const result = syncFile(sourceFile, targetFile);

      if (result.success) {
        console.log(`   ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: ${result.size} –±–∞–π—Ç, ${result.timestamp}`);
        syncedCount++;
      } else {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        errorCount++;
      }
    } else {
      console.log(`   ‚úÖ –ü—Ä–æ–ø—É—â–µ–Ω: ${syncCheck.reason}`);
      skippedCount++;
    }
  }

  console.log('\\n' + '‚ïê'.repeat(50));
  console.log('üìä –ò–¢–û–ì–û:');
  console.log(`   üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${syncedCount}`);
  console.log(`   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}`);
  console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);

  if (syncedCount > 0) {
    console.log('\\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ live-generator.cjs –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞');
  }

  if (errorCount > 0) {
    console.log('\\n‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –ï—Å—Ç—å –æ—à–∏–±–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏!');
    process.exit(1);
  } else {
    console.log('\\nüéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if (process.argv.includes('--help') || process.argv.includes('-h')) {
  console.log(`
üîÑ EAP Config Sync Utility

–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –º–µ–∂–¥—É –∫–æ—Ä–Ω–µ–º –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø–∞–ø–∫–æ–π eap-analyzer.

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
  node config-sync.cjs           # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  node config-sync.cjs --help    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
  node config-sync.cjs --dry-run # –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ (–Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å)

–§–ê–ô–õ–´ –î–õ–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:
${SYNC_CONFIG.criticalFiles.map(f => '  - ' + f).join('\\n')}
  `);
  process.exit(0);
}

if (process.argv.includes('--dry-run')) {
  console.log('üß™ DRY RUN MODE - –Ω–∏–∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–µ –±—É–¥—É—Ç –∏–∑–º–µ–Ω–µ–Ω—ã\\n');

  for (const filename of SYNC_CONFIG.criticalFiles) {
    const sourceFile = path.join(SYNC_CONFIG.sourceDir, filename);
    const targetFile = path.join(SYNC_CONFIG.targetDir, filename);

    if (fs.existsSync(sourceFile)) {
      const syncCheck = needsSync(sourceFile, targetFile);
      console.log(
        `üìÑ ${filename}: ${syncCheck.needed ? 'üîÑ SYNC NEEDED' : '‚úÖ OK'} - ${syncCheck.reason}`
      );
    } else {
      console.log(`üìÑ ${filename}: ‚ùå SOURCE NOT FOUND`);
    }
  }
  process.exit(0);
}

// –ó–∞–ø—É—Å–∫
main();
