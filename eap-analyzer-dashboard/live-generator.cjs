#!/usr/bin/env node

/**
 * EAP Analyzer Live Report Generator
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node live-generator.cjs
 */

const fs = require('fs');
const path = require('path');
const { smartComponentAnalyzer } = require('./smart-analyzer.cjs');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
function analyzeProjectFiles(projectPath = '..') {
  // –ò–ó–ú–ï–ù–ï–ù–û: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç
  const components = {};
  const categories = {
    testing: { totalLogic: 0, totalFunc: 0, count: 0, components: [] },
    security: { totalLogic: 0, totalFunc: 0, count: 0, components: [] },
    performance: { totalLogic: 0, totalFunc: 0, count: 0, components: [] },
    docker: { totalLogic: 0, totalFunc: 0, count: 0, components: [] },
    dependencies: { totalLogic: 0, totalFunc: 0, count: 0, components: [] },
    logging: { totalLogic: 0, totalFunc: 0, count: 0, components: [] },
    cicd: { totalLogic: 0, totalFunc: 0, count: 0, components: [] },
    codequality: { totalLogic: 0, totalFunc: 0, count: 0, components: [] },
    core: { totalLogic: 0, totalFunc: 0, count: 0, components: [] },
    ai: { totalLogic: 0, totalFunc: 0, count: 0, components: [] },
    architecture: { totalLogic: 0, totalFunc: 0, count: 0, components: [] },
    utils: { totalLogic: 0, totalFunc: 0, count: 0, components: [] },
    other: { totalLogic: 0, totalFunc: 0, count: 0, components: [] },
  };

  console.log(`üîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –≤: ${path.resolve(projectPath)}`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  if (!fs.existsSync(projectPath)) {
    console.log(`‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${projectPath} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...`);
    return generateTestData();
  }

  // –û–±—Ö–æ–¥ —Ñ–∞–π–ª–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑
  function traverseDirectory(dir, relativePath = '') {
    try {
      const files = fs.readdirSync(dir);

      for (const file of files) {
        const fullPath = path.join(dir, file);
        const relativeFilePath = path.join(relativePath, file);

        try {
          const stat = fs.statSync(fullPath);

          if (stat.isDirectory()) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º node_modules –∏ –¥—Ä—É–≥–∏–µ —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏
            // –ò—Å–∫–ª—é—á–∞–µ–º –≤—Å–µ dist-* –ø–∞–ø–∫–∏ (dist, dist-cjs, dist-esm –∏ —Ç.–¥.)
            const shouldSkipDir =
              [
                'node_modules',
                '.git',
                'coverage',
                '.nyc_output',
                'build',
                'out',
                'target',
                '.next',
                '.cache',
                '.svelte-kit',
                'test-results',
                'logs',
                'reports',
                'data',
                'assets',
                'static',
                'docker',
                'docs',
                'emt-v3-stable-clean',
                'testing-integration-package',
                'eap-analyzer-dashboard', // –ù–ï –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∞–º—É dashboard
              ].includes(file) || file.startsWith('dist');

            if (!shouldSkipDir) {
              traverseDirectory(fullPath, relativeFilePath);
            }
          } else if (
            file.endsWith('.js') ||
            file.endsWith('.cjs') ||
            file.endsWith('.mjs') ||
            file.endsWith('.ts') ||
            file.endsWith('.tsx') ||
            file.endsWith('.jsx') ||
            file.endsWith('.vue') ||
            file.endsWith('.svelte') ||
            file.endsWith('.py') ||
            file.endsWith('.java') ||
            file.endsWith('.cs') ||
            file.endsWith('.php') ||
            file.endsWith('.rb') ||
            file.endsWith('.go') ||
            file.endsWith('.rs') ||
            file.endsWith('.cpp') ||
            file.endsWith('.c') ||
            file.endsWith('.h') ||
            file.endsWith('.hpp') ||
            file.endsWith('.yml') ||
            file.endsWith('.yaml') ||
            file.endsWith('.json') ||
            file.endsWith('.md') ||
            file.endsWith('.dockerfile') ||
            file === 'Dockerfile'
          ) {
            const content = fs.readFileSync(fullPath, 'utf8');
            const componentData = analyzeFile(file, relativeFilePath, content, stat);

            if (componentData) {
              const key = componentData.name.replace(/[^a-zA-Z0-9]/g, '');
              components[key] = componentData;

              // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
              const cat = categories[componentData.category];
              if (cat) {
                cat.totalLogic += componentData.logic;
                cat.totalFunc += componentData.functionality;
                cat.count++;
                cat.components.push(componentData);
              }
            }
          }
        } catch (fileError) {
          console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${fullPath}: ${fileError.message}`);
        }
      }
    } catch (dirError) {
      console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dir}: ${dirError.message}`);
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è demo/test/example –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  function isDemoOrExampleComponent(filename, filepath, content) {
    const lowerPath = filepath.toLowerCase();
    const lowerContent = content.toLowerCase();

    // Path-based patterns –¥–ª—è demo/test –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const demoPatterns = [
      'tests/components/', // TestButton.svelte –∏ –ø–æ–¥–æ–±–Ω—ã–µ
      'examples/',
      'demo/',
      '.example.',
      '.demo.',
      'sample/',
      'playground/',
    ];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º path patterns
    for (const pattern of demoPatterns) {
      if (lowerPath.includes(pattern)) {
        return true;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º comment markers (@demo, @example)
    if (lowerContent.includes('@demo') || lowerContent.includes('@example')) {
      return true;
    }

    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (TestButton.svelte –∏ –ø–æ–¥–æ–±–Ω—ã–µ)
    const demoFilePatterns = [
      /^test.*\.(svelte|vue|jsx|tsx)$/i, // TestButton.svelte, TestComponent.jsx
      /.*\.example\./i, // Button.example.js
      /.*\.demo\./i, // Component.demo.tsx
      /^demo.*\./i, // DemoButton.js
      /^sample.*\./i, // SampleComponent.ts
    ];

    for (const pattern of demoFilePatterns) {
      if (pattern.test(filename)) {
        return true;
      }
    }

    return false;
  }

  // –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  function analyzeFile(filename, filepath, content, stat) {
    try {
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
      // –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª—ã –º–µ–Ω—å—à–µ 100 –±–∞–π—Ç –∏–ª–∏ –º–µ–Ω–µ–µ 5 —Å—Ç—Ä–æ–∫
      const lines = content.split('\n');
      if (stat.size < 100 || lines.length < 5) {
        return null;
      }

      // –ò—Å–∫–ª—é—á–∞–µ–º source map —Ñ–∞–π–ª—ã –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∏—Ö
      if (
        filename.endsWith('.map') ||
        filename.endsWith('.js.map') ||
        content.trim().startsWith('# sourceMappingURL=') ||
        content.trim().startsWith('//# sourceMappingURL=')
      ) {
        return null;
      }

      // –ò—Å–∫–ª—é—á–∞–µ–º –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      if (
        filename.includes('.min.') ||
        filename.includes('.bundle.') ||
        (lines.length < 10 && content.length > 1000)
      ) {
        return null;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
      let category = 'utils'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const lowerPath = filepath.toLowerCase();
      const lowerContent = content.toLowerCase();

      // –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ demo/example –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ü–ï–†–í–´–ú (–ø–µ—Ä–µ–¥ testing)
      if (isDemoOrExampleComponent(filename, filepath, content)) {
        category = 'other';
      } else if (
        lowerPath.includes('test') ||
        lowerPath.includes('spec') ||
        filename.includes('.test.') ||
        filename.includes('.spec.')
      ) {
        category = 'testing';
      } else if (
        lowerPath.includes('security') ||
        lowerContent.includes('security') ||
        lowerContent.includes('vulnerability')
      ) {
        category = 'security';
      } else if (
        lowerPath.includes('performance') ||
        lowerPath.includes('perf') ||
        lowerContent.includes('performance')
      ) {
        category = 'performance';
      } else if (
        lowerPath.includes('docker') ||
        lowerContent.includes('docker') ||
        filename === 'dockerfile'
      ) {
        category = 'docker';
      } else if (
        lowerPath.includes('dependencies') ||
        lowerPath.includes('deps') ||
        filename === 'package.json'
      ) {
        category = 'dependencies';
      } else if (
        lowerPath.includes('log') ||
        lowerContent.includes('logger') ||
        lowerContent.includes('winston')
      ) {
        category = 'logging';
      } else if (
        lowerPath.includes('ci') ||
        lowerPath.includes('cd') ||
        filename.includes('.yml') ||
        filename.includes('.yaml')
      ) {
        category = 'cicd';
      } else if (
        lowerPath.includes('quality') ||
        lowerPath.includes('lint') ||
        lowerContent.includes('eslint')
      ) {
        category = 'codequality';
      } else if (
        lowerPath.includes('core') ||
        lowerPath.includes('analyzer') ||
        lowerPath.includes('checker') ||
        lowerContent.includes('class ')
      ) {
        category = 'core';
      } else if (
        lowerPath.includes('ai') ||
        lowerPath.includes('insight') ||
        lowerContent.includes('machine learning')
      ) {
        category = 'ai';
      } else if (
        lowerPath.includes('architecture') ||
        lowerPath.includes('structure') ||
        lowerContent.includes('architecture')
      ) {
        category = 'architecture';
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
      const smartAnalysis = smartComponentAnalyzer(filename, filepath, content, stat);

      const logic = smartAnalysis.logicScore;
      const functionality = smartAnalysis.functionalityScore;

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      const componentName = extractComponentName(filename, content);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
      const logicIssues = smartAnalysis.logicIssues;
      const functionalityIssues = smartAnalysis.functionalityIssues;

      return {
        name: componentName,
        category,
        logic,
        functionality,
        file: filepath.replace(/\\/g, '/'),
        description: extractDescription(content),
        tests: countTests(content),
        lastModified: new Date(stat.mtime).toISOString().split('T')[0],
        fileSize: stat.size,
        lines: content.split('\n').length,
        logicIssues,
        functionalityIssues,
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        logicIssue: logicIssues[0] || '–ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º',
        functionalityIssue: functionalityIssues[0] || '–ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º',
      };
    } catch (error) {
      console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ ${filename}: ${error.message}`);
      return null;
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
  function calculateLogicReadiness(content, stat) {
    let score = 50; // –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª

    // –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–±–æ–ª—å—à–µ = –±–æ–ª–µ–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π)
    if (stat.size > 5000) score += 15;
    else if (stat.size > 2000) score += 10;
    else if (stat.size > 500) score += 5;

    // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if (content.includes('class ')) score += 10;
    if (content.includes('async ')) score += 5;
    if (content.includes('try ') && content.includes('catch')) score += 10;
    if (content.includes('/**')) score += 5; // JSDoc –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    if (content.includes('module.exports') || content.includes('export ')) score += 5;

    // –®—Ç—Ä–∞—Ñ—ã
    if (content.includes('TODO')) score -= 5;
    if (content.includes('FIXME')) score -= 10;
    if (content.includes('console.log')) score -= 2;

    return Math.max(30, Math.min(95, score));
  }

  function calculateFunctionality(content, stat) {
    let score = 45; // –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª

    // –ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–π
    const functionMatches = content.match(/function\s+\w+/g) || [];
    score += Math.min(functionMatches.length * 3, 20);

    // –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–¥–æ–≤ –≤ –∫–ª–∞—Å—Å–∞—Ö
    const methodMatches = content.match(/\w+\s*\([^)]*\)\s*{/g) || [];
    score += Math.min(methodMatches.length * 2, 15);

    // –ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤
    const testMatches =
      (content.match(/test\(/g) || []).length + (content.match(/it\(/g) || []).length;
    score += Math.min(testMatches * 5, 25);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    if (content.includes('return ')) score += 5;
    if (content.includes('if (') || content.includes('if(')) score += 5;
    if (content.includes('for (') || content.includes('forEach')) score += 5;

    // –®—Ç—Ä–∞—Ñ—ã
    if (content.includes('throw new Error')) score -= 3;
    if (content.includes('// TODO')) score -= 5;

    return Math.max(25, Math.min(92, score));
  }

  function extractComponentName(filename, content) {
    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–º—è –∫–ª–∞—Å—Å–∞
    const classMatch = content.match(/class\s+(\w+)/);
    if (classMatch) return classMatch[1];

    // –ò–ª–∏ –∏–∑ module.exports
    const exportsMatch = content.match(/module\.exports\s*=\s*(\w+)/);
    if (exportsMatch) return exportsMatch[1];

    // –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ (–æ—á–∏—â–µ–Ω–Ω–æ–µ)
    return filename.replace(/\.(js|cjs|mjs)$/, '').replace(/[^a-zA-Z0-9]/g, '');
  }

  function extractDescription(content) {
    // –ò—â–µ–º JSDoc –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    const jsdocMatch = content.match(/\/\*\*\s*(.*?)\s*\*\//s);
    if (jsdocMatch) {
      return jsdocMatch[1].replace(/\*/g, '').replace(/\n/g, ' ').trim().substring(0, 100);
    }

    // –ò—â–µ–º –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
    const commentMatch = content.match(/^\/\/\s*(.*?)$/m);
    if (commentMatch) {
      return commentMatch[1].trim().substring(0, 100);
    }

    return 'EAP Analyzer –∫–æ–º–ø–æ–Ω–µ–Ω—Ç';
  }

  function countTests(content) {
    const testMatches = (content.match(/test\(/g) || []).length;
    const itMatches = (content.match(/it\(/g) || []).length;
    const describeMatches = (content.match(/describe\(/g) || []).length;

    const total = testMatches + itMatches + describeMatches;
    return total > 0 ? `${total} —Ç–µ—Å—Ç–æ–≤` : '–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤';
  }

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–≤
  function identifyLogicIssue(content, category, filepath) {
    const lowerContent = content.toLowerCase();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ
    if (content.includes('TODO:') || content.includes('FIXME:')) {
      const todoMatch = content.match(/TODO:\s*([^;\n\r]+)/i);
      if (todoMatch) return todoMatch[1].trim().substring(0, 80);

      const fixmeMatch = content.match(/FIXME:\s*([^;\n\r]+)/i);
      if (fixmeMatch) return fixmeMatch[1].trim().substring(0, 80);
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–æ–±–ª–µ–º
    if (content.includes('try {') && !content.includes('catch (')) {
      return '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ –±–ª–æ–∫–µ try';
    }

    if (lowerContent.includes('eval(') || lowerContent.includes('function(')) {
      return '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –≤—ã–∑–æ–≤–æ–≤';
    }

    if (content.match(/if\s*\([^{]+\)\s*[^{]/)) {
      return '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –±–ª–æ–∫–∏ {} –¥–ª—è —É—Å–ª–æ–≤–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π';
    }

    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ –ª–æ–≥–∏–∫–∏
    const logicIssues = {
      testing: [
        '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞–µ–≤',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤',
        '–ù–µ–ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π',
        '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤',
        '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
      ],
      security: [
        '–£—è–∑–≤–∏–º–æ—Å—Ç—å –∫ XSS –∞—Ç–∞–∫–∞–º —á–µ—Ä–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤',
        '–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
        '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç SQL-–∏–Ω—ä–µ–∫—Ü–∏–π',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞',
      ],
      performance: [
        '–ù–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å –≤—ã—Å–æ–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
        '–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫',
        '–ò–∑–±—ã—Ç–æ—á–Ω—ã–µ –≤—ã–∑–æ–≤—ã –≤–Ω–µ—à–Ω–∏—Ö API',
        '–ù–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏',
      ],
      docker: [
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç health check –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞',
        '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ root –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ',
        '–ù–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä Docker –æ–±—Ä–∞–∑–∞',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç multi-stage —Å–±–æ—Ä–∫–∞',
        '–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è',
      ],
      core: [
        '–ò–∑–±—ã—Ç–æ—á–Ω–∞—è —Å–≤—è–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏',
        '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π',
        '–ñ–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è',
        '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –º–æ–¥—É–ª—å–Ω–æ—Å—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã',
      ],
      logging: [
        '–ò–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ–¥–ª—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É—Ä–æ–≤–Ω–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π',
        '–õ–æ–≥–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
        '–ù–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–æ—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤',
      ],
      cicd: [
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —ç—Ç–∞–ø—ã –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ',
        '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–∫–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö',
        '–ù–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–µ—Ç–≤–ª–µ–Ω–∏—è',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞',
      ],
      codequality: [
        '–í—ã—Å–æ–∫–∞—è —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π',
        '–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–æ–¥—É–ª—è—Ö',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–µ',
        '–ù–µ—Å–æ–±–ª—é–¥–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è',
        '–ù–µ–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö',
      ],
      ai: [
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö',
        '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π',
        '–ù–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥—Ä–µ–π—Ñ–∞ –º–æ–¥–µ–ª–∏',
      ],
      architecture: [
        '–ú–æ–Ω–æ–ª–∏—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Å–ª–æ–∏ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏',
        '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ SOLID',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π',
        '–ù–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
      ],
      dependencies: [
        '–£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –≤–µ—Ä—Å–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤',
        '–ò–∑–±—ã—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤–µ—Ä—Å–∏–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π',
        '–£—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ö',
        '–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç —Ä–∞–∑–º–µ—Ä',
      ],
      utils: [
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤',
        '–ù–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤',
        '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API',
        '–°–º–µ—à–∏–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏',
      ],
    };

    const issues = logicIssues[category] || logicIssues.utils;
    return issues[Math.floor(Math.random() * issues.length)];
  }

  function identifyFunctionalityIssue(content, category, filepath) {
    const lowerContent = content.toLowerCase();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    if (content.includes('console.log') || content.includes('console.debug')) {
      return '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –≤—ã–≤–æ–¥—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º';
    }

    if (lowerContent.includes('settimeout') && !lowerContent.includes('cleartimeout')) {
      return '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏ –∏–∑-–∑–∞ –Ω–µ–æ—á–∏—â–µ–Ω–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤';
    }

    if (!content.includes('throw new Error') && !content.includes('reject(')) {
      return '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫';
    }

    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    const functionalityIssues = {
      testing: [
        '–ù–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–∫–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π',
        '–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö',
        '–ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤',
      ],
      security: [
        '–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HTTPS –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
        '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –±—Ä—É—Ç—Ñ–æ—Ä—Å –∞—Ç–∞–∫',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–π',
        '–°–ª–∞–±–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –ø–∞—Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
      ],
      performance: [
        '–í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏',
        '–ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫ –ø—Ä–∏ –ø–∏–∫–æ–≤—ã—Ö –Ω–∞–≥—Ä—É–∑–∫–∞—Ö',
        '–ù–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ',
        '–ë–ª–æ–∫–∏—Ä—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞',
      ],
      docker: [
        '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π —Å—Ä–µ–¥–µ',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç graceful shutdown –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ',
        '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã',
        '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞',
      ],
      core: [
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π',
        '–ù–µ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–±–æ—è–º',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫',
        '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã',
        '–°–ª–æ–∂–Ω–æ—Å—Ç—å –≤ –æ—Ç–ª–∞–¥–∫–µ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –ø—Ä–æ–±–ª–µ–º',
      ],
      logging: [
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–±–æ—Ä –ª–æ–≥–æ–≤',
        '–ù–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∞–ª–µ—Ä—Ç—ã –ø–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–±—ã—Ç–∏—è–º',
        '–õ–æ–≥–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
        '–°–ª–æ–∂–Ω–æ—Å—Ç—å –≤ –ø–æ–∏—Å–∫–µ –∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–±—ã—Ç–∏–π',
      ],
      cicd: [
        '–î–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–µ–ø–ª–æ—è',
        '–ù–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—Ç–∫–∞—Ç–∞ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö',
        '–†—É—á–Ω—ã–µ —ç—Ç–∞–ø—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º',
      ],
      codequality: [
        '–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞–º–∏',
        '–ß–∞—Å—Ç—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø—Ä–∏ —Å–ª–∏—è–Ω–∏–∏ –∫–æ–¥–∞',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è',
        '–°–ª–æ–∂–Ω–æ—Å—Ç—å –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –∫–æ–¥–∞',
        '–í—ã—Å–æ–∫–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞',
      ],
      ai: [
        '–ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
        '–î–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤',
        '–ù–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤',
        '–°–ª–æ–∂–Ω–æ—Å—Ç—å –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–æ–¥–µ–ª–∏',
      ],
      architecture: [
        '–°–ª–æ–∂–Ω–æ—Å—Ç—å –≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏',
        '–í—ã—Å–æ–∫–∞—è —Å–≤—è–∑–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤',
        '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è –æ—Ç–∫–∞–∑–æ–≤',
        '–°–ª–æ–∂–Ω–æ—Å—Ç—å –≤ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π',
      ],
      dependencies: [
        '–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤–µ—Ä—Å–∏–π –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞–∫–µ—Ç–æ–≤',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π',
        '–î–ª–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ —á–∏—Å–ª–∞ –ø–∞–∫–µ—Ç–æ–≤',
        '–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∑–µ—Ä–∫–∞–ª–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤',
      ],
      utils: [
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π',
        '–ù–µ–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö',
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤',
        '–°–ª–æ–∂–Ω–æ—Å—Ç—å –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏',
        '–ù–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã',
      ],
    };

    const issues = functionalityIssues[category] || functionalityIssues.utils;
    return issues[Math.floor(Math.random() * issues.length)];
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ö–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞
  traverseDirectory(projectPath);

  // –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  Object.keys(categories).forEach(key => {
    const cat = categories[key];
    if (cat.count > 0) {
      cat.avgLogic = Math.round(cat.totalLogic / cat.count);
      cat.avgFunc = Math.round(cat.totalFunc / cat.count);
    } else {
      cat.avgLogic = 0;
      cat.avgFunc = 0;
    }
  });

  console.log(`‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${Object.keys(components).length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`);

  return { components, categories };
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
function identifyMultipleLogicIssues(content, category, filepath, logicScore) {
  const issues = [];

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
  let issueCount = 1;
  if (logicScore <= 30) {
    issueCount = Math.floor(Math.random() * 3) + 3; // 3-5 –ø—Ä–æ–±–ª–µ–º –¥–ª—è –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ–π –ª–æ–≥–∏–∫–∏
  } else if (logicScore <= 50) {
    issueCount = Math.floor(Math.random() * 2) + 2; // 2-3 –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –ø–ª–æ—Ö–æ–π –ª–æ–≥–∏–∫–∏
  } else if (logicScore <= 70) {
    issueCount = Math.floor(Math.random() * 2) + 1; // 1-2 –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è —Å—Ä–µ–¥–Ω–µ–π –ª–æ–≥–∏–∫–∏
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø—É–ª–∞
  const logicIssuesPool = {
    testing: [
      '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ edge cases',
      '–ù–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
      '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏',
      '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤',
      '–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö',
      '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
      '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–µ',
      '–ù–µ—Å–æ–±–ª—é–¥–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è',
    ],
    security: [
      '–£—è–∑–≤–∏–º–æ—Å—Ç–∏ –∫ –∏–Ω—ä–µ–∫—Ü–∏–∏ SQL',
      '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
      '–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π',
      '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞',
      '–£—è–∑–≤–∏–º–æ—Å—Ç–∏ –∫ XSS –∞—Ç–∞–∫–∞–º',
      '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ CORS',
      '–°–ª–∞–±—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è',
      '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
    ],
    performance: [
      '–ù–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏',
      '–£—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–æ–ª—å—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏',
      '–ù–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ü–∏–∫–ª—ã –∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏',
      '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
      '–ù–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
      '–ë–ª–æ–∫–∏—Ä—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ',
      '–ò–∑–±—ã—Ç–æ—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤',
      '–ù–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ–∏—Å–∫–∞',
    ],
    core: [
      '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ SOLID',
      '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π',
      '–¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏',
      '–ù–µ–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ API',
      '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
      '–°–º–µ—à–∏–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ —Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º',
      '–ù–µ–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö',
      '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∫ –∫–æ–¥—É',
    ],
  };

  const categoryIssues = logicIssuesPool[category] || logicIssuesPool.core;

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
  const usedIssues = new Set();
  for (let i = 0; i < issueCount && usedIssues.size < categoryIssues.length; i++) {
    let randomIssue;
    do {
      randomIssue = categoryIssues[Math.floor(Math.random() * categoryIssues.length)];
    } while (usedIssues.has(randomIssue));

    usedIssues.add(randomIssue);
    issues.push(randomIssue);
  }

  return issues;
}

function identifyMultipleFunctionalityIssues(content, category, filepath, functionalityScore) {
  const issues = [];

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
  let issueCount = 1;
  if (functionalityScore <= 30) {
    issueCount = Math.floor(Math.random() * 3) + 3; // 3-5 –ø—Ä–æ–±–ª–µ–º –¥–ª—è –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
  } else if (functionalityScore <= 50) {
    issueCount = Math.floor(Math.random() * 2) + 2; // 2-3 –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –ø–ª–æ—Ö–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
  } else if (functionalityScore <= 70) {
    issueCount = Math.floor(Math.random() * 2) + 1; // 1-2 –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è —Å—Ä–µ–¥–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø—É–ª–∞
  const functionalityIssuesPool = {
    testing: [
      '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤',
      '–ù–µ–ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
      '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
      '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏',
      '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤',
      '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è',
      '–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö',
      '–ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞',
    ],
    security: [
      '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
      '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
      '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º',
      '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞',
      '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',
      '–£—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞',
      '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
      '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏',
    ],
    performance: [
      '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
      '–ù–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞',
      '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞',
      '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏',
      '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
      '–ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤',
      '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç CDN –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤',
      '–ù–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö',
    ],
    core: [
      '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ API',
      '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ—à–∏–±–æ–∫',
      '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ API',
      '–ù–µ–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö',
      '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π',
      '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
      '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤',
      '–ù–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤',
    ],
  };

  const categoryIssues = functionalityIssuesPool[category] || functionalityIssuesPool.core;

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
  const usedIssues = new Set();
  for (let i = 0; i < issueCount && usedIssues.size < categoryIssues.length; i++) {
    let randomIssue;
    do {
      randomIssue = categoryIssues[Math.floor(Math.random() * categoryIssues.length)];
    } while (usedIssues.has(randomIssue));

    usedIssues.add(randomIssue);
    issues.push(randomIssue);
  }

  return issues;
} // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
function generateTestData() {
  console.log('üß™ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

  const testComponents = {};
  const categories = {
    testing: { avgLogic: 88, avgFunc: 85, count: 8, components: [] },
    security: { avgLogic: 85, avgFunc: 82, count: 7, components: [] },
    performance: { avgLogic: 78, avgFunc: 75, count: 3, components: [] },
    core: { avgLogic: 82, avgFunc: 78, count: 6, components: [] },
  };

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  const testData = [
    {
      name: 'TestingAnalyzer',
      category: 'testing',
      logic: 90,
      func: 85,
      logicIssue: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞–µ–≤',
      functionalityIssue: '–ù–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
    },
    {
      name: 'SecurityChecker',
      category: 'security',
      logic: 85,
      func: 80,
      logicIssue: '–£—è–∑–≤–∏–º–æ—Å—Ç—å –∫ XSS –∞—Ç–∞–∫–∞–º —á–µ—Ä–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥',
      functionalityIssue: '–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HTTPS –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö',
    },
    {
      name: 'PerformanceAnalyzer',
      category: 'performance',
      logic: 78,
      func: 75,
      logicIssue: '–ù–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å –≤—ã—Å–æ–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é',
      functionalityIssue: '–í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏',
    },
    {
      name: 'CoreAnalyzer',
      category: 'core',
      logic: 82,
      func: 78,
      logicIssue: '–ò–∑–±—ã—Ç–æ—á–Ω–∞—è —Å–≤—è–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏',
      functionalityIssue: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π',
    },
  ];

  testData.forEach(item => {
    testComponents[item.name] = {
      name: item.name,
      category: item.category,
      logic: item.logic,
      functionality: item.func,
      file: `eap-analyzer/${item.name.toLowerCase()}.js`,
      description: `–¢–µ—Å—Ç–æ–≤—ã–π ${item.name}`,
      tests: `${Math.floor(Math.random() * 15 + 5)} —Ç–µ—Å—Ç–æ–≤`,
      lastModified: new Date().toISOString().split('T')[0],
      fileSize: Math.floor(Math.random() * 15000 + 5000), // –°–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑–º–µ—Ä 5-20KB
      lines: Math.floor(Math.random() * 300 + 100), // –°–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ 100-400
      logicIssue: item.logicIssue,
      functionalityIssue: item.functionalityIssue,
    };
  });

  return { components: testComponents, categories };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è MD-–æ—Ç—á–µ—Ç–∞
function generateMarkdownReport(data) {
  const { components, categories } = data;
  let markdown = `# üìã EAP ANALYZER - LIVE –ê–ù–ê–õ–ò–ó –ü–†–û–ï–ö–¢–ê\n\n`;

  markdown += `## üìä –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –ì–û–¢–û–í–ù–û–°–¢–ò\n\n`;
  markdown += `> **–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:** ${new Date().toLocaleString('ru-RU')}\n\n`;
  markdown += `- **–ü–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞**: –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ª–æ–≥–∏–∫–∏ (% —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)\n`;
  markdown += `- **–í—Ç–æ—Ä–∞—è —Ü–∏—Ñ—Ä–∞**: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (% —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏)\n\n`;

  markdown += `## üéØ **–û–°–ù–û–í–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò –ê–ù–ê–õ–ò–ó–ê**\n\n`;

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const sortedCats = Object.entries(categories)
    .filter(([_, cat]) => cat.count > 0)
    .sort(([_, a], [__, b]) => b.avgLogic - a.avgLogic);

  sortedCats.forEach(([key, cat], index) => {
    markdown += `### ${index + 1}. ${getCategoryIcon(key)} **${getCategoryName(key)}** [${cat.avgLogic}% / ${cat.avgFunc}%]\n\n`;

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryComponents = Object.values(components)
      .filter(comp => comp.category === key)
      .sort((a, b) => b.logic - a.logic);

    categoryComponents.forEach(comp => {
      markdown += `- **${comp.name}** [${comp.logic}% / ${comp.functionality}%] - ${comp.description}\n`;
    });

    markdown += `\n**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n`;
    markdown += `- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${cat.count}\n`;
    markdown += `- –°—Ä–µ–¥–Ω—è—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ${cat.avgLogic}%\n`;
    markdown += `- –°—Ä–µ–¥–Ω—è—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${cat.avgFunc}%\n\n`;
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const totalComponents = Object.keys(components).length;
  const totalLogic = Object.values(components).reduce((sum, comp) => sum + comp.logic, 0);
  const totalFunc = Object.values(components).reduce((sum, comp) => sum + comp.functionality, 0);

  markdown += `## üìà **–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê**\n\n`;
  markdown += `- **–í—Å–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:** ${totalComponents}\n`;
  markdown += `- **–°—Ä–µ–¥–Ω—è—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ª–æ–≥–∏–∫–∏:** ${totalComponents ? Math.round(totalLogic / totalComponents) : 0}%\n`;
  markdown += `- **–°—Ä–µ–¥–Ω—è—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:** ${totalComponents ? Math.round(totalFunc / totalComponents) : 0}%\n`;
  markdown += `- **–ö–∞—Ç–µ–≥–æ—Ä–∏–π:** ${sortedCats.length}\n`;
  markdown += `- **–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:** ${new Date().toISOString().split('T')[0]}\n\n`;

  return markdown;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getCategoryIcon(category) {
  const icons = {
    testing: 'üß™',
    security: 'üîí',
    performance: '‚ö°',
    docker: 'üê≥',
    dependencies: 'üì¶',
    logging: 'üìù',
    cicd: 'üîÑ',
    codequality: '‚ú®',
    core: '‚öôÔ∏è',
    ai: 'ü§ñ',
    architecture: 'üèóÔ∏è',
    utils: 'üîß',
    other: 'üìÑ',
  };
  return icons[category] || 'üìÅ';
}

function getCategoryName(category) {
  const names = {
    testing: 'TESTING (–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)',
    security: 'SECURITY (–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)',
    performance: 'PERFORMANCE (–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)',
    docker: 'DOCKER (–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è)',
    dependencies: 'DEPENDENCIES (–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)',
    logging: 'LOGGING (–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)',
    cicd: 'CI/CD (–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è)',
    codequality: 'CODE QUALITY (–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞)',
    core: 'CORE (–Ø–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã)',
    ai: 'AI (–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç)',
    architecture: 'ARCHITECTURE (–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)',
    utils: 'UTILS (–£—Ç–∏–ª–∏—Ç—ã)',
    other: 'OTHER (–û—Å—Ç–∞–ª—å–Ω–æ–µ)',
  };
  return names[category] || category.toUpperCase();
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JavaScript —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö
function generateDataJs(data, classification = null) {
  const { components, categories } = data;

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ classification –∫ –∫–∞–∂–¥–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
  const componentsWithClassification = { ...components };
  if (classification) {
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é "analyzer"
    Object.keys(classification.analyzers).forEach(id => {
      if (componentsWithClassification[id]) {
        componentsWithClassification[id].classification = 'analyzer';
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é "auxiliary"
    Object.keys(classification.auxiliary).forEach(id => {
      if (componentsWithClassification[id]) {
        componentsWithClassification[id].classification = 'auxiliary';
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é "other"
    Object.keys(classification.other).forEach(id => {
      if (componentsWithClassification[id]) {
        componentsWithClassification[id].classification = 'other';
      }
    });
  }

  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è JS
  const jsCategories = {};
  Object.keys(categories).forEach(key => {
    const cat = categories[key];
    if (cat.count > 0) {
      jsCategories[key] = {
        name: getCategoryName(key),
        color: getCategoryColor(key),
        icon: getCategoryIcon(key),
        logic: cat.avgLogic,
        functionality: cat.avgFunc,
        count: cat.count,
        description: getCategoryDescription(key),
      };
    }
  });

  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —É—Ç–∏–ª–∏—Ç—ã
  const jsUtils = {
    getTopComponents: `function(componentsArray, limit = 10) {
      console.log('üîç DEBUG - getTopComponents called with:', componentsArray ? componentsArray.length : 'undefined', 'components, limit:', limit);

      const components = componentsArray || Object.values(window.EAP_DATA.components);
      console.log('üîç DEBUG - Using components array with length:', components.length);

      if (!components || components.length === 0) {
        console.warn('‚ö†Ô∏è No components to process in getTopComponents');
        return [];
      }

      const sorted = components
        .filter(comp => comp && typeof comp.logic === 'number' && typeof comp.functionality === 'number')
        .sort((a, b) => {
          const overallA = (a.logic + a.functionality) / 2;
          const overallB = (b.logic + b.functionality) / 2;
          return overallB - overallA;
        });

      console.log('üîç DEBUG - After filtering and sorting:', sorted.length, 'components');

      const result = sorted.slice(0, limit);
      console.log('üèÜ DEBUG - getTopComponents returning:', result.length, 'components');

      return result;
    }`,

    getBottomComponents: `function(componentsArray, limit = 10) {
      console.log('üîç DEBUG - getBottomComponents called with:', componentsArray ? componentsArray.length : 'undefined', 'components, limit:', limit);

      const components = componentsArray || Object.values(window.EAP_DATA.components);
      console.log('üîç DEBUG - Using components array with length:', components.length);

      if (!components || components.length === 0) {
        console.warn('‚ö†Ô∏è No components to process in getBottomComponents');
        return [];
      }

      const sorted = components
        .filter(comp => comp && typeof comp.logic === 'number' && typeof comp.functionality === 'number')
        .sort((a, b) => {
          const overallA = (a.logic + a.functionality) / 2;
          const overallB = (b.logic + b.functionality) / 2;
          return overallA - overallB;
        });

      console.log('üîç DEBUG - After filtering and sorting:', sorted.length, 'components');

      const result = sorted.slice(0, limit);
      console.log('üîß DEBUG - getBottomComponents returning:', result.length, 'components');

      return result;
    }`,

    getCategoryStats: `function(category) {
      const components = Object.values(window.EAP_DATA.components);
      const categoryComponents = components.filter(c => c.category === category);

      if (categoryComponents.length === 0) return null;

      const totalLogic = categoryComponents.reduce((sum, c) => sum + c.logic, 0);
      const totalFunc = categoryComponents.reduce((sum, c) => sum + c.functionality, 0);

      return {
        count: categoryComponents.length,
        avgLogic: Math.round(totalLogic / categoryComponents.length),
        avgFunc: Math.round(totalFunc / categoryComponents.length),
        components: categoryComponents
      };
    }`,
  };

  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∞–Ω–Ω—ã—Ö
  const today = new Date().toISOString().split('T')[0];
  const jsHistory = {
    [today]: {
      avgLogic: Math.round(
        Object.values(components).reduce((sum, c) => sum + c.logic, 0) /
          Object.keys(components).length
      ),
      avgFunctionality: Math.round(
        Object.values(components).reduce((sum, c) => sum + c.functionality, 0) /
          Object.keys(components).length
      ),
      totalComponents: Object.keys(components).length,
      changes: [
        'Live-–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω',
        `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(components).length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`,
        '–î–æ–±–∞–≤–ª–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞',
      ],
      source: 'live-analysis',
    },
  };

  const jsContent = `// EAP Analyzer Dashboard Data
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω live-generator.cjs
// –î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${new Date().toLocaleString('ru-RU')}

window.EAP_DATA = {
  components: ${JSON.stringify(componentsWithClassification, null, 2)},

  categories: ${JSON.stringify(jsCategories, null, 2)},

  history: ${JSON.stringify(jsHistory, null, 2)},

  classification: ${
    classification
      ? JSON.stringify(
          {
            analyzers: Object.keys(classification.analyzers),
            auxiliary: Object.keys(classification.auxiliary),
            other: Object.keys(classification.other),
            stats: {
              analyzersCount: Object.keys(classification.analyzers).length,
              auxiliaryCount: Object.keys(classification.auxiliary).length,
              otherCount: Object.keys(classification.other).length,
            },
          },
          null,
          2
        )
      : 'null'
  },

  utils: {
    getTopComponents: ${jsUtils.getTopComponents},
    getBottomComponents: ${jsUtils.getBottomComponents},
    getCategoryStats: ${jsUtils.getCategoryStats}
  }
};

console.log('‚úÖ EAP Dashboard –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (' + Object.keys(window.EAP_DATA.components).length + ' –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)');
`;

  return jsContent;
}

function getCategoryColor(key) {
  const colors = {
    testing: '#28a745',
    security: '#dc3545',
    performance: '#17a2b8',
    docker: '#0d6efd',
    dependencies: '#6610f2',
    logging: '#fd7e14',
    cicd: '#198754',
    codequality: '#6f42c1',
    core: '#495057',
    ai: '#e91e63',
    architecture: '#795548',
    utils: '#6c757d',
    other: '#adb5bd',
  };
  return colors[key] || '#6c757d';
}

function getCategoryDescription(key) {
  const descriptions = {
    testing: '–ú–æ–¥—É–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞',
    security: '–ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π',
    performance: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
    docker: '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è –∏ Docker',
    dependencies: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏',
    logging: '–°–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è',
    cicd: '–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è',
    codequality: '–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –∏ –ª–∏–Ω—Ç–∏–Ω–≥',
    core: '–û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞',
    ai: '–ò–ò –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ',
    architecture: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è',
    utils: '–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã',
    other: 'Demo, –ø—Ä–∏–º–µ—Ä—ã –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã',
  };
  return descriptions[key] || '–ü—Ä–æ—á–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã';
}

// –§—É–Ω–∫—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø—É —É—á–∞—Å—Ç–∏—è –≤ –∞–Ω–∞–ª–∏–∑–µ
function classifyComponents(components) {
  console.log('üîç –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø—É —É—á–∞—Å—Ç–∏—è –≤ –∞–Ω–∞–ª–∏–∑–µ...');

  const analyzers = {};
  const auxiliary = {};
  const other = {}; // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ tests –≤ other

  const total = Object.keys(components).length;
  let processed = 0;

  Object.entries(components).forEach(([id, comp]) => {
    processed++;
    const name = (comp.name || '').toLowerCase();
    const file = (comp.file || '').toLowerCase();
    const desc = (comp.description || '').toLowerCase();

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—ã–µ 50 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    if (processed % 50 === 0) {
      console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processed}/${total} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...`);
    }

    // 1. –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º "–¥—Ä—É–≥–∏–µ" –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è, –∫–æ–Ω—Ñ–∏–≥–∏, –Ω–µ-–∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã)
    if (
      // MD —Ñ–∞–π–ª—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
      file.endsWith('.md') ||
      file.endsWith('.txt') ||
      file.endsWith('.rst') ||
      file.endsWith('.pdf') ||
      file.endsWith('.doc') ||
      file.endsWith('.docx') ||
      // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–∏—Å–∫–ª—é—á–∞—è –≤–∞–∂–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏)
      (file.endsWith('.json') &&
        !file.includes('package.json') &&
        !file.includes('tsconfig') &&
        !file.includes('jest.config') &&
        !file.includes('vite.config') &&
        !file.includes('playwright.config')) ||
      file.endsWith('.yml') ||
      file.endsWith('.yaml') ||
      file.endsWith('.toml') ||
      file.endsWith('.ini') ||
      file.endsWith('.cfg') ||
      file.endsWith('.conf') ||
      // –î—Ä—É–≥–∏–µ –Ω–µ-–∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã
      file.endsWith('.gitignore') ||
      file.endsWith('.gitattributes') ||
      file.endsWith('.npmrc') ||
      file.endsWith('.nvmrc') ||
      file.endsWith('license') ||
      file.endsWith('readme') ||
      // –ü—Ä–æ—Å—Ç—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã (–º–µ–Ω—å—à–µ 50 —Å—Ç—Ä–æ–∫)
      (comp.lines < 50 &&
        (name.includes('setup') ||
          name.includes('helper') ||
          name.includes('util') ||
          name.includes('config'))) ||
      // –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–∏—Å–∫–ª—é—á–∞—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –∏ –∏—Ö —Ç–µ—Å—Ç—ã)
      ((file.includes('/test/') ||
        file.includes('/spec/') ||
        file.includes('/mock/') ||
        file.includes('__tests__') ||
        name.includes('mock') ||
        name.includes('fixture')) &&
        !name.includes('analyzer') &&
        !name.includes('checker') &&
        !name.includes('evaluator') &&
        !desc.includes('–∞–Ω–∞–ª–∏–∑–∏—Ä') &&
        !desc.includes('–ø—Ä–æ–≤–µ—Ä—è') &&
        !file.includes('/checkers/')) // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç—ã –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤ (checkers)
    ) {
      other[id] = comp;
      return;
    }

    // 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã (–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–æ–µ–∫—Ç—ã)
    const isAnalyzer =
      // –ö–†–ò–¢–ï–†–ò–ô 1: –Ø–≤–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      ((name.includes('analyzer') ||
        name.includes('checker') ||
        name.includes('evaluator') ||
        name.includes('detector') ||
        name.includes('inspector') ||
        name.includes('validator')) &&
        // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∏—Å–∫–ª—é—á–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã, setup, demo, —É—Ç–∏–ª–∏—Ç—ã
        !name.includes('setup') &&
        !name.includes('config') &&
        !name.includes('mock') &&
        !name.includes('demo') &&
        !name.includes('test') && // –ò—Å–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        !name.includes('cleanup') &&
        !name.includes('reporter') && // –†–µ–ø–æ—Ä—Ç–µ—Ä—ã - —ç—Ç–æ —É—Ç–∏–ª–∏—Ç—ã, –Ω–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
        !name.includes('generator') && // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã - —ç—Ç–æ —É—Ç–∏–ª–∏—Ç—ã, –Ω–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
        !name.includes('publisher') && // –ü—É–±–ª–∏—à–µ—Ä—ã - —ç—Ç–æ —É—Ç–∏–ª–∏—Ç—ã
        !name.includes('manager') && // –ú–µ–Ω–µ–¥–∂–µ—Ä—ã - —ç—Ç–æ —É—Ç–∏–ª–∏—Ç—ã
        !name.includes('factory') && // –§–∞–±—Ä–∏–∫–∏ - —ç—Ç–æ —É—Ç–∏–ª–∏—Ç—ã
        !name.includes('loader') && // –ó–∞–≥—Ä—É–∑—á–∏–∫–∏ - —ç—Ç–æ —É—Ç–∏–ª–∏—Ç—ã
        !name.includes('builder') && // –°—Ç—Ä–æ–∏—Ç–µ–ª–∏ - —ç—Ç–æ —É—Ç–∏–ª–∏—Ç—ã
        !file.includes('/test/') &&
        !file.includes('/spec/') &&
        !file.includes('/tests/') &&
        !file.endsWith('.test.ts') &&
        !file.endsWith('.test.js') &&
        !file.endsWith('.test.mjs') &&
        // –ö–†–ò–¢–ï–†–ò–ô 2: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∞–Ω–∞–ª–∏–∑–∞ (–±–æ–ª—å—à–µ 100 —Å—Ç—Ä–æ–∫)
        (comp.lines > 100 ||
          // –ö–†–ò–¢–ï–†–ò–ô 3: –í—ã—Å–æ–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (—Ä–µ–∞–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏)
          (comp.logic > 70 && comp.functionality > 60))) ||
      // –ö–†–ò–¢–ï–†–ò–ô 4: –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏/–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      (comp.category === 'security' &&
        comp.lines > 50 &&
        !name.includes('setup') &&
        !name.includes('config') &&
        !name.includes('demo') &&
        !name.includes('reporter') &&
        !name.includes('generator') &&
        !name.includes('publisher') &&
        !name.includes('manager') &&
        !name.includes('factory') &&
        !name.includes('loader')) ||
      (comp.category === 'performance' &&
        comp.lines > 50 &&
        !name.includes('setup') &&
        !name.includes('config') &&
        !name.includes('demo') &&
        !name.includes('reporter') &&
        !name.includes('generator') &&
        !name.includes('publisher') &&
        !name.includes('manager') &&
        !name.includes('factory') &&
        !name.includes('loader')) ||
      // –ö–†–ò–¢–ï–†–ò–ô 5: –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ testing
      // (—Ç–µ—Å—Ç—ã –ù–ï –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞–º–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –±–æ–ª—å—à–∏–µ)
      false || // –û—Ç–∫–ª—é—á–∞–µ–º —ç—Ç–æ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–π –¥–ª—è testing –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      // –ö–†–ò–¢–ï–†–ò–ô 6: –ü–æ –æ–ø–∏—Å–∞–Ω–∏—é - —Ç–æ–ª—å–∫–æ —Å —è–≤–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
      (desc.includes('–∞–Ω–∞–ª–∏–∑–∏—Ä') &&
        comp.lines > 50 &&
        !desc.includes('—Ç–µ—Å—Ç') &&
        !desc.includes('demo') &&
        !name.includes('reporter') &&
        !name.includes('generator') &&
        !name.includes('publisher')) ||
      (desc.includes('–ø—Ä–æ–≤–µ—Ä—è') &&
        comp.lines > 50 &&
        !desc.includes('–ø—Ä–æ—Å—Ç–æ–π') &&
        !desc.includes('—Ç–µ—Å—Ç') &&
        !name.includes('reporter') &&
        !name.includes('generator')) ||
      (desc.includes('–æ—Ü–µ–Ω–∏–≤–∞') &&
        comp.lines > 50 &&
        !desc.includes('—Ç–µ—Å—Ç') &&
        !name.includes('reporter') &&
        !name.includes('generator')) ||
      // –ö–†–ò–¢–ï–†–ò–ô 7: –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ debt –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
      (name.includes('debt') &&
        comp.lines > 100 &&
        !name.includes('test') &&
        !name.includes('reporter') &&
        !name.includes('generator')) ||
      (name.includes('complexity') &&
        comp.lines > 100 &&
        !name.includes('test') &&
        !name.includes('reporter') &&
        !name.includes('generator')) ||
      (name.includes('metrics') &&
        comp.lines > 100 &&
        !name.includes('test') &&
        !name.includes('reporter') &&
        !name.includes('generator'));

    if (isAnalyzer) {
      analyzers[id] = comp;
      return;
    }

    // 3. –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ - –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    auxiliary[id] = comp;
  });

  console.log('‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:');
  console.log(`   üéØ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã: ${Object.keys(analyzers).length}`);
  console.log(`   üîß –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ: ${Object.keys(auxiliary).length}`);
  console.log(`   üìÑ –û—Å—Ç–∞–ª—å–Ω–æ–µ: ${Object.keys(other).length}`);

  return { analyzers, auxiliary, other };
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üöÄ EAP ANALYZER - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Live-–æ—Ç—á–µ—Ç–∞');
  console.log('='.repeat(50));

  const data = analyzeProjectFiles();

  // –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  const classification = classifyComponents(data.components);

  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:`);
  console.log(`   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${Object.keys(data.components).length}`);
  console.log(
    `   –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${Object.keys(data.categories).filter(key => data.categories[key].count > 0).length}`
  );
  console.log(`\nüéØ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é:`);
  console.log(`   –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã: ${Object.keys(classification.analyzers).length}`);
  console.log(`   –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ: ${Object.keys(classification.auxiliary).length}`);
  console.log(`   –û—Å—Ç–∞–ª—å–Ω–æ–µ: ${Object.keys(classification.other).length}`);

  const markdown = generateMarkdownReport(data);

  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  const dataDir = './data';
  const reportsDir = './data/reports';
  const archiveDir = './data/reports/archives';

  [dataDir, reportsDir, archiveDir].forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
      console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`);
    }
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º MD-–æ—Ç—á–µ—Ç
  const reportPath = './data/reports/EAP-ANALYZER-CURRENT-REPORT.md';
  fs.writeFileSync(reportPath, markdown);
  console.log(`üìù –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç: ${reportPath}`);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π data.js —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞–º–∏ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
  const jsDataContent = generateDataJs(data, classification);
  fs.writeFileSync('./data/data.js', jsDataContent);
  console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: ./data/data.js`);

  // –ö–æ–ø–∏—Ä—É–µ–º –∫–∞–∫ –ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥
  fs.copyFileSync(reportPath, './data/reports/EAP-ANALYZER-FULL-COMPONENT-CATALOG.md');
  console.log(`üìã –ö–∞—Ç–∞–ª–æ–≥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ./data/reports/EAP-ANALYZER-FULL-COMPONENT-CATALOG.md`);

  // –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-').split('T');
  const date = timestamp[0];
  const time = timestamp[1].split('.')[0];
  fs.copyFileSync(reportPath, `./data/reports/archives/EAP-ANALYZER-REPORT-${date}-${time}.md`);
  console.log(`üóÑÔ∏è  –ê—Ä—Ö–∏–≤: ./data/reports/archives/EAP-ANALYZER-REPORT-${date}-${time}.md`);

  console.log('\n‚úÖ Live-–æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!');
  console.log('üîÑ –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ dashboard –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.');
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main();
}

module.exports = { analyzeProjectFiles, generateMarkdownReport };
