#!/usr/bin/env node

/**
 * EAP Analyzer Live Report Generator
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node live-generator.cjs
 */

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
function analyzeProjectFiles(projectPath = '../eap-analyzer') {
  const components = {};
  const categories = {
    'testing': { totalLogic: 0, totalFunc: 0, count: 0, components: [] },
    'security': { totalLogic: 0, totalFunc: 0, count: 0, components: [] },
    'performance': { totalLogic: 0, totalFunc: 0, count: 0, components: [] },
    'docker': { totalLogic: 0, totalFunc: 0, count: 0, components: [] },
    'dependencies': { totalLogic: 0, totalFunc: 0, count: 0, components: [] },
    'logging': { totalLogic: 0, totalFunc: 0, count: 0, components: [] },
    'cicd': { totalLogic: 0, totalFunc: 0, count: 0, components: [] },
    'codequality': { totalLogic: 0, totalFunc: 0, count: 0, components: [] },
    'core': { totalLogic: 0, totalFunc: 0, count: 0, components: [] },
    'ai': { totalLogic: 0, totalFunc: 0, count: 0, components: [] },
    'architecture': { totalLogic: 0, totalFunc: 0, count: 0, components: [] },
    'utils': { totalLogic: 0, totalFunc: 0, count: 0, components: [] }
  };
  
  console.log(`üîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –≤: ${path.resolve(projectPath)}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  if (!fs.existsSync(projectPath)) {
    console.log(`‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${projectPath} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...`);
    return generateTestData();
  }
  
  // –û–±—Ö–æ–¥ —Ñ–∞–π–ª–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑
  function traverseDirectory(dir, relativePath = '') {
    try {
      const files = fs.readdirSync(dir);
      
      for (const file of files) {
        const fullPath = path.join(dir, file);
        const relativeFilePath = path.join(relativePath, file);
        
        try {
          const stat = fs.statSync(fullPath);
          
          if (stat.isDirectory()) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º node_modules –∏ –¥—Ä—É–≥–∏–µ —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏
            if (!['node_modules', '.git', 'dist', 'coverage', '.nyc_output'].includes(file)) {
              traverseDirectory(fullPath, relativeFilePath);
            }
          } else if (file.endsWith('.js') || file.endsWith('.cjs') || file.endsWith('.mjs')) {
            const content = fs.readFileSync(fullPath, 'utf8');
            const componentData = analyzeFile(file, relativeFilePath, content, stat);
            
            if (componentData) {
              const key = componentData.name.replace(/[^a-zA-Z0-9]/g, '');
              components[key] = componentData;
              
              // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
              const cat = categories[componentData.category];
              if (cat) {
                cat.totalLogic += componentData.logic;
                cat.totalFunc += componentData.functionality;
                cat.count++;
                cat.components.push(componentData);
              }
            }
          }
        } catch (fileError) {
          console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${fullPath}: ${fileError.message}`);
        }
      }
    } catch (dirError) {
      console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dir}: ${dirError.message}`);
    }
  }
  
  // –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  function analyzeFile(filename, filepath, content, stat) {
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
      let category = 'utils'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const lowerPath = filepath.toLowerCase();
      const lowerContent = content.toLowerCase();
      
      if (lowerPath.includes('test') || lowerPath.includes('spec') || filename.includes('.test.') || filename.includes('.spec.')) {
        category = 'testing';
      } else if (lowerPath.includes('security') || lowerContent.includes('security') || lowerContent.includes('vulnerability')) {
        category = 'security';
      } else if (lowerPath.includes('performance') || lowerPath.includes('perf') || lowerContent.includes('performance')) {
        category = 'performance';
      } else if (lowerPath.includes('docker') || lowerContent.includes('docker') || filename === 'dockerfile') {
        category = 'docker';
      } else if (lowerPath.includes('dependencies') || lowerPath.includes('deps') || filename === 'package.json') {
        category = 'dependencies';
      } else if (lowerPath.includes('log') || lowerContent.includes('logger') || lowerContent.includes('winston')) {
        category = 'logging';
      } else if (lowerPath.includes('ci') || lowerPath.includes('cd') || filename.includes('.yml') || filename.includes('.yaml')) {
        category = 'cicd';
      } else if (lowerPath.includes('quality') || lowerPath.includes('lint') || lowerContent.includes('eslint')) {
        category = 'codequality';
      } else if (lowerPath.includes('core') || lowerPath.includes('analyzer') || lowerPath.includes('checker') || lowerContent.includes('class ')) {
        category = 'core';
      } else if (lowerPath.includes('ai') || lowerPath.includes('insight') || lowerContent.includes('machine learning')) {
        category = 'ai';
      } else if (lowerPath.includes('architecture') || lowerPath.includes('structure') || lowerContent.includes('architecture')) {
        category = 'architecture';
      }
      
      // –†–∞—Å—á–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏–∫–∏
      const logic = calculateLogicReadiness(content, stat);
      
      // –†–∞—Å—á–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
      const functionality = calculateFunctionality(content, stat);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      const componentName = extractComponentName(filename, content);
      
      return {
        name: componentName,
        category,
        logic,
        functionality,
        file: filepath.replace(/\\/g, '/'),
        description: extractDescription(content),
        tests: countTests(content),
        lastModified: new Date(stat.mtime).toISOString().split('T')[0],
        fileSize: stat.size,
        lines: content.split('\n').length
      };
    } catch (error) {
      console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ ${filename}: ${error.message}`);
      return null;
    }
  }
  
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
  function calculateLogicReadiness(content, stat) {
    let score = 50; // –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª
    
    // –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–±–æ–ª—å—à–µ = –±–æ–ª–µ–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π)
    if (stat.size > 5000) score += 15;
    else if (stat.size > 2000) score += 10;
    else if (stat.size > 500) score += 5;
    
    // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if (content.includes('class ')) score += 10;
    if (content.includes('async ')) score += 5;
    if (content.includes('try ') && content.includes('catch')) score += 10;
    if (content.includes('/**')) score += 5; // JSDoc –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    if (content.includes('module.exports') || content.includes('export ')) score += 5;
    
    // –®—Ç—Ä–∞—Ñ—ã
    if (content.includes('TODO')) score -= 5;
    if (content.includes('FIXME')) score -= 10;
    if (content.includes('console.log')) score -= 2;
    
    return Math.max(30, Math.min(95, score));
  }
  
  function calculateFunctionality(content, stat) {
    let score = 45; // –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª
    
    // –ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–π
    const functionMatches = content.match(/function\s+\w+/g) || [];
    score += Math.min(functionMatches.length * 3, 20);
    
    // –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–¥–æ–≤ –≤ –∫–ª–∞—Å—Å–∞—Ö
    const methodMatches = content.match(/\w+\s*\([^)]*\)\s*{/g) || [];
    score += Math.min(methodMatches.length * 2, 15);
    
    // –ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤
    const testMatches = (content.match(/test\(/g) || []).length + (content.match(/it\(/g) || []).length;
    score += Math.min(testMatches * 5, 25);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    if (content.includes('return ')) score += 5;
    if (content.includes('if (') || content.includes('if(')) score += 5;
    if (content.includes('for (') || content.includes('forEach')) score += 5;
    
    // –®—Ç—Ä–∞—Ñ—ã
    if (content.includes('throw new Error')) score -= 3;
    if (content.includes('// TODO')) score -= 5;
    
    return Math.max(25, Math.min(92, score));
  }
  
  function extractComponentName(filename, content) {
    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–º—è –∫–ª–∞—Å—Å–∞
    const classMatch = content.match(/class\s+(\w+)/);
    if (classMatch) return classMatch[1];
    
    // –ò–ª–∏ –∏–∑ module.exports
    const exportsMatch = content.match(/module\.exports\s*=\s*(\w+)/);
    if (exportsMatch) return exportsMatch[1];
    
    // –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ (–æ—á–∏—â–µ–Ω–Ω–æ–µ)
    return filename.replace(/\.(js|cjs|mjs)$/, '').replace(/[^a-zA-Z0-9]/g, '');
  }
  
  function extractDescription(content) {
    // –ò—â–µ–º JSDoc –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    const jsdocMatch = content.match(/\/\*\*\s*(.*?)\s*\*\//s);
    if (jsdocMatch) {
      return jsdocMatch[1]
        .replace(/\*/g, '')
        .replace(/\n/g, ' ')
        .trim()
        .substring(0, 100);
    }
    
    // –ò—â–µ–º –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
    const commentMatch = content.match(/^\/\/\s*(.*?)$/m);
    if (commentMatch) {
      return commentMatch[1].trim().substring(0, 100);
    }
    
    return 'EAP Analyzer –∫–æ–º–ø–æ–Ω–µ–Ω—Ç';
  }
  
  function countTests(content) {
    const testMatches = (content.match(/test\(/g) || []).length;
    const itMatches = (content.match(/it\(/g) || []).length;
    const describeMatches = (content.match(/describe\(/g) || []).length;
    
    const total = testMatches + itMatches + describeMatches;
    return total > 0 ? `${total} —Ç–µ—Å—Ç–æ–≤` : '–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤';
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ö–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞
  traverseDirectory(projectPath);
  
  // –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  Object.keys(categories).forEach(key => {
    const cat = categories[key];
    if (cat.count > 0) {
      cat.avgLogic = Math.round(cat.totalLogic / cat.count);
      cat.avgFunc = Math.round(cat.totalFunc / cat.count);
    } else {
      cat.avgLogic = 0;
      cat.avgFunc = 0;
    }
  });
  
  console.log(`‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${Object.keys(components).length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`);
  
  return { components, categories };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
function generateTestData() {
  console.log('üß™ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
  
  const testComponents = {};
  const categories = {
    'testing': { avgLogic: 88, avgFunc: 85, count: 8, components: [] },
    'security': { avgLogic: 85, avgFunc: 82, count: 7, components: [] },
    'performance': { avgLogic: 78, avgFunc: 75, count: 3, components: [] },
    'core': { avgLogic: 82, avgFunc: 78, count: 6, components: [] }
  };
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  const testData = [
    { name: 'TestingAnalyzer', category: 'testing', logic: 90, func: 85 },
    { name: 'SecurityChecker', category: 'security', logic: 85, func: 80 },
    { name: 'PerformanceAnalyzer', category: 'performance', logic: 78, func: 75 },
    { name: 'CoreAnalyzer', category: 'core', logic: 82, func: 78 }
  ];
  
  testData.forEach(item => {
    testComponents[item.name] = {
      name: item.name,
      category: item.category,
      logic: item.logic,
      functionality: item.func,
      file: `eap-analyzer/${item.name.toLowerCase()}.js`,
      description: `–¢–µ—Å—Ç–æ–≤—ã–π ${item.name}`,
      tests: `${Math.floor(Math.random() * 15 + 5)} —Ç–µ—Å—Ç–æ–≤`,
      lastModified: new Date().toISOString().split('T')[0]
    };
  });
  
  return { components: testComponents, categories };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è MD-–æ—Ç—á–µ—Ç–∞
function generateMarkdownReport(data) {
  const { components, categories } = data;
  let markdown = `# üìã EAP ANALYZER - LIVE –ê–ù–ê–õ–ò–ó –ü–†–û–ï–ö–¢–ê\n\n`;
  
  markdown += `## üìä –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –ì–û–¢–û–í–ù–û–°–¢–ò\n\n`;
  markdown += `> **–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:** ${new Date().toLocaleString('ru-RU')}\n\n`;
  markdown += `- **–ü–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞**: –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ª–æ–≥–∏–∫–∏ (% —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)\n`;
  markdown += `- **–í—Ç–æ—Ä–∞—è —Ü–∏—Ñ—Ä–∞**: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (% —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏)\n\n`;
  
  markdown += `## üéØ **–û–°–ù–û–í–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò –ê–ù–ê–õ–ò–ó–ê**\n\n`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const sortedCats = Object.entries(categories)
    .filter(([_, cat]) => cat.count > 0)
    .sort(([_, a], [__, b]) => b.avgLogic - a.avgLogic);
    
  sortedCats.forEach(([key, cat], index) => {
    markdown += `### ${index + 1}. ${getCategoryIcon(key)} **${getCategoryName(key)}** [${cat.avgLogic}% / ${cat.avgFunc}%]\n\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryComponents = Object.values(components)
      .filter(comp => comp.category === key)
      .sort((a, b) => b.logic - a.logic);
      
    categoryComponents.forEach(comp => {
      markdown += `- **${comp.name}** [${comp.logic}% / ${comp.functionality}%] - ${comp.description}\n`;
    });
    
    markdown += `\n**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n`;
    markdown += `- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${cat.count}\n`;
    markdown += `- –°—Ä–µ–¥–Ω—è—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ${cat.avgLogic}%\n`;
    markdown += `- –°—Ä–µ–¥–Ω—è—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${cat.avgFunc}%\n\n`;
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const totalComponents = Object.keys(components).length;
  const totalLogic = Object.values(components).reduce((sum, comp) => sum + comp.logic, 0);
  const totalFunc = Object.values(components).reduce((sum, comp) => sum + comp.functionality, 0);
  
  markdown += `## üìà **–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê**\n\n`;
  markdown += `- **–í—Å–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:** ${totalComponents}\n`;
  markdown += `- **–°—Ä–µ–¥–Ω—è—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ª–æ–≥–∏–∫–∏:** ${totalComponents ? Math.round(totalLogic / totalComponents) : 0}%\n`;
  markdown += `- **–°—Ä–µ–¥–Ω—è—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:** ${totalComponents ? Math.round(totalFunc / totalComponents) : 0}%\n`;
  markdown += `- **–ö–∞—Ç–µ–≥–æ—Ä–∏–π:** ${sortedCats.length}\n`;
  markdown += `- **–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:** ${new Date().toISOString().split('T')[0]}\n\n`;
  
  return markdown;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getCategoryIcon(category) {
  const icons = {
    'testing': 'üß™',
    'security': 'üîí',
    'performance': '‚ö°',
    'docker': 'üê≥',
    'dependencies': 'üì¶',
    'logging': 'üìù',
    'cicd': 'üîÑ',
    'codequality': '‚ú®',
    'core': '‚öôÔ∏è',
    'ai': 'ü§ñ',
    'architecture': 'üèóÔ∏è',
    'utils': 'üîß'
  };
  return icons[category] || 'üìÅ';
}

function getCategoryName(category) {
  const names = {
    'testing': 'TESTING (–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)',
    'security': 'SECURITY (–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)',
    'performance': 'PERFORMANCE (–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)',
    'docker': 'DOCKER (–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è)',
    'dependencies': 'DEPENDENCIES (–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)',
    'logging': 'LOGGING (–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)',
    'cicd': 'CI/CD (–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è)',
    'codequality': 'CODE QUALITY (–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞)',
    'core': 'CORE (–Ø–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã)',
    'ai': 'AI (–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç)',
    'architecture': 'ARCHITECTURE (–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)',
    'utils': 'UTILS (–£—Ç–∏–ª–∏—Ç—ã)'
  };
  return names[category] || category.toUpperCase();
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üöÄ EAP ANALYZER - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Live-–æ—Ç—á–µ—Ç–∞');
  console.log('='.repeat(50));
  
  const data = analyzeProjectFiles();
  
  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:`);
  console.log(`   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${Object.keys(data.components).length}`);
  console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${Object.keys(data.categories).filter(key => data.categories[key].count > 0).length}`);
  
  const markdown = generateMarkdownReport(data);
  
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  const dataDir = './data';
  const reportsDir = './data/reports';
  const archiveDir = './data/reports/archives';
  
  [dataDir, reportsDir, archiveDir].forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
      console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`);
    }
  });
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º MD-–æ—Ç—á–µ—Ç
  const reportPath = './data/reports/EAP-ANALYZER-CURRENT-REPORT.md';
  fs.writeFileSync(reportPath, markdown);
  console.log(`üìù –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç: ${reportPath}`);
  
  // –ö–æ–ø–∏—Ä—É–µ–º –∫–∞–∫ –ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥
  fs.copyFileSync(reportPath, './data/reports/EAP-ANALYZER-FULL-COMPONENT-CATALOG.md');
  console.log(`üìã –ö–∞—Ç–∞–ª–æ–≥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ./data/reports/EAP-ANALYZER-FULL-COMPONENT-CATALOG.md`);
  
  // –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-').split('T');
  const date = timestamp[0];
  const time = timestamp[1].split('.')[0];
  fs.copyFileSync(reportPath, `./data/reports/archives/EAP-ANALYZER-REPORT-${date}-${time}.md`);
  console.log(`üóÑÔ∏è  –ê—Ä—Ö–∏–≤: ./data/reports/archives/EAP-ANALYZER-REPORT-${date}-${time}.md`);
  
  console.log('\n‚úÖ Live-–æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!');
  console.log('üîÑ –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ dashboard –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.');
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main();
}

module.exports = { analyzeProjectFiles, generateMarkdownReport };
