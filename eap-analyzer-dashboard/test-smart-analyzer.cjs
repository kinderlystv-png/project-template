/**
 * –¢–µ—Å—Ç —É–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */

const { smartComponentAnalyzer } = require('./smart-analyzer.js');
const fs = require('fs');
const path = require('path');

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ vitest.performance.config.ts
const vitestConfigPath = '../vitest.performance.config.ts';
const fullPath = path.resolve(__dirname, vitestConfigPath);

console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ú–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê');
console.log('='.repeat(50));

try {
  const content = fs.readFileSync(fullPath, 'utf-8');
  const stat = fs.statSync(fullPath);

  console.log(`üìÅ –§–∞–π–ª: ${path.basename(fullPath)}`);
  console.log(`üìç –ü—É—Ç—å: ${fullPath}`);
  console.log(`üìä –†–∞–∑–º–µ—Ä: ${stat.size} –±–∞–π—Ç\n`);

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  const result = smartComponentAnalyzer(
    path.basename(fullPath),
    fullPath,
    content,
    stat
  );

  console.log('üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:');
  console.log('-'.repeat(30));
  console.log(`üîç –¢–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${result.type}`);
  console.log(`üìä –õ–æ–≥–∏–∫–∞: ${result.logicScore}%`);
  console.log(`‚ö° –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${result.functionalityScore}%`);
  console.log(`üöÄ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–ª—É—á—à–µ–Ω–∏–π: ${result.detectedImprovements}`);

  console.log('\n‚úÖ –£–õ–£–ß–®–ï–ù–ò–Ø:');
  for (const [category, strength] of Object.entries(result.improvements)) {
    const percentage = Math.round(strength * 100);
    console.log(`  ‚Ä¢ ${category}: ${percentage}%`);
  }

  console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  result.recommendations.forEach((rec, i) => {
    console.log(`  ${i + 1}. ${rec}`);
  });

  console.log('\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–´ –õ–û–ì–ò–ö–ò:');
  result.logicIssues.forEach((issue, i) => {
    console.log(`  ${i + 1}. ${issue}`);
  });

  console.log('\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–´ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò:');
  result.functionalityIssues.forEach((issue, i) => {
    console.log(`  ${i + 1}. ${issue}`);
  });

  console.log('\n' + '='.repeat(50));
  console.log('‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!');

} catch (error) {
  console.error('‚ùå –û–®–ò–ë–ö–ê:', error.message);
  console.error('–°—Ç–µ–∫:', error.stack);
}
