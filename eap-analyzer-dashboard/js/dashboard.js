// Dashboard.js - –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–æ–º EAP Analyzer
class EAPDashboard {
  constructor() {
    this.currentFilter = 'all';
    this.searchQuery = '';
    this.sortBy = 'name';
    this.sortOrder = 'asc';
    this.initialized = false;
    this.componentsData = {};
    this.statistics = {};
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞
   */
  async initialize() {
    if (this.initialized) return;

    try {
      console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EAP Analyzer Dashboard...');

      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      let retries = 0;
      while (!window.EAP_DATA && retries < 10) {
        await new Promise(resolve => setTimeout(resolve, 100));
        retries++;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
      if (!window.EAP_DATA || !window.EAP_DATA.components) {
        console.warn('–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É');
        this.componentsData = {};
      } else {
        this.componentsData = window.EAP_DATA.components;
      }

      this.calculateStatistics();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      this.initializeEventListeners();
      this.initializeFilters();
      this.initializeSearch();
      this.initializeSorting();

      // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
      this.renderSummaryCards();
      this.renderComponentsList();
      this.renderTopComponents();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ Chart.js
      await this.initializeChartsWhenReady();

      this.initialized = true;
      console.log('‚úÖ Dashboard —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ dashboard:', error);
      this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞: ' + error.message);
    }
  }

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ Chart.js –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
   */
  async initializeChartsWhenReady() {
    let attempts = 0;
    const maxAttempts = 50; // 5 —Å–µ–∫—É–Ω–¥

    console.log('üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ Chart.js –∏ EAPCharts...');

    while (attempts < maxAttempts) {
      if (typeof Chart !== 'undefined') {
        console.log('üìä Chart.js –Ω–∞–π–¥–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏...');

        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä EAPChartsManager –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!window.EAPCharts) {
          console.log('üîß –°–æ–∑–¥–∞–µ–º EAPChartsManager...');
          window.EAPCharts = new EAPChartsManager();
        }

        const success = window.EAPCharts.initializeCharts();
        if (success) {
          console.log('‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
        } else {
          console.warn('‚ö†Ô∏è –ì—Ä–∞—Ñ–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –æ—à–∏–±–∫–∞–º–∏');
        }
        return;
      }

      await new Promise(resolve => setTimeout(resolve, 100));
      attempts++;
    }

    console.warn('‚ö†Ô∏è Chart.js –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    this.showChartWarning();
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
   */
  showChartWarning() {
    const chartSections = document.querySelectorAll('[id*="chart"]');
    chartSections.forEach(section => {
      if (section.tagName === 'CANVAS') {
        const parent = section.closest('.card-body') || section.parentElement;
        if (parent) {
          parent.innerHTML = `
                        <div class="alert alert-info text-center">
                            <i class="bi bi-info-circle"></i>
                            <p class="mb-1">–ì—Ä–∞—Ñ–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</p>
                            <small class="text-muted">–î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö</small>
                        </div>
                    `;
        }
      }
    });
  } /**
   * –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  calculateStatistics() {
    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if (!this.componentsData || typeof this.componentsData !== 'object') {
      this.statistics = {
        total: 0,
        avgLogic: 0,
        avgFunctionality: 0,
        avgOverall: 0,
        ready: 0,
        inProgress: 0,
        planned: 0,
      };
      return;
    }

    const components = Object.values(this.componentsData);
    const totalComponents = components.length;

    if (totalComponents === 0) {
      this.statistics = {
        total: 0,
        avgLogic: 0,
        avgFunctionality: 0,
        avgOverall: 0,
        ready: 0,
        inProgress: 0,
        planned: 0,
      };
      return;
    }

    let totalLogic = 0;
    let totalFunctionality = 0;
    let readyCount = 0;
    let inProgressCount = 0;
    let plannedCount = 0;

    components.forEach(component => {
      totalLogic += component.logic || 0;
      totalFunctionality += component.functionality || 0;

      const overall = ((component.logic || 0) + (component.functionality || 0)) / 2;
      if (overall >= 90) readyCount++;
      else if (overall >= 50) inProgressCount++;
      else plannedCount++;
    });

    this.statistics = {
      total: totalComponents,
      avgLogic: Math.round((totalLogic / totalComponents) * 10) / 10,
      avgFunctionality: Math.round((totalFunctionality / totalComponents) * 10) / 10,
      avgOverall: Math.round(((totalLogic + totalFunctionality) / (totalComponents * 2)) * 10) / 10,
      ready: readyCount,
      inProgress: inProgressCount,
      planned: plannedCount,
    };
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  initializeEventListeners() {
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('.nav-link').forEach(link => {
      link.addEventListener('click', e => {
        e.preventDefault();
        this.switchTab(link.dataset.tab);
      });
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const refreshBtn = document.getElementById('refresh-data');
    if (refreshBtn) {
      refreshBtn.addEventListener('click', () => this.refreshData());
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    const exportBtn = document.getElementById('export-data');
    if (exportBtn) {
      exportBtn.addEventListener('click', () => this.exportData());
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    const loadFileBtn = document.getElementById('load-file');
    if (loadFileBtn) {
      loadFileBtn.addEventListener('change', e => this.loadFile(e));
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
   */
  initializeFilters() {
    const filterButtons = document.querySelectorAll('.filter-btn');
    filterButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        filterButtons.forEach(b => b.classList.remove('active'));
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É
        btn.classList.add('active');

        this.currentFilter = btn.dataset.filter;
        this.renderComponentsList();
      });
    });
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
   */
  initializeSearch() {
    const searchInput = document.getElementById('search-input');
    if (searchInput) {
      searchInput.addEventListener('input', e => {
        this.searchQuery = e.target.value.toLowerCase();
        this.renderComponentsList();
      });
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
   */
  initializeSorting() {
    const sortSelect = document.getElementById('sort-select');
    if (sortSelect) {
      sortSelect.addEventListener('change', e => {
        const [field, order] = e.target.value.split('-');
        this.sortBy = field;
        this.sortOrder = order;
        this.renderComponentsList();
      });
    }
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
   */
  switchTab(tabName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–∞–Ω–µ–ª–∏
    document.querySelectorAll('.tab-pane').forEach(pane => {
      pane.classList.remove('show', 'active');
    });

    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫
    document.querySelectorAll('.nav-link').forEach(link => {
      link.classList.remove('active');
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –ø–∞–Ω–µ–ª—å
    const targetPane = document.getElementById(tabName + '-tab');
    if (targetPane) {
      targetPane.classList.add('show', 'active');
    }

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—É—é —Å—Å—ã–ª–∫—É
    const targetLink = document.querySelector(`.nav-link[data-tab="${tabName}"]`);
    if (targetLink) {
      targetLink.classList.add('active');
    }
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–≤–æ–¥–∫–∏
   */
  renderSummaryCards() {
    const stats = this.statistics;

    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const totalElement = document.getElementById('total-components');
    if (totalElement) {
      totalElement.textContent = stats.total;
    }

    // –°—Ä–µ–¥–Ω—è—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ª–æ–≥–∏–∫–∏
    const logicElement = document.getElementById('avg-logic');
    if (logicElement) {
      logicElement.textContent = stats.avgLogic.toFixed(1) + '%';
    }

    // –°—Ä–µ–¥–Ω—è—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    const funcElement = document.getElementById('avg-functionality');
    if (funcElement) {
      funcElement.textContent = stats.avgFunctionality.toFixed(1) + '%';
    }

    // –û–±—â–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
    const overallElement = document.getElementById('avg-overall');
    if (overallElement) {
      overallElement.textContent = stats.avgOverall.toFixed(1) + '%';
    }

    // –ì–æ—Ç–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    const readyElement = document.getElementById('ready-count');
    if (readyElement) {
      readyElement.textContent = stats.ready;
    }

    // –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
    const progressElement = document.getElementById('progress-count');
    if (progressElement) {
      progressElement.textContent = stats.inProgress;
    }

    // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
    const plannedElement = document.getElementById('planned-count');
    if (plannedElement) {
      plannedElement.textContent = stats.planned;
    }
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
   */
  renderComponentsList() {
    const container = document.getElementById('components-list');
    if (!container) return;

    const filteredComponents = this.getFilteredComponents();

    if (filteredComponents.length === 0) {
      container.innerHTML = `
                <div class="text-center py-5">
                    <h5 class="text-muted">–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h5>
                    <p class="text-muted">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</p>
                </div>
            `;
      return;
    }

    let html = '';
    filteredComponents.forEach((component, index) => {
      const overall = ((component.logic + component.functionality) / 2).toFixed(1);
      const statusClass = this.getStatusClass(overall);
      const categoryInfo = window.EAP_DATA?.categories[component.category] || {
        name: component.category,
        color: '#6c757d',
      };

      html += `
                <div class="component-card border rounded-lg p-3 mb-3" data-component="${component.name}">
                    <div class="d-flex justify-content-between align-items-start mb-2">
                        <h6 class="mb-1 fw-bold">${component.name}</h6>
                        <span class="badge bg-${statusClass} ms-2">${overall}%</span>
                    </div>

                    <div class="mb-2">
                        <span class="badge" style="background-color: ${categoryInfo.color}; color: white;">
                            ${categoryInfo.name}
                        </span>
                        <small class="text-muted ms-2">${component.file || '–ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª'}</small>
                    </div>

                    <p class="text-muted small mb-3">${component.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>

                    <div class="row mb-2">
                        <div class="col-6">
                            <small class="text-muted">–õ–æ–≥–∏–∫–∞</small>
                            <div class="progress" style="height: 6px;">
                                <div class="progress-bar bg-primary" style="width: ${component.logic}%"></div>
                            </div>
                            <small>${component.logic}%</small>
                        </div>
                        <div class="col-6">
                            <small class="text-muted">–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å</small>
                            <div class="progress" style="height: 6px;">
                                <div class="progress-bar bg-success" style="width: ${component.functionality}%"></div>
                            </div>
                            <small>${component.functionality}%</small>
                        </div>
                    </div>

                    <div class="d-flex justify-content-between align-items-center">
                        <small class="text-muted">
                            ${component.tests ? `–¢–µ—Å—Ç—ã: ${component.tests}` : '–¢–µ—Å—Ç–æ–≤ –Ω–µ—Ç'}
                        </small>
                        <button class="btn btn-sm btn-outline-primary" onclick="dashboard.showComponentDetails('${component.name}')">
                            –î–µ—Ç–∞–ª–∏
                        </button>
                    </div>
                </div>
            `;
    });

    container.innerHTML = html;
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–æ–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
   */
  renderTopComponents() {
    const container = document.getElementById('top-components');
    if (!container || !window.EAP_DATA?.utils) return;

    const topComponents = window.EAP_DATA.utils.getTopComponents(5);

    let html = '';
    topComponents.forEach((component, index) => {
      const overall = ((component.logic + component.functionality) / 2).toFixed(1);
      const medal = index < 3 ? ['ü•á', 'ü•à', 'ü•â'][index] : `${index + 1}.`;

      html += `
                <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                    <div>
                        <span class="me-2">${medal}</span>
                        <strong>${component.name}</strong>
                        <br>
                        <small class="text-muted">${component.category}</small>
                    </div>
                    <span class="badge bg-success">${overall}%</span>
                </div>
            `;
    });

    container.innerHTML = html || '<p class="text-muted">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</p>';
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
   */
  getFilteredComponents() {
    let components = Object.values(this.componentsData);

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (this.currentFilter !== 'all') {
      components = components.filter(comp => comp.category === this.currentFilter);
    }

    // –ü–æ–∏—Å–∫
    if (this.searchQuery) {
      components = components.filter(
        comp =>
          comp.name.toLowerCase().includes(this.searchQuery) ||
          (comp.description && comp.description.toLowerCase().includes(this.searchQuery)) ||
          (comp.file && comp.file.toLowerCase().includes(this.searchQuery))
      );
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    components.sort((a, b) => {
      let valueA, valueB;

      switch (this.sortBy) {
        case 'logic':
          valueA = a.logic || 0;
          valueB = b.logic || 0;
          break;
        case 'functionality':
          valueA = a.functionality || 0;
          valueB = b.functionality || 0;
          break;
        case 'overall':
          valueA = (a.logic || 0) + (a.functionality || 0);
          valueB = (b.logic || 0) + (b.functionality || 0);
          break;
        default:
          valueA = a.name.toLowerCase();
          valueB = b.name.toLowerCase();
      }

      if (this.sortOrder === 'desc') {
        return valueA < valueB ? 1 : valueA > valueB ? -1 : 0;
      } else {
        return valueA > valueB ? 1 : valueA < valueB ? -1 : 0;
      }
    });

    return components;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ CSS-–∫–ª–∞—Å—Å–∞ —Å—Ç–∞—Ç—É—Å–∞
   */
  getStatusClass(overall) {
    const score = parseFloat(overall);
    if (score >= 90) return 'success';
    if (score >= 70) return 'warning';
    if (score >= 50) return 'info';
    return 'secondary';
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   */
  showComponentDetails(componentName) {
    const component = this.componentsData[componentName];
    if (!component) return;

    const overall = ((component.logic + component.functionality) / 2).toFixed(1);
    const categoryInfo = window.EAP_DATA?.categories[component.category] || {
      name: component.category,
    };

    const modalContent = `
            <div class="modal fade" id="componentModal" tabindex="-1">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">${component.name}</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> ${categoryInfo.name}
                                </div>
                                <div class="col-md-6">
                                    <strong>–§–∞–π–ª:</strong> ${component.file || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                                </div>
                            </div>

                            <div class="mb-3">
                                <strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong><br>
                                ${component.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-4">
                                    <div class="text-center">
                                        <h3 class="text-primary">${component.logic}%</h3>
                                        <small>–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ª–æ–≥–∏–∫–∏</small>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="text-center">
                                        <h3 class="text-success">${component.functionality}%</h3>
                                        <small>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å</small>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="text-center">
                                        <h3 class="text-info">${overall}%</h3>
                                        <small>–û–±—â–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å</small>
                                    </div>
                                </div>
                            </div>

                            ${
                              component.tests
                                ? `
                                <div class="mb-3">
                                    <strong>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong><br>
                                    <span class="badge bg-info">${component.tests}</span>
                                </div>
                            `
                                : ''
                            }

                            <canvas id="component-chart-${componentName}" style="height: 200px;"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        `;

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–æ–¥–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingModal = document.getElementById('componentModal');
    if (existingModal) {
      existingModal.remove();
    }

    document.body.insertAdjacentHTML('beforeend', modalContent);

    const modal = new bootstrap.Modal(document.getElementById('componentModal'));
    modal.show();

    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    setTimeout(() => {
      if (window.EAPCharts) {
        window.EAPCharts.createComponentChart(`component-chart-${componentName}`, componentName, {
          currentLogic: component.logic,
          currentFunctionality: component.functionality,
        });
      }
    }, 500);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async refreshData() {
    const refreshBtn = document.getElementById('refresh-data');
    if (refreshBtn) {
      refreshBtn.innerHTML = '<i class="fas fa-sync fa-spin me-1"></i> –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...';
      refreshBtn.disabled = true;
    }

    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
      await new Promise(resolve => setTimeout(resolve, 1000));

      this.calculateStatistics();
      this.renderSummaryCards();
      this.renderComponentsList();
      this.renderTopComponents();

      if (window.EAPCharts) {
        window.EAPCharts.updateAllCharts();
      }

      this.showSuccess('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (error) {
      this.showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
    } finally {
      if (refreshBtn) {
        refreshBtn.innerHTML = '<i class="fas fa-sync me-1"></i> –û–±–Ω–æ–≤–∏—Ç—å';
        refreshBtn.disabled = false;
      }
    }
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
   */
  exportData() {
    try {
      const data = {
        timestamp: new Date().toISOString(),
        statistics: this.statistics,
        components: this.componentsData,
      };

      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);

      const a = document.createElement('a');
      a.href = url;
      a.download = `eap-analyzer-data-${new Date().toISOString().slice(0, 10)}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      this.showSuccess('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
      this.showError('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ' + error.message);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
   */
  loadFile(event) {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = e => {
      try {
        if (file.name.endsWith('.json')) {
          const data = JSON.parse(e.target.result);
          if (data.components) {
            this.componentsData = data.components;
            this.initialize();
            this.showSuccess('JSON —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
          }
        } else if (file.name.endsWith('.md')) {
          if (window.EAPParser) {
            const parsed = window.EAPParser.parseMarkdown(e.target.result);
            this.componentsData = parsed.components;
            this.initialize();
            this.showSuccess('Markdown —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
          }
        }
      } catch (error) {
        this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ' + error.message);
      }
    };

    reader.readAsText(file);
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
   */
  showSuccess(message) {
    this.showAlert(message, 'success');
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  showError(message) {
    this.showAlert(message, 'danger');
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  showAlert(message, type) {
    const alertHtml = `
            <div class="alert alert-${type} alert-dismissible fade show position-fixed"
                 style="top: 20px; right: 20px; z-index: 9999; min-width: 300px;">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `;

    document.body.insertAdjacentHTML('beforeend', alertHtml);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      const alerts = document.querySelectorAll('.alert');
      alerts.forEach(alert => {
        if (alert.textContent.includes(message)) {
          alert.remove();
        }
      });
    }, 5000);
  }
}

// Dashboard class will be initialized from HTML script
