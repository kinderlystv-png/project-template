/**
 * –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ FileStructureChecker –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–µ
 */
/* eslint-disable no-console */
/* eslint-disable @typescript-eslint/no-explicit-any */

import { AnalysisOrchestrator } from './eap-analyzer/src/core/orchestrator.js';
import { FileStructureChecker } from './eap-analyzer/src/checkers/structure.checker.js';
import { EapDebugger } from './eap-debugger/src/EapDebugger.js';

const testIntegratedStructureChecker = async () => {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FileStructureChecker –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä...\n');

  try {
    // –°–æ–∑–¥–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è FileStructureChecker...');
    const orchestrator = new AnalysisOrchestrator();

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º FileStructureChecker –≤—Ä—É—á–Ω—É—é
    const structureChecker = new FileStructureChecker();
    orchestrator.registerChecker(structureChecker.getName(), structureChecker);

    console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:');
    console.log(`  - –ß–µ–∫–µ—Ä–æ–≤: ${(orchestrator as any).checkers.size}`);
    console.log(`  - –ú–æ–¥—É–ª–µ–π: ${(orchestrator as any).modules.size}\n`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    console.log('üîß –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–µ–∫–µ—Ä—ã:');
    for (const [name, checker] of (orchestrator as any).checkers) {
      console.log(`  - ${name}: ${checker.constructor.name}`);
    }

    console.log('\nüì¶ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:');
    for (const [name, module] of (orchestrator as any).modules) {
      console.log(`  - ${name}: ${module.constructor.name}`);
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º EAP Debugger –Ω–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–µ —Å FileStructureChecker
    console.log('\nüåê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º FileStructureChecker...');

    const html = await EapDebugger.quickGenerateAndOpen(
      orchestrator as any,
      './eap-integrated-structure-debug.html'
    );

    console.log(`‚úÖ HTML —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${html.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    console.log('üìÅ –§–∞–π–ª: eap-integrated-structure-debug.html');
    console.log('üåê –ë—Ä–∞—É–∑–µ—Ä –¥–æ–ª–∂–µ–Ω –æ—Ç–∫—Ä—ã—Ç—å—Å—è —Å FileStructureChecker –≤ —Å–ø–∏—Å–∫–µ!');

    // –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const eapDebugger = new EapDebugger();
    await eapDebugger.generateComponentsHtml(orchestrator as any);

    const stats = eapDebugger.getComponentStats();
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º FileStructureChecker:');
    console.log(JSON.stringify(stats, null, 2));

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å FileStructureChecker –≤ –¥–µ–π—Å—Ç–≤–∏–∏
    console.log('\nüöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å FileStructureChecker...');
    const result = await orchestrator.analyzeProject('./docs');

    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log(`üìä –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: ${result.summary.overallScore}/100`);
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${result.checks.length}`);

    // –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç FileStructureChecker
    const structureResult = result.checks.find(
      (check: any) => check.checker === 'FileStructureChecker'
    );
    if (structureResult) {
      console.log('\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç FileStructureChecker:');
      console.log(`   - –û—Ü–µ–Ω–∫–∞: ${structureResult.score}/100`);
      console.log(`   - –ü—Ä–æ—à–µ–ª: ${structureResult.passed ? '–î–∞' : '–ù–µ—Ç'}`);
      console.log(`   - –°–æ–æ–±—â–µ–Ω–∏–µ: ${structureResult.message}`);
      console.log(`   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: ${structureResult.recommendations?.length || 0}`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ FileStructureChecker:', error);
  }
};

console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ FileStructureChecker...\n');
testIntegratedStructureChecker().catch(console.error);
