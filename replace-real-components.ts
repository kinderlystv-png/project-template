/**
 * –ó–∞–º–µ–Ω–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
/* eslint-disable no-console */
import fs from 'fs';
import path from 'path';

async function replaceRealComponents() {
  console.log('üîÑ –ó–∞–º–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à ComponentRegistry –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const { ComponentRegistry } = await import('./eap-debugger/src/ComponentRegistry.ts');
  const { AnalysisOrchestrator } = await import('./eap-analyzer/src/AnalysisOrchestrator.ts');

  try {
    const orchestrator = new AnalysisOrchestrator();
    const registry = new ComponentRegistry(orchestrator);
    const realComponents = registry.getRegisteredComponents();

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${realComponents.length}`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const componentsHtml = realComponents
      .map((component, index) => {
        const colors = ['#28a745', '#17a2b8', '#ffc107', '#dc3545', '#6f42c1'];
        const color = colors[index % colors.length];

        return `          <!-- ${component.name} -->
          <div class="component-block" style="border-left: 4px solid ${color}">
            <div class="component-row">
              <div class="component-cell component-name">üîç ${component.name} ${component.version}</div>
              <div class="component-cell">
                üîß –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä: <span class="status status-success">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω</span>
              </div>
              <div class="component-cell">
                üéØ –¢–æ—á–Ω–æ—Å—Ç—å: <span class="score-good"><strong>85.0%</strong></span>
              </div>
              <div class="component-cell">‚è±Ô∏è –í—Ä–µ–º—è: <strong>~20 —Å–µ–∫</strong></div>
              <div class="component-cell">
                ‚úÖ –°—Ç–∞—Ç—É—Å: <span class="status status-success">–ì–æ—Ç–æ–≤</span>
              </div>
              <div class="component-cell">
                üìä <span class="score-good"><strong>A- (85%)</strong></span>
              </div>
            </div>
            <div class="component-details">
              <div class="detail-cell">
                üîß <strong>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–Ω–∞–ª–∏–∑–∞:</strong> ${component.description || '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞'}
              </div>
              <div class="detail-cell">
                üìã <strong>–ü—É—Ç—å:</strong> ${component.path}
              </div>
              <div class="detail-cell">
                üí° <strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è C:\\kinderly-events:</strong> –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–∞–∫–µ—Ç—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.
              </div>
            </div>
          </div>`;
      })
      .join('\n\n');

    console.log(`üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ HTML –¥–ª—è ${realComponents.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`);

    // –ß–∏—Ç–∞–µ–º HTML —Ñ–∞–π–ª
    const htmlPath = './eap-enhanced-analysis-test.html';
    const html = fs.readFileSync(htmlPath, 'utf8');

    // –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—ã —Ç–∞–±–ª–∏—Ü—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const tableStart = html.indexOf('<div class="components-table">');
    const tableEnd = html.indexOf('</div>', tableStart) + 6;

    if (tableStart === -1) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
      return;
    }

    // –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã
    const beforeTable = html.substring(0, tableStart);
    const afterTable = html.substring(tableEnd);

    const newTable = `<div class="components-table">
${componentsHtml}
        </div>`;

    const updatedHtml = beforeTable + newTable + afterTable;

    // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
    const checkersCount = realComponents.filter(c => c.type === 'checker').length;
    const modulesCount = realComponents.filter(c => c.type === 'module').length;

    const finalHtml = updatedHtml
      .replace(/\d+\s+checkers/g, `${checkersCount} checkers`)
      .replace(/<strong>4<\/strong>/g, `<strong>${modulesCount}</strong>`);

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.writeFileSync(htmlPath, finalHtml);

    console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å ${realComponents.length} —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${checkersCount} checkers + ${modulesCount} modules`);

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const { exec } = await import('child_process');
    const { promisify } = await import('util');
    const execAsync = promisify(exec);

    const absolutePath = path.resolve(htmlPath);
    const urlWithCache = `file:///${absolutePath.replace(/\\/g, '/')}?real=${Date.now()}`;

    await execAsync(`start chrome --new-window "${urlWithCache}"`);
    console.log('üåê –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

replaceRealComponents().catch(console.error);
