/**
 * –õ–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è HTML
 */
/* eslint-disable no-console */
import fs from 'fs';
import path from 'path';

async function debugUpdate() {
  console.log('üîç === –û–¢–õ–ê–î–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø HTML ===');

  const htmlPath = './eap-enhanced-analysis-test.html';
  const absolutePath = path.resolve(htmlPath);

  console.log(`üìÇ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: ${absolutePath}`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
  const exists = fs.existsSync(htmlPath);
  console.log(`üìÑ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${exists}`);

  if (exists) {
    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    const content = fs.readFileSync(htmlPath, 'utf8');
    console.log(`üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${content.length} —Å–∏–º–≤–æ–ª–æ–≤`);

    // –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
    const has5checkers = content.includes('5 checkers');
    const has2checkers = content.includes('2 checkers');

    console.log(`üîç –°–æ–¥–µ—Ä–∂–∏—Ç "5 checkers": ${has5checkers}`);
    console.log(`üîç –°–æ–¥–µ—Ä–∂–∏—Ç "2 checkers": ${has2checkers}`);

    // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    const lines = content.split('\n');
    lines.forEach((line, index) => {
      if (line.includes('checkers')) {
        console.log(`üìç –°—Ç—Ä–æ–∫–∞ ${index + 1}: ${line.trim()}`);
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º timestamp –∏ –ª–æ–≥–∏ –≤ HTML
    const timestamp = new Date().toISOString();
    console.log(`‚è∞ –î–æ–±–∞–≤–ª—è–µ–º timestamp: ${timestamp}`);

    // –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ª–æ–≥–æ–≤
    const scriptStart = content.indexOf('<script>');
    if (scriptStart !== -1) {
      const beforeScript = content.substring(0, scriptStart);
      const afterScript = content.substring(scriptStart);

      const debugLog = `
<!-- –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø -->
<div style="position: fixed; top: 10px; right: 10px; background: red; color: white; padding: 10px; z-index: 9999; font-family: monospace; font-size: 12px;">
  <div>üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${timestamp}</div>
  <div>üîß Checkers –≤ HTML: ${has5checkers ? '5' : '2'}</div>
  <div>üìä –ö—ç—à –±—Ä–∞—É–∑–µ—Ä–∞: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å F5</div>
</div>
`;

      const updatedContent = beforeScript + debugLog + afterScript;
      fs.writeFileSync(htmlPath, updatedContent);

      console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏ –≤ HTML');
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª–∞
    const stats = fs.statSync(htmlPath);
    console.log(`üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${stats.mtime.toISOString()}`);

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫—ç—à–∞
    const { exec } = await import('child_process');
    const { promisify } = await import('util');
    const execAsync = promisify(exec);

    const urlWithCache = `file:///${absolutePath.replace(/\\/g, '/')}?t=${Date.now()}`;
    console.log(`üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –∞–Ω—Ç–∏-–∫—ç—à: ${urlWithCache}`);

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ Chrome —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º –∫—ç—à–µ–º
    try {
      await execAsync(
        `start chrome --new-window --disable-web-security --disable-cache "${urlWithCache}"`
      );
      console.log('üöÄ –û—Ç–∫—Ä—ã—Ç–æ –≤ Chrome —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º –∫—ç—à–µ–º');
    } catch (error) {
      console.log('‚ö†Ô∏è Chrome –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä');
      await execAsync(`start "" "${absolutePath}"`);
    }
  }

  console.log('üîç === –ö–û–ù–ï–¶ –û–¢–õ–ê–î–ö–ò ===');
}

debugUpdate().catch(console.error);
