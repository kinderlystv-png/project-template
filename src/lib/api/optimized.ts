/**
 * OPTIMIZED API Client v2.0
 * –ú–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API –∫–ª–∏–µ–Ω—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
 *
 * –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å –ø–ª–∞–≥–∏–Ω–∞–º–∏
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
 * - –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è
 * - –†–µ–∞–∫—Ç–∏–≤–Ω—ã–µ interceptors
 * - –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
 */

import { AppError, NetworkError, ServerError } from '../errors/handler.js';
import type { GraphQLResponse, RequestConfig } from './optimized-types.js';
import type { APIClientConfig } from './types.js';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –ø–ª–∞–≥–∏–Ω–æ–≤
interface APIPlugin {
  name: string;
  beforeRequest?: (config: RequestInit & { url: string }) => Promise<RequestInit & { url: string }>;
  afterResponse?: <T>(response: Response, data: T) => Promise<T>;
  onError?: (error: Error) => Promise<Error>;
}

interface CacheStrategy {
  shouldCache: (config: RequestConfig) => boolean;
  getCacheKey: (url: string, config: RequestConfig) => string;
  getCacheTTL: (config: RequestConfig) => number;
}

interface RetryStrategy {
  shouldRetry: (error: Error, attempt: number, maxAttempts: number) => boolean;
  getDelay: (attempt: number, baseDelay: number) => number;
}

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API –∫–ª–∏–µ–Ω—Ç —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
 */
export class OptimizedAPIClient {
  private config: APIClientConfig;
  private plugins: APIPlugin[] = [];
  private interceptors: {
    request: Array<
      (config: RequestInit & { url: string }) => Promise<RequestInit & { url: string }>
    >;
    response: Array<<T>(response: Response, data: T) => Promise<T>>;
    error: Array<(error: Error) => Promise<Error>>;
  } = {
    request: [],
    response: [],
    error: [],
  };

  private cacheStrategy!: CacheStrategy;
  private retryStrategy!: RetryStrategy;
  private abortControllers = new Map<string, AbortController>();

  constructor(config: Partial<APIClientConfig> = {}) {
    this.config = {
      baseURL: '/api',
      timeout: 30000,
      retryAttempts: 3,
      retryDelay: 1000,
      defaultHeaders: {
        'Content-Type': 'application/json',
      },
      enableCache: true,
      enableRetry: true,
      ...config,
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    this.initializeStrategies();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–ª–∞–≥–∏–Ω—ã
    this.setupDefaultPlugins();
  }

  private initializeStrategies() {
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    this.cacheStrategy = {
      shouldCache: config => config.method === 'GET' && this.config.enableCache && !!config.cache,

      getCacheKey: (url, config) =>
        config.cache?.key || `${url}_${JSON.stringify(config.params || {})}`,

      getCacheTTL: config => config.cache?.ttl || 300000, // 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    };

    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    this.retryStrategy = {
      shouldRetry: (error, attempt, maxAttempts) => {
        if (attempt >= maxAttempts) return false;
        if (error instanceof AppError && error.statusCode < 500) return false;
        return true;
      },

      getDelay: (attempt, baseDelay) => baseDelay * Math.pow(2, attempt) + Math.random() * 1000, // Jitter
    };
  }

  private setupDefaultPlugins() {
    // –ü–ª–∞–≥–∏–Ω –¥–ª—è CSRF –∑–∞—â–∏—Ç—ã
    this.use({
      name: 'csrf-protection',
      beforeRequest: async config => {
        if (['POST', 'PUT', 'DELETE', 'PATCH'].includes(config.method || '')) {
          const csrfToken = this.getCSRFToken();
          if (csrfToken) {
            config.headers = {
              ...config.headers,
              'X-CSRF-Token': csrfToken,
            };
          }
        }
        return config;
      },
    });

    // –ü–ª–∞–≥–∏–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –≤ development)
    if (import.meta.env.DEV) {
      this.use({
        name: 'dev-logger',
        beforeRequest: async config => {
          // eslint-disable-next-line no-console
          console.log(`üöÄ API Request: ${config.method} ${config.url}`, config);
          return config;
        },
        afterResponse: async (response, data) => {
          // eslint-disable-next-line no-console
          console.log(`‚úÖ API Response: ${response.status}`, data);
          return data;
        },
        onError: async error => {
          // eslint-disable-next-line no-console
          console.error('‚ùå API Error:', error);
          return error;
        },
      });
    }
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –ø–ª–∞–≥–∏–Ω –∫ API –∫–ª–∏–µ–Ω—Ç—É
   */
  use(plugin: APIPlugin): this {
    this.plugins.push(plugin);

    if (plugin.beforeRequest) {
      this.interceptors.request.push(plugin.beforeRequest);
    }
    if (plugin.afterResponse) {
      this.interceptors.response.push(plugin.afterResponse);
    }
    if (plugin.onError) {
      this.interceptors.error.push(plugin.onError);
    }

    return this;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  private async request<T>(endpoint: string, config: RequestConfig = {}): Promise<T> {
    const {
      params,
      timeout = this.config.timeout,
      retry = this.config.retryAttempts,
      retryDelay = this.config.retryDelay,
      abortKey,
      ...fetchConfig
    } = config;

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ URL
    const url = this.buildURL(endpoint, params);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
    if (this.cacheStrategy.shouldCache(config)) {
      const cacheKey = this.cacheStrategy.getCacheKey(url, config);
      const cached = await this.getFromCache<T>(cacheKey);
      if (cached) return cached;
    }

    // Abort controller –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    const abortController = new AbortController();
    if (abortKey) {
      // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å —Å —Ç–µ–º –∂–µ –∫–ª—é—á–æ–º
      this.abortControllers.get(abortKey)?.abort();
      this.abortControllers.set(abortKey, abortController);
    }

    // –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
    let requestConfig: RequestInit & { url: string } = {
      method: 'GET',
      ...fetchConfig,
      url,
      headers: {
        ...this.config.defaultHeaders,
        ...fetchConfig.headers,
      },
      signal: abortController.signal,
    };

    // –ü—Ä–∏–º–µ–Ω—è–µ–º interceptors –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
    for (const interceptor of this.interceptors.request) {
      requestConfig = await interceptor(requestConfig);
    }

    let lastError: Error | null = null;
    const maxAttempts = this.config.enableRetry ? retry : 1;

    // –¶–∏–∫–ª –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    for (let attempt = 0; attempt < maxAttempts; attempt++) {
      try {
        const response = await this.fetchWithTimeout(requestConfig.url, requestConfig, timeout);

        if (!response.ok) {
          throw this.createAPIError(response);
        }

        let data = (await response.json()) as T;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º interceptors –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
        for (const interceptor of this.interceptors.response) {
          data = await interceptor(response, data);
        }

        // –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        if (this.cacheStrategy.shouldCache(config)) {
          const cacheKey = this.cacheStrategy.getCacheKey(url, config);
          const ttl = this.cacheStrategy.getCacheTTL(config);
          await this.setToCache(cacheKey, data, ttl);
        }

        return data;
      } catch (error) {
        lastError = error as Error;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º interceptors –¥–ª—è –æ—à–∏–±–æ–∫
        for (const interceptor of this.interceptors.error) {
          lastError = await interceptor(lastError);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
        if (!this.retryStrategy.shouldRetry(lastError, attempt, maxAttempts)) {
          throw lastError;
        }

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
        if (attempt < maxAttempts - 1) {
          const delay = this.retryStrategy.getDelay(attempt, retryDelay);
          await this.delay(delay);
        }
      }
    }

    throw lastError || new NetworkError('Request failed after all retries');
  }

  private buildURL(endpoint: string, params?: Record<string, string | number | boolean>): string {
    const url = new URL(`${this.config.baseURL}${endpoint}`, window.location.origin);

    if (params) {
      Object.entries(params).forEach(([key, value]) => {
        url.searchParams.append(key, String(value));
      });
    }

    return url.toString();
  }

  private async fetchWithTimeout(
    url: string,
    config: RequestInit,
    timeout: number
  ): Promise<Response> {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), timeout);

    // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º abort signals
    const combinedSignal = this.combineAbortSignals(
      controller.signal,
      config.signal as AbortSignal
    );

    try {
      return await fetch(url, {
        ...config,
        signal: combinedSignal,
      });
    } finally {
      clearTimeout(timeoutId);
    }
  }

  private combineAbortSignals(...signals: (AbortSignal | undefined)[]): AbortSignal {
    const controller = new AbortController();

    for (const signal of signals) {
      if (signal) {
        if (signal.aborted) {
          controller.abort();
          break;
        }
        signal.addEventListener('abort', () => controller.abort());
      }
    }

    return controller.signal;
  }

  private createAPIError(response: Response): AppError {
    if (response.status >= 500) {
      return new ServerError(`Server Error: ${response.status} ${response.statusText}`, {
        status: response.status,
        statusText: response.statusText,
        url: response.url,
      });
    }

    return new AppError(
      `HTTP ${response.status}: ${response.statusText}`,
      'HTTP_ERROR',
      response.status,
      true,
      {
        status: response.status,
        statusText: response.statusText,
        url: response.url,
      }
    );
  }

  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  private getCSRFToken(): string | null {
    return (
      sessionStorage.getItem('csrf_token') ||
      document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') ||
      null
    );
  }

  // –ú–µ—Ç–æ–¥—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É—é—Ç –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É)
  private async getFromCache<T>(key: string): Promise<T | null> {
    try {
      const { cache } = await import('../cache/manager.js');
      return await cache.get<T>(key);
    } catch {
      return null;
    }
  }

  private async setToCache<T>(key: string, data: T, ttl: number): Promise<void> {
    try {
      const { cache } = await import('../cache/manager.js');
      await cache.set(key, data, { ttl, storage: 'memory' });
    } catch {
      // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    }
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ HTTP –º–µ—Ç–æ–¥—ã
  async get<T>(endpoint: string, config?: RequestConfig): Promise<T> {
    return this.request<T>(endpoint, { ...config, method: 'GET' });
  }

  async post<T>(endpoint: string, data?: unknown, config?: RequestConfig): Promise<T> {
    return this.request<T>(endpoint, {
      ...config,
      method: 'POST',
      body: data ? JSON.stringify(data) : undefined,
    });
  }

  async put<T>(endpoint: string, data?: unknown, config?: RequestConfig): Promise<T> {
    return this.request<T>(endpoint, {
      ...config,
      method: 'PUT',
      body: data ? JSON.stringify(data) : undefined,
    });
  }

  async patch<T>(endpoint: string, data?: unknown, config?: RequestConfig): Promise<T> {
    return this.request<T>(endpoint, {
      ...config,
      method: 'PATCH',
      body: data ? JSON.stringify(data) : undefined,
    });
  }

  async delete<T>(endpoint: string, config?: RequestConfig): Promise<T> {
    return this.request<T>(endpoint, { ...config, method: 'DELETE' });
  }

  // –£—Ç–∏–ª–∏—Ç—ã
  setBaseURL(baseURL: string): void {
    this.config.baseURL = baseURL;
  }

  setDefaultHeader(key: string, value: string): void {
    (this.config.defaultHeaders as Record<string, string>)[key] = value;
  }

  removeDefaultHeader(key: string): void {
    delete (this.config.defaultHeaders as Record<string, string>)[key];
  }

  setCSRFToken(token: string): void {
    sessionStorage.setItem('csrf_token', token);
  }

  /**
   * –û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ –∫–ª—é—á—É
   */
  abortRequest(key: string): void {
    this.abortControllers.get(key)?.abort();
    this.abortControllers.delete(key);
  }

  /**
   * –û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
   */
  abortAllRequests(): void {
    for (const controller of this.abortControllers.values()) {
      controller.abort();
    }
    this.abortControllers.clear();
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∫—ç—à
   */
  async clearCache(): Promise<void> {
    try {
      const { cache } = await import('../cache/manager.js');
      cache.clear();
    } catch {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    }
  }
}

// –†–∞—Å—à–∏—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –¥–ª—è GraphQL
interface GraphQLAPIClient extends OptimizedAPIClient {
  graphql<T>(query: string, variables?: Record<string, unknown>): Promise<T>;
}

/**
 * –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö API –∫–ª–∏–µ–Ω—Ç–æ–≤
 */
export class OptimizedAPIClientFactory {
  /**
   * –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π API –∫–ª–∏–µ–Ω—Ç
   */
  static createBasic(config?: Partial<APIClientConfig>): OptimizedAPIClient {
    return new OptimizedAPIClient(config);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  static createAuthClient(config?: Partial<APIClientConfig>): OptimizedAPIClient {
    const client = new OptimizedAPIClient(config);

    // –ü–ª–∞–≥–∏–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    client.use({
      name: 'auth-token',
      beforeRequest: async config => {
        const token = localStorage.getItem('auth_token');
        if (token) {
          config.headers = {
            ...config.headers,
            Authorization: `Bearer ${token}`,
          };
        }
        return config;
      },
      onError: async error => {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω –ø—Ä–∏ 401
        if (error instanceof AppError && error.statusCode === 401) {
          localStorage.removeItem('auth_token');
          window.location.href = '/login';
        }
        return error;
      },
    });

    return client;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç API –∫–ª–∏–µ–Ω—Ç –¥–ª—è GraphQL
   */
  static createGraphQLClient(config?: Partial<APIClientConfig>): GraphQLAPIClient {
    const client = new OptimizedAPIClient({
      ...config,
      defaultHeaders: {
        'Content-Type': 'application/json',
        ...config?.defaultHeaders,
      },
    }) as GraphQLAPIClient;

    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è GraphQL –∑–∞–ø—Ä–æ—Å–æ–≤
    client.graphql = async function <T>(
      query: string,
      variables?: Record<string, unknown>
    ): Promise<T> {
      const response = await this.post<GraphQLResponse<T>>('/graphql', {
        query,
        variables,
      });

      if (response.errors?.length) {
        throw new AppError('GraphQL Error', 'GRAPHQL_ERROR', 400, true, response.errors);
      }

      return response.data;
    };

    return client;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const optimizedApi = OptimizedAPIClientFactory.createBasic({
  baseURL: import.meta.env.VITE_API_URL || '/api',
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
export const authApi = OptimizedAPIClientFactory.createAuthClient({
  baseURL: import.meta.env.VITE_API_URL || '/api',
});

// –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const api = optimizedApi;
