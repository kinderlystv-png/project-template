/**
 * üèóÔ∏è –ë–∞–∑–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤ EAP
 */

export interface AnalysisCriteria {
  name: string;
  score: string;
  details?: string;
  weight?: number;
}

export interface AnalysisResult {
  componentName: string;
  version: string;
  type: 'checker' | 'module';
  status: 'success' | 'error' | 'warning';
  accuracy: number;
  executionTime: number;
  overallScore: string;
  criteria: AnalysisCriteria[];
  details?: string;
  timestamp: Date;
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
  filePath?: string;
  orchestratorStatus?: string;
  functionality?: string;
  recommendations?: string[];
  readyStatus?: string;
}

export interface RealAnalyzer {
  name: string;
  version: string;
  type: 'checker' | 'module';

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
   */
  analyze(projectPath: string): Promise<AnalysisResult>;

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
   */
  getCriteria(): AnalysisCriteria[];

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∞–Ω–∞–ª–∏–∑—É
   */
  isReady(): boolean;
}

export interface CacheEntry {
  projectPath: string;
  timestamp: Date;
  results: AnalysisResult[];
  projectHash?: string;
}

export interface AnalysisCache {
  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
   */
  save(projectPath: string, results: AnalysisResult[]): Promise<void>;

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
   */
  load(projectPath: string): Promise<CacheEntry | null>;

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏
   */
  getHistory(projectPath: string, limit?: number): Promise<CacheEntry[]>;

  /**
   * –û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
   */
  cleanup(olderThanDays: number): Promise<void>;
}

export interface QualityTrend {
  timestamp: Date;
  overallScore: number;
  componentScores: Record<string, number>;
  changeFromPrevious?: {
    overall: number;
    components: Record<string, number>;
  };
}

export interface DynamicsReport {
  projectPath: string;
  generatedAt: Date;
  trends: QualityTrend[];
  summary: {
    improvementAreas: string[];
    regressionAreas: string[];
    stableComponents: string[];
  };
}
