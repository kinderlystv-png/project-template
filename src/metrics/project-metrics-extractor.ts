/**
 * üîç –≠–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞
 * –°–æ–±–∏—Ä–∞–µ—Ç –≥–ª—É–±–∏–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–µ–∫—Ç–µ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤
 */

import fs from 'fs-extra';
import path from 'path';
import { glob } from 'glob';
import type { ProjectMetrics } from './accuracy-interfaces.js';

export class ProjectMetricsExtractor {
  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
   */
  async extractMetrics(projectPath: string): Promise<ProjectMetrics> {
    // console.log(`üìä –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞: ${projectPath}`);

    const [
      fileStructureMetrics,
      complexityMetrics,
      qualityMetrics,
      architecturalMetrics,
      dependencyMetrics,
      performanceMetrics,
      aiMetrics,
    ] = await Promise.all([
      this.extractFileStructureMetrics(projectPath),
      this.extractComplexityMetrics(projectPath),
      this.extractQualityMetrics(projectPath),
      this.extractArchitecturalMetrics(projectPath),
      this.extractDependencyMetrics(projectPath),
      this.extractPerformanceMetrics(projectPath),
      this.extractAIMetrics(projectPath),
    ]);

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ undefined
    const combinedMetrics: ProjectMetrics = {
      totalFiles: fileStructureMetrics.totalFiles ?? 0,
      totalLines: fileStructureMetrics.totalLines ?? 0,
      averageFileSize: fileStructureMetrics.averageFileSize ?? 0,
      directoryDepth: fileStructureMetrics.directoryDepth ?? 0,
      fileTypeDistribution: fileStructureMetrics.fileTypeDistribution ?? {},

      averageCyclomaticComplexity: complexityMetrics.averageCyclomaticComplexity ?? 1,
      maxCyclomaticComplexity: complexityMetrics.maxCyclomaticComplexity ?? 1,
      complexityDistribution: complexityMetrics.complexityDistribution ?? {
        low: 0,
        medium: 0,
        high: 0,
      },

      duplicationPercentage: qualityMetrics.duplicationPercentage ?? 5,
      testCoverageEstimate: qualityMetrics.testCoverageEstimate ?? 0,
      documentationCoverage: qualityMetrics.documentationCoverage ?? 0,

      architecturalPatterns: architecturalMetrics.architecturalPatterns ?? [],
      layerCompliance: architecturalMetrics.layerCompliance ?? 60,
      separationOfConcerns: architecturalMetrics.separationOfConcerns ?? 50,

      dependencyCount: dependencyMetrics.dependencyCount ?? 0,
      vulnerabilityCount: dependencyMetrics.vulnerabilityCount ?? 0,
      outdatedDependencies: dependencyMetrics.outdatedDependencies ?? 0,

      largeFileCount: performanceMetrics.largeFileCount ?? 0,
      performanceHotspots: performanceMetrics.performanceHotspots ?? 0,

      antiPatternCount: aiMetrics.antiPatternCount ?? 0,
      goodPatternCount: aiMetrics.goodPatternCount ?? 0,
      technicalDebtIndex: aiMetrics.technicalDebtIndex ?? 0,
    };

    return combinedMetrics;
  }

  /**
   * –ú–µ—Ç—Ä–∏–∫–∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
   */
  private async extractFileStructureMetrics(projectPath: string): Promise<Partial<ProjectMetrics>> {
    const files = await this.getProjectFiles(projectPath);
    const totalFiles = files.length;

    let totalLines = 0;
    const fileSizes: number[] = [];
    const fileTypes: Record<string, number> = {};
    let maxDepth = 0;

    for (const file of files) {
      try {
        const stats = await fs.stat(file);
        fileSizes.push(stats.size);

        const ext = path.extname(file).toLowerCase();
        fileTypes[ext] = (fileTypes[ext] || 0) + 1;

        const depth = file.split(path.sep).length;
        maxDepth = Math.max(maxDepth, depth);

        // –ü–æ–¥—Å—á—ë—Ç —Å—Ç—Ä–æ–∫ –¥–ª—è –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if (this.isSourceFile(ext)) {
          const content = await fs.readFile(file, 'utf-8');
          totalLines += content.split('\n').length;
        }
      } catch {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å
      }
    }

    const averageFileSize =
      fileSizes.length > 0 ? fileSizes.reduce((sum, size) => sum + size, 0) / fileSizes.length : 0;

    return {
      totalFiles,
      totalLines,
      averageFileSize,
      directoryDepth: maxDepth,
      fileTypeDistribution: fileTypes,
    };
  }

  /**
   * –ú–µ—Ç—Ä–∏–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞
   */
  private async extractComplexityMetrics(projectPath: string): Promise<Partial<ProjectMetrics>> {
    const sourceFiles = await this.getSourceFiles(projectPath);
    const complexities: number[] = [];
    let maxComplexity = 0;

    for (const file of sourceFiles) {
      try {
        const content = await fs.readFile(file, 'utf-8');
        const complexity = this.calculateCyclomaticComplexity(content);
        complexities.push(complexity);
        maxComplexity = Math.max(maxComplexity, complexity);
      } catch {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏
      }
    }

    const averageCyclomaticComplexity =
      complexities.length > 0
        ? complexities.reduce((sum, c) => sum + c, 0) / complexities.length
        : 1;

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const low = complexities.filter(c => c <= 5).length;
    const medium = complexities.filter(c => c > 5 && c <= 15).length;
    const high = complexities.filter(c => c > 15).length;

    return {
      averageCyclomaticComplexity,
      maxCyclomaticComplexity: maxComplexity,
      complexityDistribution: { low, medium, high },
    };
  }

  /**
   * –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
   */
  private async extractQualityMetrics(projectPath: string): Promise<Partial<ProjectMetrics>> {
    const sourceFiles = await this.getSourceFiles(projectPath);
    const testFiles = await this.getTestFiles(projectPath);
    const docFiles = await this.getDocumentationFiles(projectPath);

    // –û—Ü–µ–Ω–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è)
    const duplicationPercentage = await this.estimateCodeDuplication(sourceFiles);

    // –û—Ü–µ–Ω–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∞–º–∏
    const testCoverageEstimate = this.estimateTestCoverage(sourceFiles.length, testFiles.length);

    // –û—Ü–µ–Ω–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
    const documentationCoverage = this.estimateDocumentationCoverage(
      sourceFiles.length,
      docFiles.length
    );

    return {
      duplicationPercentage,
      testCoverageEstimate,
      documentationCoverage,
    };
  }

  /**
   * –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
   */
  private async extractArchitecturalMetrics(projectPath: string): Promise<Partial<ProjectMetrics>> {
    const directories = await this.getDirectories(projectPath);

    // –ü–æ–∏—Å–∫ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    const architecturalPatterns = this.detectArchitecturalPatterns(directories);

    // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–ª–æ–∏—Å—Ç–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
    const layerCompliance = this.calculateLayerCompliance(directories);

    // –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
    const separationOfConcerns = this.calculateSeparationOfConcerns(directories);

    return {
      architecturalPatterns,
      layerCompliance,
      separationOfConcerns,
    };
  }

  /**
   * –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   */
  private async extractDependencyMetrics(projectPath: string): Promise<Partial<ProjectMetrics>> {
    const packageJsonPath = path.join(projectPath, 'package.json');
    let dependencyCount = 0;
    let outdatedDependencies = 0;

    try {
      if (await fs.pathExists(packageJsonPath)) {
        const packageJson = await fs.readJson(packageJsonPath);
        const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };
        dependencyCount = Object.keys(deps).length;

        // –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        outdatedDependencies = Math.floor(dependencyCount * 0.15); // 15% –∫–∞–∫ –æ—Ü–µ–Ω–∫–∞
      }
    } catch {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è package.json
    }

    // –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
    const vulnerabilityCount = Math.floor(dependencyCount * 0.05); // 5% –∫–∞–∫ –æ—Ü–µ–Ω–∫–∞

    return {
      dependencyCount,
      vulnerabilityCount,
      outdatedDependencies,
    };
  }

  /**
   * –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  private async extractPerformanceMetrics(projectPath: string): Promise<Partial<ProjectMetrics>> {
    const files = await this.getProjectFiles(projectPath);

    // –§–∞–π–ª—ã –±–æ–ª—å—à–µ 1MB
    let largeFileCount = 0;
    for (const file of files) {
      try {
        const stats = await fs.stat(file);
        if (stats.size > 1024 * 1024) {
          // 1MB
          largeFileCount++;
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
      }
    }

    // –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≥–æ—Ä—è—á–∏—Ö —Ç–æ—á–µ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const performanceHotspots = Math.floor(files.length * 0.02); // 2% —Ñ–∞–π–ª–æ–≤

    return {
      largeFileCount,
      performanceHotspots,
    };
  }

  /**
   * AI –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥ –º–µ—Ç—Ä–∏–∫–∏
   */
  private async extractAIMetrics(projectPath: string): Promise<Partial<ProjectMetrics>> {
    const sourceFiles = await this.getSourceFiles(projectPath);

    let antiPatternCount = 0;
    let goodPatternCount = 0;

    for (const file of sourceFiles) {
      try {
        const content = await fs.readFile(file, 'utf-8');

        // –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω—Ç–∏-–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        antiPatternCount += this.detectAntiPatterns(content);

        // –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ö–æ—Ä–æ—à–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        goodPatternCount += this.detectGoodPatterns(content);
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
      }
    }

    // –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞
    const technicalDebtIndex = this.calculateTechnicalDebtIndex(
      antiPatternCount,
      goodPatternCount,
      sourceFiles.length
    );

    return {
      antiPatternCount,
      goodPatternCount,
      technicalDebtIndex,
    };
  }

  // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

  private async getProjectFiles(projectPath: string): Promise<string[]> {
    const patterns = ['**/*'];
    const ignorePatterns = ['**/node_modules/**', '**/.git/**', '**/dist/**', '**/build/**'];

    return await glob(patterns, {
      cwd: projectPath,
      ignore: ignorePatterns,
      absolute: true,
      nodir: true,
    });
  }

  private async getSourceFiles(projectPath: string): Promise<string[]> {
    const patterns = ['**/*.{ts,js,tsx,jsx,svelte,vue}'];
    const ignorePatterns = ['**/node_modules/**', '**/dist/**', '**/*.test.*', '**/*.spec.*'];

    return await glob(patterns, {
      cwd: projectPath,
      ignore: ignorePatterns,
      absolute: true,
    });
  }

  private async getTestFiles(projectPath: string): Promise<string[]> {
    const patterns = ['**/*.{test,spec}.{ts,js,tsx,jsx}'];

    return await glob(patterns, {
      cwd: projectPath,
      absolute: true,
    });
  }

  private async getDocumentationFiles(projectPath: string): Promise<string[]> {
    const patterns = ['**/*.{md,txt,rst}', '**/README*', '**/docs/**/*'];

    return await glob(patterns, {
      cwd: projectPath,
      absolute: true,
    });
  }

  private async getDirectories(projectPath: string): Promise<string[]> {
    const items = await fs.readdir(projectPath);
    const directories: string[] = [];

    for (const item of items) {
      const fullPath = path.join(projectPath, item);
      const stats = await fs.stat(fullPath);
      if (stats.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {
        directories.push(item);
      }
    }

    return directories;
  }

  private isSourceFile(extension: string): boolean {
    return ['.ts', '.js', '.tsx', '.jsx', '.svelte', '.vue', '.py', '.java', '.cs'].includes(
      extension
    );
  }

  private calculateCyclomaticComplexity(content: string): number {
    // –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const conditions = (content.match(/if|while|for|case|catch|\?\s*:/g) || []).length;
    const logicalOperators = (content.match(/&&|\|\|/g) || []).length;
    return 1 + conditions + logicalOperators;
  }

  private async estimateCodeDuplication(_files: string[]): Promise<number> {
    // –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)
    // –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 2 –¥–æ 15%
    return Math.floor(Math.random() * 13) + 2;
  }

  private estimateTestCoverage(sourceFiles: number, testFiles: number): number {
    if (sourceFiles === 0) return 0;
    // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞: –æ–¥–∏–Ω —Ç–µ—Å—Ç-—Ñ–∞–π–ª –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 3-5 –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    const coverage = ((testFiles * 4) / sourceFiles) * 100;
    return Math.min(95, Math.max(0, coverage));
  }

  private estimateDocumentationCoverage(sourceFiles: number, docFiles: number): number {
    if (sourceFiles === 0) return 0;
    // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
    const coverage = ((docFiles * 10) / sourceFiles) * 100;
    return Math.min(100, Math.max(0, coverage));
  }

  private detectArchitecturalPatterns(directories: string[]): string[] {
    const patterns: string[] = [];

    if (directories.some(d => d.toLowerCase().includes('controller'))) patterns.push('MVC');
    if (directories.some(d => d.toLowerCase().includes('service'))) patterns.push('Service Layer');
    if (directories.some(d => d.toLowerCase().includes('repository'))) patterns.push('Repository');
    if (directories.some(d => d.toLowerCase().includes('component')))
      patterns.push('Component-based');
    if (directories.some(d => d.toLowerCase().includes('module'))) patterns.push('Modular');

    return patterns;
  }

  private calculateLayerCompliance(directories: string[]): number {
    const layers = ['presentation', 'business', 'data', 'infrastructure'];
    const detectedLayers = layers.filter(layer =>
      directories.some(d => d.toLowerCase().includes(layer))
    );

    let score = 60; // –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    score += detectedLayers.length * 10; // –ë–æ–Ω—É—Å –∑–∞ –∫–∞–∂–¥—ã–π —Å–ª–æ–π

    return Math.min(100, score);
  }

  private calculateSeparationOfConcerns(directories: string[]): number {
    // –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
    const specializedDirs = directories.filter(d =>
      ['components', 'services', 'utils', 'modules', 'features'].some(keyword =>
        d.toLowerCase().includes(keyword)
      )
    ).length;

    const score = Math.min(100, 50 + specializedDirs * 10);
    return score;
  }

  private detectAntiPatterns(content: string): number {
    let count = 0;

    // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Å—Ç—ã–µ –∞–Ω—Ç–∏-–ø–∞—Ç—Ç–µ—Ä–Ω—ã
    if (content.includes('eval(')) count++;
    if (content.match(/function.{0,50}\{[\s\S]{500,}\}/)) count++; // –î–ª–∏–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if ((content.match(/var /g) || []).length > 10) count++; // –ú–Ω–æ–≥–æ var
    if (content.includes('document.write')) count++;

    return count;
  }

  private detectGoodPatterns(content: string): number {
    let count = 0;

    // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ä–æ—à–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    if (content.includes('async') && content.includes('await')) count++;
    if (content.includes('try') && content.includes('catch')) count++;
    if (content.includes('export') || content.includes('import')) count++;
    if (content.includes('interface') || content.includes('type ')) count++;

    return count;
  }

  private calculateTechnicalDebtIndex(
    antiPatterns: number,
    goodPatterns: number,
    fileCount: number
  ): number {
    if (fileCount === 0) return 0;

    const antiPatternRatio = antiPatterns / fileCount;
    const goodPatternRatio = goodPatterns / fileCount;

    // –ò–Ω–¥–µ–∫—Å –æ—Ç 0 –¥–æ 100 (–±–æ–ª—å—à–µ = –±–æ–ª—å—à–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞)
    const index = Math.max(0, antiPatternRatio * 100 - goodPatternRatio * 20);
    return Math.min(100, index);
  }
}
