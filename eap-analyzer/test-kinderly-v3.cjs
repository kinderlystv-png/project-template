/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç FileStructureAnalyzer v3.0 —Å –ø–æ–ª–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞–∫ –±—É–¥—Ç–æ –æ–Ω –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å AnalysisOrchestrator
 */

const path = require('path');
const fs = require('fs');

async function testFileStructureAnalyzerV3() {
  console.log('üöÄ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç FileStructureAnalyzer v3.0 —Å –ø–æ–ª–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏...\n');

  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ kinderly-events
    const projectPath = 'C:\\kinderly-events';

    if (!fs.existsSync(projectPath)) {
      console.log(`‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${projectPath}`);
      return;
    }

    console.log(`üìÇ –¢–µ—Å—Ç–∏—Ä—É–µ–º FileStructureAnalyzer v3.0 –Ω–∞: ${projectPath}`);

    const startTime = Date.now();

    // === –§–ê–ó–ê 1: –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –§–ê–ô–õ–û–í–û–ô –°–ò–°–¢–ï–ú–´ ===
    console.log('\nüîç –§–ê–ó–ê 1: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...');
    const scannedFiles = await scanProjectWithFileSystemScanner(projectPath);
    console.log(`   ‚úÖ –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${scannedFiles.length}`);
    console.log(
      `   üìä –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${Math.round(scannedFiles.reduce((sum, f) => sum + f.size, 0) / scannedFiles.length)} –±–∞–π—Ç`
    );

    // === –§–ê–ó–ê 2: –í–´–ß–ò–°–õ–ï–ù–ò–ï –ú–ï–¢–†–ò–ö –ö–ê–ß–ï–°–¢–í–ê ===
    console.log('\nüßÆ –§–ê–ó–ê 2: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞...');
    const qualityMetrics = calculateAdvancedQualityMetrics(scannedFiles, projectPath);

    // === –§–ê–ó–ê 3: –°–û–ó–î–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ê–ù–ê–õ–ò–ó–ê ===
    console.log('\nüìä –§–ê–ó–ê 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞...');
    const analysisResult = createComponentResult(qualityMetrics, scannedFiles, startTime);

    const duration = Date.now() - startTime;

    // === –í–´–í–û–î –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –í –°–¢–ò–õ–ï AnalysisOrchestrator ===
    console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ FileStructureAnalyzer v3.0:');
    console.log('='.repeat(60));
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);
    console.log(`üìÅ –û–±—â–∏–π –±–∞–ª–ª –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${analysisResult.score}/${analysisResult.maxScore}`);
    console.log(`üìà –°—Ç–∞—Ç—É—Å: ${analysisResult.status}`);
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${analysisResult.checkResults.length}`);

    // –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
    console.log('\nüìã –î–ï–¢–ê–õ–ò –ü–†–û–í–ï–†–û–ö:');
    console.log('-'.repeat(50));

    analysisResult.checkResults.forEach((checkResult, index) => {
      const statusIcon = checkResult.passed ? '‚úÖ' : '‚ùå';
      console.log(`\n${index + 1}. ${statusIcon} ${checkResult.check.name}`);
      console.log(`   üéØ –ë–∞–ª–ª: ${checkResult.score}/${checkResult.maxScore}`);
      console.log(`   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${checkResult.check.description}`);
      console.log(`   üìä –î–µ—Ç–∞–ª–∏: ${checkResult.details}`);

      if (checkResult.recommendations && checkResult.recommendations.length > 0) {
        console.log(`   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:`);
        checkResult.recommendations.forEach(rec => {
          console.log(`      ‚Ä¢ ${rec}`);
        });
      }

      if (checkResult.metrics) {
        console.log(`   üìà –ú–µ—Ç—Ä–∏–∫–∏:`);
        Object.entries(checkResult.metrics).forEach(([key, value]) => {
          console.log(`      - ${key}: ${value}`);
        });
      }
    });

    // –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    console.log('\nüî¨ –î–ï–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò –ö–ê–ß–ï–°–¢–í–ê:');
    console.log('-'.repeat(40));
    console.log(`üìê –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: ${qualityMetrics.architecture.score}/100`);
    console.log(`üß© –ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å: ${qualityMetrics.modularity.score}/100`);
    console.log(`üîß –°–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º–æ—Å—Ç—å: ${qualityMetrics.maintainability.score}/100`);
    console.log(`üåÄ –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${qualityMetrics.complexity.score}/100`);
    console.log(`üí∏ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥: ${qualityMetrics.technicalDebt.score}/100`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
    const reportPath = path.join(__dirname, 'reports', `kinderly-v3-analysis-${Date.now()}.json`);
    if (!fs.existsSync(path.dirname(reportPath))) {
      fs.mkdirSync(path.dirname(reportPath), { recursive: true });
    }

    const fullReport = {
      timestamp: new Date().toISOString(),
      projectPath,
      duration,
      analyzer: 'FileStructureAnalyzer v3.0',
      totalFiles: scannedFiles.length,
      result: analysisResult,
      qualityMetrics,
    };

    fs.writeFileSync(reportPath, JSON.stringify(fullReport, null, 2));
    console.log(`\nüíæ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);

    return fullReport;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ:', error);
    throw error;
  }
}

// –ò–º–∏—Ç–∏—Ä—É–µ–º FileSystemScanner
async function scanProjectWithFileSystemScanner(projectPath) {
  const scannedFiles = [];

  function scanDirectory(dir, relativePath = '', depth = 0) {
    if (depth > 10) return; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É

    try {
      const entries = fs.readdirSync(dir, { withFileTypes: true });

      for (const entry of entries) {
        const fullPath = path.join(dir, entry.name);
        const relPath = path.join(relativePath, entry.name);

        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã –∏ node_modules
        if (entry.name.startsWith('.') || entry.name === 'node_modules' || entry.name === 'dist') {
          continue;
        }

        if (entry.isDirectory()) {
          scanDirectory(fullPath, relPath, depth + 1);
        } else if (entry.isFile()) {
          const stat = fs.statSync(fullPath);
          scannedFiles.push({
            name: entry.name,
            path: fullPath,
            relativePath: relPath,
            size: stat.size,
            extension: path.extname(entry.name),
            depth: depth,
            directory: path.dirname(relPath),
            lastModified: stat.mtime,
          });
        }
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    }
  }

  scanDirectory(projectPath);
  return scannedFiles;
}

// –ò–º–∏—Ç–∏—Ä—É–µ–º MetricsCalculator
function calculateAdvancedQualityMetrics(files, projectPath) {
  // –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
  const architecture = calculateArchitectureMetrics(files);

  // –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥—É–ª—å–Ω–æ—Å—Ç–∏
  const modularity = calculateModularityMetrics(files);

  // –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º–æ—Å—Ç–∏
  const maintainability = calculateMaintainabilityMetrics(files);

  // –ú–µ—Ç—Ä–∏–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  const complexity = calculateComplexityMetrics(files);

  // –ú–µ—Ç—Ä–∏–∫–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞
  const technicalDebt = calculateTechnicalDebtMetrics(files);

  return {
    architecture,
    modularity,
    maintainability,
    complexity,
    technicalDebt,
  };
}

function calculateArchitectureMetrics(files) {
  const directories = new Set(files.map(f => f.directory));
  const hasTestDir = Array.from(directories).some(d => d.includes('test') || d.includes('spec'));
  const hasSrcDir = Array.from(directories).some(d => d.includes('src'));
  const hasDocsDir = Array.from(directories).some(d => d.includes('doc'));

  let score = 60; // –±–∞–∑–æ–≤—ã–π –±–∞–ª–ª

  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã
  let patternsDetected = 0;
  if (hasTestDir) {
    score += 15;
    patternsDetected++;
  }
  if (hasSrcDir) {
    score += 10;
    patternsDetected++;
  }
  if (hasDocsDir) {
    score += 5;
    patternsDetected++;
  }

  // –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
  const separationScore = Math.min(100, directories.size * 2);

  return {
    score: Math.min(100, score),
    patterns_detected: patternsDetected,
    separation_of_concerns: separationScore,
    dependency_management: 75,
    layer_compliance: 80,
    cohesion_score: 85,
  };
}

function calculateModularityMetrics(files) {
  const directories = new Set(files.map(f => f.directory));
  const moduleCount = directories.size;
  const averageModuleSize = files.length / moduleCount;

  let score = 70;

  // –•–æ—Ä–æ—à–∞—è –º–æ–¥—É–ª—å–Ω–æ—Å—Ç—å - –º–æ–¥—É–ª–∏ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
  if (averageModuleSize > 5 && averageModuleSize < 25) score += 20;
  if (moduleCount > 5) score += 10;

  return {
    score: Math.min(100, score),
    module_count: moduleCount,
    average_module_size: averageModuleSize,
    size_variance: 0.3,
    coupling_factor: 0.2,
    reusability_score: 75,
  };
}

function calculateMaintainabilityMetrics(files) {
  const avgFileSize = files.reduce((sum, f) => sum + f.size, 0) / files.length;
  const hasReadme = files.some(f => f.name.toLowerCase().includes('readme'));
  const hasPackageJson = files.some(f => f.name === 'package.json');

  let score = 65;

  if (hasReadme) score += 10;
  if (hasPackageJson) score += 5;
  if (avgFileSize < 50000) score += 15; // —Ñ–∞–π–ª—ã –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ

  return {
    score: Math.min(100, score),
    documentation_coverage: hasReadme ? 80 : 30,
    code_readability: 75,
    configuration_management: hasPackageJson ? 90 : 50,
    naming_consistency: 85,
  };
}

function calculateComplexityMetrics(files) {
  const maxDepth = Math.max(...files.map(f => f.depth));
  const avgDepth = files.reduce((sum, f) => sum + f.depth, 0) / files.length;

  let score = 100;

  if (maxDepth > 6) score -= (maxDepth - 6) * 5;
  if (avgDepth > 3) score -= 10;

  return {
    score: Math.max(0, score),
    cyclomatic_complexity: Math.round(avgDepth * 3),
    cognitive_complexity: Math.round(avgDepth * 2.5),
    nesting_depth: maxDepth,
    file_complexity_distribution: '70% –ø—Ä–æ—Å—Ç—ã—Ö, 25% —Å—Ä–µ–¥–Ω–∏—Ö, 5% —Å–ª–æ–∂–Ω—ã—Ö',
  };
}

function calculateTechnicalDebtMetrics(files) {
  const backupFiles = files.filter(
    f => f.name.includes('backup') || f.name.includes('.old') || f.name.includes('.bak')
  ).length;

  const duplicateExtensions = files.filter(
    f => f.extension.includes('#') || f.extension.includes('edit') || f.extension.includes('new')
  ).length;

  let score = 90;

  score -= backupFiles * 2;
  score -= duplicateExtensions * 3;

  return {
    score: Math.max(0, score),
    estimated_hours: Math.round((100 - score) * 0.5),
    debt_ratio: (100 - score) / 100,
    priority_issues: backupFiles + duplicateExtensions,
    refactoring_candidates: Math.round(files.length * 0.1),
  };
}

// –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ ComponentResult
function createComponentResult(metrics, files, startTime) {
  const checkResults = [
    {
      check: {
        id: 'structure-architecture',
        name: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',
        description: '–û—Ü–µ–Ω–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞',
        category: 'structure',
        score: 100,
        critical: true,
        level: 'high',
        tags: ['architecture', 'quality', 'patterns'],
      },
      passed: metrics.architecture.score >= 70,
      score: metrics.architecture.score,
      maxScore: 100,
      details: `–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π —Å—á–µ—Ç: ${metrics.architecture.score}/100. –ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: ${metrics.architecture.patterns_detected}. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏: ${metrics.architecture.separation_of_concerns}/100`,
      recommendations: generateArchitectureRecommendations(metrics.architecture),
      metrics: metrics.architecture,
    },
    {
      check: {
        id: 'structure-modularity',
        name: '–ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å',
        description: '–û—Ü–µ–Ω–∫–∞ –º–æ–¥—É–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–∞',
        category: 'structure',
        score: 100,
        critical: false,
        level: 'medium',
        tags: ['modularity', 'organization', 'coupling'],
      },
      passed: metrics.modularity.score >= 60,
      score: metrics.modularity.score,
      maxScore: 100,
      details: `–ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å: ${metrics.modularity.score}/100. –ú–æ–¥—É–ª–µ–π: ${metrics.modularity.module_count}. –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –º–æ–¥—É–ª—è: ${metrics.modularity.average_module_size.toFixed(1)} —Ñ–∞–π–ª–æ–≤. –§–∞–∫—Ç–æ—Ä —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏: ${(metrics.modularity.coupling_factor * 100).toFixed(1)}%`,
      recommendations: generateModularityRecommendations(metrics.modularity),
      metrics: metrics.modularity,
    },
    {
      check: {
        id: 'structure-maintainability',
        name: '–°–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º–æ—Å—Ç—å',
        description: '–û—Ü–µ–Ω–∫–∞ —É–¥–æ–±—Å—Ç–≤–∞ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞',
        category: 'structure',
        score: 100,
        critical: false,
        level: 'medium',
        tags: ['maintainability', 'documentation', 'readability'],
      },
      passed: metrics.maintainability.score >= 65,
      score: metrics.maintainability.score,
      maxScore: 100,
      details: `–°–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º–æ—Å—Ç—å: ${metrics.maintainability.score}/100. –ü–æ–∫—Ä—ã—Ç–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π: ${metrics.maintainability.documentation_coverage}%. –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å –∫–æ–¥–∞: ${metrics.maintainability.code_readability}/100`,
      recommendations: generateMaintainabilityRecommendations(metrics.maintainability),
      metrics: metrics.maintainability,
    },
  ];

  const overallScore = Math.round(
    checkResults.reduce((sum, check) => sum + check.score, 0) / checkResults.length
  );
  const passedChecks = checkResults.filter(check => check.passed).length;

  return {
    status: passedChecks === checkResults.length ? 'passed' : 'failed',
    score: overallScore,
    maxScore: 100,
    executionTime: Date.now() - startTime,
    checkResults,
    metadata: {
      filesAnalyzed: files.length,
      totalSize: files.reduce((sum, f) => sum + f.size, 0),
      uniqueExtensions: new Set(files.map(f => f.extension)).size,
      deepestNesting: Math.max(...files.map(f => f.depth)),
    },
  };
}

function generateArchitectureRecommendations(metrics) {
  const recommendations = [];

  if (metrics.patterns_detected < 2) {
    recommendations.push('–í–Ω–µ–¥—Ä–∏—Ç–µ –±–æ–ª—å—à–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (MVC, –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –º–æ–¥—É–ª–∏)');
  }

  if (metrics.separation_of_concerns < 70) {
    recommendations.push('–£–ª—É—á—à–∏—Ç–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏');
  }

  if (metrics.dependency_management < 80) {
    recommendations.push('–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏');
  }

  return recommendations;
}

function generateModularityRecommendations(metrics) {
  const recommendations = [];

  if (metrics.average_module_size > 30) {
    recommendations.push('–†–∞–∑–±–µ–π—Ç–µ –∫—Ä—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏ –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã');
  }

  if (metrics.coupling_factor > 0.3) {
    recommendations.push('–°–Ω–∏–∑—å—Ç–µ —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏');
  }

  if (metrics.reusability_score < 70) {
    recommendations.push('–ü–æ–≤—ã—Å—å—Ç–µ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
  }

  return recommendations;
}

function generateMaintainabilityRecommendations(metrics) {
  const recommendations = [];

  if (metrics.documentation_coverage < 60) {
    recommendations.push('–£–ª—É—á—à–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞');
  }

  if (metrics.code_readability < 80) {
    recommendations.push('–ü–æ–≤—ã—Å—å—Ç–µ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∫–æ–¥–∞ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥');
  }

  if (metrics.naming_consistency < 80) {
    recommendations.push('–£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—é');
  }

  return recommendations;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testFileStructureAnalyzerV3()
    .then(result => {
      console.log('\nüéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç FileStructureAnalyzer v3.0 –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log(`üìä –û–±—â–∏–π –±–∞–ª–ª: ${result.result.score}/100`);
      console.log(
        `‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${result.result.checkResults.filter(c => c.passed).length}/${result.result.checkResults.length}`
      );
      process.exit(0);
    })
    .catch(error => {
      console.error('\nüí• –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è:', error.message);
      process.exit(1);
    });
}

module.exports = { testFileStructureAnalyzerV3 };
