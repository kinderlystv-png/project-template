/**
 * –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç EAP –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
 */

// –ò—Å–ø–æ–ª—å–∑—É–µ–º require –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
const fs = require('fs');
const path = require('path');

console.log('üîç –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç EAP —Å–∏—Å—Ç–µ–º—ã –¥–ª—è kinderly-events...\n');

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
function analyzeProject(projectPath) {
  const startTime = Date.now();

  try {
    console.log(`üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø—Ä–æ–µ–∫—Ç: ${projectPath}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–µ–∫—Ç
    if (!fs.existsSync(projectPath)) {
      throw new Error(`–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${projectPath}`);
    }

    // –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const files = [];
    function scanDirectory(dir, level = 0) {
      if (level > 5) return; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É

      try {
        const items = fs.readdirSync(dir);
        for (const item of items) {
          if (item.startsWith('.')) continue;

          const fullPath = path.join(dir, item);
          const stat = fs.statSync(fullPath);

          if (stat.isFile()) {
            files.push({
              path: fullPath,
              size: stat.size,
              ext: path.extname(item),
            });
          } else if (stat.isDirectory() && level < 3) {
            scanDirectory(fullPath, level + 1);
          }
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ${dir}: ${error.message}`);
      }
    }

    console.log('üìä –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...');
    scanDirectory(projectPath);

    // –ê–Ω–∞–ª–∏–∑
    const totalFiles = files.length;
    const jsFiles = files.filter(f => ['.js', '.ts', '.jsx', '.tsx'].includes(f.ext)).length;
    const testFiles = files.filter(f => f.path.includes('test') || f.path.includes('spec')).length;
    const avgFileSize = files.reduce((sum, f) => sum + f.size, 0) / totalFiles;
    const largeFiles = files.filter(f => f.size > 10000).length;

    // –ü—Ä–æ—Å—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    const metrics = {
      totalFiles,
      jsFiles,
      testFiles,
      avgFileSize: Math.round(avgFileSize),
      largeFiles,
      testCoverage: Math.round((testFiles / jsFiles) * 100) || 0,
    };

    // –ü—Ä–æ—Å—Ç–æ–π —Å–∫–æ—Ä–∏–Ω–≥
    let structureScore = 70;
    if (testFiles < jsFiles * 0.3) structureScore -= 20; // –ú–∞–ª–æ —Ç–µ—Å—Ç–æ–≤
    if (largeFiles > totalFiles * 0.1) structureScore -= 15; // –ú–Ω–æ–≥–æ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
    if (avgFileSize > 5000) structureScore -= 10; // –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã

    const result = {
      summary: {
        overallScore: Math.max(0, Math.min(100, structureScore)),
        codeQuality: Math.max(30, structureScore - 10),
        security: 65, // –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        performance: 70,
        architecture: Math.max(40, structureScore),
        testing: Math.max(20, Math.min(90, metrics.testCoverage)),
        technicalDebt: Math.max(30, 100 - largeFiles * 5),
        maintainability: Math.max(35, structureScore - 5),
      },
      metrics,
      executionStats: {
        totalTime: Date.now() - startTime,
        filesAnalyzed: totalFiles,
      },
    };

    return result;
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
async function runAnalysis() {
  try {
    const projectPath = 'C:\\kinderly-events';
    const result = await analyzeProject(projectPath);

    const duration = result.executionStats.totalTime;
    console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${duration}–º—Å\n`);

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:');
    console.log('='.repeat(60));
    console.log(`üéØ –û–±—â–∏–π —Å—á–µ—Ç: ${result.summary.overallScore}/100`);
    console.log(`üìà –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞: ${result.summary.codeQuality}/100`);
    console.log(`üõ°Ô∏è  –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: ${result.summary.security}/100`);
    console.log(`‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${result.summary.performance}/100`);
    console.log(`üèóÔ∏è  –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ${result.summary.architecture}/100`);
    console.log(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${result.summary.testing}/100`);
    console.log(`üí≥ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥: ${result.summary.technicalDebt}/100`);
    console.log(`üìè –°–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º–æ—Å—Ç—å: ${result.summary.maintainability}/100\n`);

    // –ú–µ—Ç—Ä–∏–∫–∏ —Ñ–∞–π–ª–æ–≤
    console.log('üìÅ –ú–ï–¢–†–ò–ö–ò –ü–†–û–ï–ö–¢–ê:');
    console.log('-'.repeat(30));
    console.log(`–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${result.metrics.totalFiles}`);
    console.log(`JS/TS —Ñ–∞–π–ª–æ–≤: ${result.metrics.jsFiles}`);
    console.log(`–¢–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: ${result.metrics.testFiles}`);
    console.log(`–ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏: ${result.metrics.testCoverage}%`);
    console.log(`–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: ${result.metrics.avgFileSize} –±–∞–π—Ç`);
    console.log(`–ë–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤: ${result.metrics.largeFiles}\n`);

    console.log('='.repeat(60));
    console.log('üéâ –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');

    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
runAnalysis()
  .then(() => {
    console.log('\n‚ú® –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    process.exit(0);
  })
  .catch(error => {
    console.error('\nüí• –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω:', error.message);
    process.exit(1);
  });
