/**
 * –¢–µ—Å—Ç JestCheckerAdapter —Å SimpleOrchestrator
 */

import { SimpleOrchestrator } from './simple-orchestrator.js';
import { JestCheckerAdapter } from './src/checkers/testing/checkers/JestCheckerAdapter.js';
import { CheckContext } from './src/core/types.js';

async function testJestChecker() {
  console.log('üîç –¢–µ—Å—Ç JestCheckerAdapter –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n');

  try {
    // 1. –°–æ–∑–¥–∞–µ–º SimpleOrchestrator
    console.log('üèóÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ SimpleOrchestrator...');
    const orchestrator = new SimpleOrchestrator();

    // 2. –°–æ–∑–¥–∞–µ–º JestCheckerAdapter
    console.log('‚öôÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ JestCheckerAdapter...');
    const jestChecker = new JestCheckerAdapter();

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ —á–µ–∫–µ—Ä–∞
    console.log('\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ JestCheckerAdapter:');
    console.log(`   - –ù–∞–∑–≤–∞–Ω–∏–µ: ${jestChecker.name}`);
    console.log(`   - –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${jestChecker.category}`);
    console.log(`   - –û–ø–∏—Å–∞–Ω–∏–µ: ${jestChecker.description}`);
    console.log(`   - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${jestChecker.priority}`);

    // 4. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —á–µ–∫–µ—Ä
    console.log('\nüîó –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ–∫–µ—Ä–∞...');
    orchestrator.registerChecker('jest-testing', jestChecker);

    // 5. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const testContext: CheckContext = {
      projectPath: process.cwd(),
      config: {},
    };

    console.log(`\nüìÇ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø—Ä–æ–µ–∫—Ç: ${testContext.projectPath}`);

    // 6. –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç JestCheckerAdapter
    console.log('\nüß™ === –ü–†–Ø–ú–û–ô –¢–ï–°–¢ JestCheckerAdapter ===');
    const startTime = Date.now();
    const result = await jestChecker.check(testContext);
    const endTime = Date.now();

    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${endTime - startTime}ms`);
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:');

    // 7. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const status = result.passed ? '‚úÖ –ü–†–û–ô–î–ï–ù–û' : '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù–û';
    console.log(`${status} - ${result.checker}`);
    console.log(`üìà –û—Ü–µ–Ω–∫–∞: ${result.score}/100`);
    console.log(`üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${result.message}`);
    console.log(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${result.category}`);
    console.log(`‚è∞ –í—Ä–µ–º—è: ${result.timestamp.toLocaleTimeString()}`);

    if (result.details) {
      console.log('\nüìã –ü–æ–¥—Ä–æ–±–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:');
      Object.entries(result.details).forEach(([key, value]) => {
        console.log(`   - ${key}: ${typeof value === 'object' ? JSON.stringify(value) : value}`);
      });
    }

    if (result.recommendations && result.recommendations.length > 0) {
      console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:');
      result.recommendations.forEach((rec, index) => {
        console.log(`   ${index + 1}. ${rec}`);
      });
    }

    // 8. –¢–µ—Å—Ç —á–µ—Ä–µ–∑ SimpleOrchestrator
    console.log('\nüé≠ === –¢–ï–°–¢ –ß–ï–†–ï–ó SimpleOrchestrator ===');
    const orchestratorStartTime = Date.now();
    const fullAnalysis = await orchestrator.analyzeProject(testContext.projectPath);
    const orchestratorEndTime = Date.now();

    console.log(
      `‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Orchestrator: ${orchestratorEndTime - orchestratorStartTime}ms`
    );
    console.log(`üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${Object.keys(fullAnalysis.checks).length}`);

    // 9. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç Orchestrator
    const jestResults = Object.entries(fullAnalysis.checks).filter(
      ([key, result]) => result.checker === 'jest-testing' || key === 'jest-testing'
    );

    console.log(`üîß –†–µ–∑—É–ª—å—Ç–∞—Ç—ã JestChecker —á–µ—Ä–µ–∑ Orchestrator: ${jestResults.length}`);

    if (jestResults.length > 0) {
      jestResults.forEach(([key, res]) => {
        const status = res.passed ? '‚úÖ' : '‚ùå';
        console.log(`   ${status} ${key}: ${res.message} (${res.score}/100)`);
      });
    }

    // 10. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\nüîç === –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===');
    const directScore = result.score;
    const orchestratorResult = jestResults.length > 0 ? jestResults[0][1] : null;
    const orchestratorScore = orchestratorResult ? orchestratorResult.score : null;

    console.log(`   - –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤: ${directScore}/100`);
    console.log(
      `   - –ß–µ—Ä–µ–∑ Orchestrator: ${orchestratorScore !== null ? orchestratorScore + '/100' : 'N/A'}`
    );

    const scoresMatch = orchestratorScore === directScore;
    console.log(`   - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${scoresMatch ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`);

    // 11. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Jest –≤ –ø—Ä–æ–µ–∫—Ç–µ
    console.log('\nüì¶ === –°–¢–ê–¢–£–° JEST –í –ü–†–û–ï–ö–¢–ï ===');
    if (result.details) {
      console.log(`   - Jest —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${result.details.hasJest ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`);
      console.log(`   - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: ${result.details.hasConfig ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`);
      console.log(`   - –¢–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: ${result.details.testFileCount || 0}`);
      console.log(
        `   - Test —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${result.details.hasTestScript ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`
      );
      console.log(`   - Coverage –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${result.details.hasCoverage ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`);

      if (result.details.testFiles && result.details.testFiles.length > 0) {
        console.log('   - –ü—Ä–∏–º–µ—Ä—ã —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤:');
        result.details.testFiles.slice(0, 3).forEach((file: string) => {
          console.log(`     ‚Ä¢ ${file}`);
        });
      }
    }

    // 12. –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    console.log('\nüéØ === –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê ===');

    const integrationSuccess = scoresMatch && jestResults.length > 0;
    const projectViability = directScore >= 40; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥

    console.log(`   - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: ${integrationSuccess ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`);
    console.log(`   - –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ Jest: ${projectViability ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`);

    if (integrationSuccess) {
      console.log('\nüéâ –£–°–ü–ï–•: JestCheckerAdapter –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω!');
      console.log('‚úÖ –ì–æ—Ç–æ–≤ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É EAP v4.0');

      if (projectViability) {
        console.log('‚úÖ –¢–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç –∏–º–µ–µ—Ç —Ö–æ—Ä–æ—à—É—é –±–∞–∑—É –¥–ª—è Jest');
      } else {
        console.log('üí° –ü—Ä–æ–µ–∫—Ç –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Jest —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º');
      }
    } else {
      console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π');
      if (!scoresMatch) console.log('   - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∏ Orchestrator –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
      if (jestResults.length === 0)
        console.log('   - Orchestrator –Ω–µ –ø–æ–ª—É—á–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç JestChecker');
    }

    return {
      integrationSuccess,
      projectViability,
      score: directScore,
      recommendations: result.recommendations || [],
    };
  } catch (error) {
    console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
    if (error instanceof Error) {
      console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
      console.error('   –°—Ç–µ–∫:', error.stack?.split('\n').slice(0, 10).join('\n'));
    }
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ JestChecker...\n');
testJestChecker()
  .then(result => {
    console.log('\nüìà –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
    console.log(`   - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: ${result.integrationSuccess ? '–£—Å–ø–µ—à–Ω–∞' : '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}`);
    console.log(
      `   - –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: ${result.projectViability ? '–ì–æ—Ç–æ–≤' : '–¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}`
    );
    console.log(`   - –û—Ü–µ–Ω–∫–∞: ${result.score}/100`);

    if (result.recommendations.length > 0) {
      console.log('   - –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      result.recommendations.slice(0, 3).forEach((rec, index) => {
        console.log(`     ${index + 1}. ${rec}`);
      });
    }
  })
  .catch(error => {
    console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
