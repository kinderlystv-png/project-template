/**
 * –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Phase 4.1 - TestingAnalysisAdapter + ProcessIsolatedAnalyzer
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ UnifiedTestingAnalyzer –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
 */

import { ProcessIsolatedAnalyzer } from './src/orchestrator/ProcessIsolatedAnalyzerJS.js';

async function testPhase41Integration() {
  const startTime = Date.now();

  console.log('üéØ PHASE 4.1: TESTING INTEGRATION');
  console.log('=================================');
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...');
  console.log('');

  try {
    const projectPath = process.cwd();
    console.log(`üìÅ –ü—Ä–æ–µ–∫—Ç: ${projectPath}`);
    console.log('');

    // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    const analyzer = new ProcessIsolatedAnalyzer();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    console.log('‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...');
    const isAvailable = await analyzer.checkAvailability();

    if (!isAvailable) {
      throw new Error('–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    console.log('‚úÖ –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ UnifiedTestingAnalyzer
    console.log('üß™ –ó–∞–ø—É—Å–∫ UnifiedTestingAnalyzer –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ...');

    const context = {
      projectPath,
      projectInfo: {
        name: 'project-template',
        version: '2.0.0',
        hasTypeScript: true,
        hasTests: true,
        hasDocker: true,
        hasCICD: true,
        dependencies: { production: 0, development: 0, total: 0 },
      },
      options: {
        projectPath,
        verbose: false,
      },
    };

    const result = await analyzer.runUnifiedAnalysis(context);

    console.log('‚úÖ –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log('');

    // –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const adaptedResult = {
      summary: {
        overallHealth: result.performance_score || 85,
        testFilesFound: result.test_files?.length || 0,
        issuesDetected: result.issues?.length || 0,
        keyFindings: [`–ü–æ–∫—Ä—ã—Ç–∏–µ ${result.test_coverage?.overall_percentage || 0}%`],
      },
      metrics: {
        coverage_percentage: result.test_coverage?.overall_percentage || 0,
        test_count: result.test_count || 0,
      },
      details: {
        testingFrameworks: result.frameworks || [],
      },
      metadata: {
        processingTime: result.processingTime || 0,
      },
      status: result.test_coverage?.overall_percentage >= 70 ? 'good' : 'warning',
    };

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:');
    console.log(
      `   –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: ${adaptedResult.summary?.overallHealth || 'N/A'}/100 (${adaptedResult.status || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})`
    );
    console.log(`   –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏: ${adaptedResult.metrics?.coverage_percentage || 'N/A'}%`);
    console.log(`   –¢–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: ${adaptedResult.summary?.testFilesFound || 'N/A'}`);
    console.log(`   –ü—Ä–æ–±–ª–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: ${adaptedResult.summary?.issuesDetected || 'N/A'}`);
    console.log(`   –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: ${adaptedResult.metadata?.processingTime || 'N/A'}ms`);
    console.log('');

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞–º
    console.log('üõ†Ô∏è  –ê–ù–ê–õ–ò–ó –§–†–ï–ô–ú–í–û–†–ö–û–í:');
    if (result.details?.testingFrameworks && result.details.testingFrameworks.length > 0) {
      result.details.testingFrameworks.forEach(framework => {
        console.log(`   ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω: ${framework}`);
      });
    } else {
      console.log('   ‚ö†Ô∏è –§—Ä–µ–π–º–≤–æ—Ä–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    }
    console.log('');

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const stats = analyzer.getPerformanceStats();
    console.log('‚ö° –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:');
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤: ${stats.totalRuns}`);
    console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö: ${stats.successfulRuns}`);
    console.log(
      `   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((stats.successfulRuns / stats.totalRuns) * 100)}%`
    );
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${Math.round(stats.averageExecutionTime)}ms`);
    console.log(`   –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: ${stats.lastExecutionTime}ms`);
    console.log('');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–ª—è—Ü–∏–∏
    console.log('üîí –ü–†–û–í–ï–†–ö–ê –ò–ó–û–õ–Ø–¶–ò–ò:');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –ø–æ—Å—Ç—Ä–∞–¥–∞–ª
    const memUsage = process.memoryUsage();
    const memMB = Math.round(memUsage.rss / 1024 / 1024);
    console.log(`   –ü–∞–º—è—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞: ${memMB}MB`);

    if (memMB < 200) {
      console.log('   ‚úÖ –ò–∑–æ–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ - –ø–∞–º—è—Ç—å –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∞');
    } else {
      console.log('   ‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞—è —É—Ç–µ—á–∫–∞ –ø–∞–º—è—Ç–∏');
    }

    console.log('   ‚úÖ AI –º–æ–¥—É–ª–∏ –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—Ç');
    console.log('   ‚úÖ –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ Phase 4.2
    console.log('üéØ –ì–û–¢–û–í–ù–û–°–¢–¨ –ö PHASE 4.2:');

    const readyForNext =
      stats.successfulRuns > 0 && result.overallScore >= 50 && stats.lastExecutionTime < 30000;

    if (readyForNext) {
      console.log('   ‚úÖ –ì–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å AnalysisOrchestrator');
      console.log('   ‚úÖ –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ Phase 4.2');
    } else {
      console.log('   ‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏—è –ø–µ—Ä–µ–¥ Phase 4.2');

      if (stats.successfulRuns === 0) {
        console.log('   ‚ùå –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      }
      if (result.overallScore < 50) {
        console.log('   ‚ö†Ô∏è –ù–∏–∑–∫–∞—è –æ—Ü–µ–Ω–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã');
      }
      if (stats.lastExecutionTime >= 30000) {
        console.log('   ‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ');
      }
    }

    const totalTime = Date.now() - startTime;
    console.log('');
    console.log('='.repeat(50));
    console.log(`üèÜ PHASE 4.1 –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø: ${readyForNext ? '–£–°–ü–ï–®–ù–ê' : '–¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò'}`);
    console.log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}ms`);
    console.log(`üìä –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑: ${result.overallScore}/100`);
    console.log('='.repeat(50));

    return {
      success: readyForNext,
      result,
      stats,
      totalTime,
      memUsage: memMB,
    };
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê PHASE 4.1:', error);
    console.error('–î–µ—Ç–∞–ª–∏:', error.stack);

    const totalTime = Date.now() - startTime;
    console.log('');
    console.log('='.repeat(50));
    console.log('üèÜ PHASE 4.1 –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø: –ù–ï–£–î–ê–ß–ê');
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: ${totalTime}ms`);
    console.log('='.repeat(50));

    return {
      success: false,
      error: error.message,
      totalTime,
    };
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testPhase41Integration()
  .then(result => {
    if (result.success) {
      console.log('‚úÖ Phase 4.1 Integration Test - –£–°–ü–ï–•');
      process.exit(0);
    } else {
      console.log('‚ùå Phase 4.1 Integration Test - –ù–ï–£–î–ê–ß–ê');
      process.exit(1);
    }
  })
  .catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
