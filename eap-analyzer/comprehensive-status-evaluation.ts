/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è EAP Analyzer
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏
 */

import { SecurityChecker } from './src/checkers/security/SecurityChecker';
import { DependenciesSecurityChecker } from './src/checkers/security/DependenciesSecurityChecker';
import { CodeSecurityChecker } from './src/checkers/security/CodeSecurityChecker';
import { ConfigSecurityChecker } from './src/checkers/security/ConfigSecurityChecker';
import { WebSecurityChecker } from './src/checkers/security/WebSecurityChecker';
import { XSSAnalyzer } from './src/checkers/security/analyzers/XSSAnalyzer';
import { CSRFAnalyzer } from './src/checkers/security/analyzers/CSRFAnalyzer';
import { WebSecurityFixTemplates } from './src/checkers/security/WebSecurityFixTemplates';
import { RecommendationEngine } from './src/recommendations/RecommendationEngine';
import { CheckContext } from './src/types/index.js';

interface ComponentStatus {
  name: string;
  status: 'working' | 'partial' | 'broken' | 'untested';
  coverage: number;
  issues: string[];
  features: string[];
  testResults?: any;
}

class EAPAnalyzerStatusEvaluator {
  async runCompleteEvaluation(): Promise<{
    overallStatus: string;
    components: ComponentStatus[];
    recommendations: string[];
    criticalIssues: string[];
  }> {
    console.log('üîç –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –û–¶–ï–ù–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø EAP ANALYZER');
    console.log('='.repeat(60));

    const components: ComponentStatus[] = [];
    const criticalIssues: string[] = [];

    // 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    console.log('\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
    const depsStatus = await this.testDependenciesAnalysis();
    components.push(depsStatus);

    // 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞...');
    const codeStatus = await this.testCodeSecurityAnalysis();
    components.push(codeStatus);

    // 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    const configStatus = await this.testConfigAnalysis();
    components.push(configStatus);

    // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ XSS –∞–Ω–∞–ª–∏–∑–∞
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ XSS –∞–Ω–∞–ª–∏–∑–∞...');
    const xssStatus = await this.testXSSAnalysis();
    components.push(xssStatus);

    // 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CSRF –∞–Ω–∞–ª–∏–∑–∞
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CSRF –∞–Ω–∞–ª–∏–∑–∞...');
    const csrfStatus = await this.testCSRFAnalysis();
    components.push(csrfStatus);

    // 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...');
    const webSecStatus = await this.testWebSecurity();
    components.push(webSecStatus);

    // 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    console.log('\n7Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...');
    const recStatus = await this.testRecommendationSystem();
    components.push(recStatus);

    // 8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SecurityChecker
    console.log('\n8Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SecurityChecker...');
    const integrationStatus = await this.testSecurityCheckerIntegration();
    components.push(integrationStatus);

    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const overallStatus = this.calculateOverallStatus(components);
    const recommendations = this.generateRecommendations(components);

    // –°–±–æ—Ä –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
    components.forEach(comp => {
      if (comp.status === 'broken') {
        criticalIssues.push(`${comp.name}: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê`);
      }
      comp.issues.forEach(issue => {
        if (issue.includes('–∫—Ä–∏—Ç–∏—á–µ—Å–∫') || issue.includes('FATAL')) {
          criticalIssues.push(`${comp.name}: ${issue}`);
        }
      });
    });

    return {
      overallStatus,
      components,
      recommendations,
      criticalIssues,
    };
  }

  async testDependenciesAnalysis(): Promise<ComponentStatus> {
    const status: ComponentStatus = {
      name: 'Dependencies Security Analysis',
      status: 'untested',
      coverage: 0,
      issues: [],
      features: [],
    };

    try {
      const checker = new DependenciesSecurityChecker();

      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π package.json —Å —É—è–∑–≤–∏–º–æ—Å—Ç—è–º–∏
      const testPackageJson = {
        dependencies: {
          lodash: '4.17.20', // –ò–∑–≤–µ—Å—Ç–Ω–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å
          express: '4.16.0', // –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è
          jquery: '2.1.0', // –û—á–µ–Ω—å —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è
        },
      };

      const context = this.createTestContext('package.json');
      const result = await checker.checkDependencySecurity(context, testPackageJson);

      status.features = [
        '–ê–Ω–∞–ª–∏–∑ package.json',
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π',
        '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é',
      ];

      if (result && result.vulnerabilities && result.vulnerabilities.length > 0) {
        status.status = 'working';
        status.coverage = 85;
        status.testResults = {
          vulnerabilitiesFound: result.vulnerabilities.length,
          recommendations: result.recommendations?.length || 0,
        };
        console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: ${result.vulnerabilities.length}`);
      } else {
        status.status = 'partial';
        status.coverage = 40;
        status.issues.push('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö');
      }
    } catch (error) {
      status.status = 'broken';
      status.coverage = 0;
      status.issues.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }

    return status;
  }

  async testCodeSecurityAnalysis(): Promise<ComponentStatus> {
    const status: ComponentStatus = {
      name: 'Code Security Analysis',
      status: 'untested',
      coverage: 0,
      issues: [],
      features: [],
    };

    try {
      const checker = new CodeSecurityChecker();

      const testCode = `
        // –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        eval('var x = userInput');
        document.write('<h1>' + userInput + '</h1>');

        // –°–ª–∞–±–∞—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è
        const crypto = require('crypto');
        const hash = crypto.createHash('md5');

        // –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
        const fs = require('fs');
        fs.readFile('/etc/passwd', 'utf8', callback);
      `;

      const context = this.createTestContext('test.js', testCode);
      const result = await checker.analyzeCodeSecurity(context);

      status.features = [
        '–ê–Ω–∞–ª–∏–∑ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π',
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤',
        '–ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π',
        '–î–µ—Ç–µ–∫—Ü–∏—è –∏–Ω—ä–µ–∫—Ü–∏–π –∫–æ–¥–∞',
      ];

      if (result && result.issues && result.issues.length > 0) {
        status.status = 'working';
        status.coverage = 90;
        status.testResults = {
          issuesFound: result.issues.length,
          categories: [...new Set(result.issues.map(i => i.category))],
        };
        console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${result.issues.length}`);
      } else {
        status.status = 'partial';
        status.coverage = 30;
        status.issues.push('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ—á–µ–≤–∏–¥–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –∫–æ–¥–µ');
      }
    } catch (error) {
      status.status = 'broken';
      status.coverage = 0;
      status.issues.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }

    return status;
  }

  async testConfigAnalysis(): Promise<ComponentStatus> {
    const status: ComponentStatus = {
      name: 'Configuration Security Analysis',
      status: 'untested',
      coverage: 0,
      issues: [],
      features: [],
    };

    try {
      const checker = new ConfigSecurityChecker();

      const testConfig = {
        database: {
          password: '123456',
          ssl: false,
        },
        session: {
          secret: 'test',
          secure: false,
        },
        cors: {
          origin: '*',
        },
      };

      const context = this.createTestContext('config.json');
      const result = await checker.analyzeConfigSecurity(context, testConfig);

      status.features = [
        '–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Å—Å–∏–π',
        '–ê–Ω–∞–ª–∏–∑ CORS –ø–æ–ª–∏—Ç–∏–∫',
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π',
      ];

      if (result && result.issues && result.issues.length > 0) {
        status.status = 'working';
        status.coverage = 80;
        status.testResults = {
          configIssues: result.issues.length,
          severity: result.issues.map(i => i.severity),
        };
        console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${result.issues.length}`);
      } else {
        status.status = 'partial';
        status.coverage = 50;
        status.issues.push('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
      }
    } catch (error) {
      status.status = 'broken';
      status.coverage = 0;
      status.issues.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }

    return status;
  }

  async testXSSAnalysis(): Promise<ComponentStatus> {
    const status: ComponentStatus = {
      name: 'XSS Analysis',
      status: 'untested',
      coverage: 0,
      issues: [],
      features: [],
    };

    try {
      const analyzer = new XSSAnalyzer();

      const testCode = `
        function displayData(data) {
          document.getElementById('content').innerHTML = data;
          document.body.innerHTML += '<div>' + data + '</div>';
          eval('var x = ' + data);
          document.write('<h1>' + data + '</h1>');
        }
      `;

      const context = this.createTestContext('xss-test.js', testCode);
      const result = await analyzer.analyzeXSS(context);

      status.features = [
        '–ê–Ω–∞–ª–∏–∑ innerHTML –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–π',
        '–î–µ—Ç–µ–∫—Ü–∏—è eval —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏',
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ document.write',
        '–ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è HTML',
      ];

      if (result && result.vulnerabilities && result.vulnerabilities.length > 0) {
        status.status = 'working';
        status.coverage = 95;
        status.testResults = {
          xssVulnerabilities: result.vulnerabilities.length,
          patterns: result.vulnerabilities.map(v => v.pattern),
        };
        console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ XSS —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: ${result.vulnerabilities.length}`);
      } else {
        status.status = 'broken';
        status.coverage = 0;
        status.issues.push('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø: XSS –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –Ω–∞—à–µ–ª –æ—á–µ–≤–∏–¥–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏');
      }
    } catch (error) {
      status.status = 'broken';
      status.coverage = 0;
      status.issues.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }

    return status;
  }

  async testCSRFAnalysis(): Promise<ComponentStatus> {
    const status: ComponentStatus = {
      name: 'CSRF Analysis',
      status: 'untested',
      coverage: 0,
      issues: [],
      features: [],
    };

    try {
      const analyzer = new CSRFAnalyzer();

      const testCode = `
        function transferMoney(amount, to) {
          fetch('/api/transfer', {
            method: 'POST',
            body: JSON.stringify({ amount, to })
          });
        }

        function deleteAccount() {
          $.post('/api/delete-account', {});
        }
      `;

      const context = this.createTestContext('csrf-test.js', testCode);
      const result = await analyzer.analyzeCSRF(context);

      status.features = [
        '–ê–Ω–∞–ª–∏–∑ POST –∑–∞–ø—Ä–æ—Å–æ–≤ –±–µ–∑ CSRF —Ç–æ–∫–µ–Ω–æ–≤',
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º –±–µ–∑ –∑–∞—â–∏—Ç—ã',
        '–î–µ—Ç–µ–∫—Ü–∏—è AJAX –∑–∞–ø—Ä–æ—Å–æ–≤',
        '–ê–Ω–∞–ª–∏–∑ state-changing –æ–ø–µ—Ä–∞—Ü–∏–π',
      ];

      if (result && result.vulnerabilities && result.vulnerabilities.length > 0) {
        status.status = 'working';
        status.coverage = 85;
        status.testResults = {
          csrfVulnerabilities: result.vulnerabilities.length,
          riskLevels: result.vulnerabilities.map(v => v.riskLevel),
        };
        console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ CSRF —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: ${result.vulnerabilities.length}`);
      } else {
        status.status = 'partial';
        status.coverage = 40;
        status.issues.push('–ù–µ –Ω–∞–π–¥–µ–Ω—ã CSRF —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –∫–æ–¥–µ');
      }
    } catch (error) {
      status.status = 'broken';
      status.coverage = 0;
      status.issues.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }

    return status;
  }

  async testWebSecurity(): Promise<ComponentStatus> {
    const status: ComponentStatus = {
      name: 'Web Security Integration',
      status: 'untested',
      coverage: 0,
      issues: [],
      features: [],
    };

    try {
      const checker = new WebSecurityChecker();

      const testCode = `
        function unsafeFunction(userInput) {
          document.getElementById('output').innerHTML = userInput;
          eval('var result = ' + userInput);

          fetch('/api/action', {
            method: 'POST',
            body: JSON.stringify({ data: userInput })
          });
        }
      `;

      const context = this.createTestContext('websec-test.js', testCode);
      const result = await checker.analyzeWebSecurity(context);

      status.features = [
        '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è XSS –∏ CSRF –∞–Ω–∞–ª–∏–∑–∞',
        '–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ–±-—É—è–∑–≤–∏–º–æ—Å—Ç–µ–π',
        '–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
        '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –≤–µ–±-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
      ];

      if (result && result.summary && result.summary.totalVulnerabilities > 0) {
        status.status = 'working';
        status.coverage = 90;
        status.testResults = {
          totalVulnerabilities: result.summary.totalVulnerabilities,
          xssCount: result.xss?.vulnerabilities?.length || 0,
          csrfCount: result.csrf?.vulnerabilities?.length || 0,
        };
        console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–µ–±-—É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: ${result.summary.totalVulnerabilities}`);
      } else {
        status.status = 'partial';
        status.coverage = 50;
        status.issues.push('–í–µ–±-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–∏');
      }
    } catch (error) {
      status.status = 'broken';
      status.coverage = 0;
      status.issues.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }

    return status;
  }

  async testRecommendationSystem(): Promise<ComponentStatus> {
    const status: ComponentStatus = {
      name: 'Recommendation System',
      status: 'untested',
      coverage: 0,
      issues: [],
      features: [],
    };

    try {
      // –¢–µ—Å—Ç WebSecurityFixTemplates
      const webChecker = new WebSecurityChecker();
      const testCode = `
        document.getElementById('test').innerHTML = userInput;
        eval(userCode);
      `;

      const context = this.createTestContext('rec-test.js', testCode);
      const webResult = await webChecker.analyzeWebSecurity(context);

      // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
      const webRecommendations = WebSecurityFixTemplates.generateWebRecommendations(webResult);

      // –¢–µ—Å—Ç RecommendationEngine
      const engineRecommendations = RecommendationEngine.generateRecommendations(webResult);

      status.features = [
        'WebSecurityFixTemplates –≥–µ–Ω–µ—Ä–∞—Ü–∏—è',
        'RecommendationEngine –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è',
        '–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–∏–ø–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π',
        '–ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞',
      ];

      if (webRecommendations.length > 0 && engineRecommendations.length > 0) {
        status.status = 'working';
        status.coverage = 95;
        status.testResults = {
          webRecommendations: webRecommendations.length,
          engineRecommendations: engineRecommendations.length,
          hasCodeExamples: webRecommendations.some(r => r.codeExample),
          hasPriorities: engineRecommendations.every(r => r.priority),
        };
        console.log(`   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: ${engineRecommendations.length}`);
      } else {
        status.status = 'broken';
        status.coverage = 0;
        status.issues.push('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø: –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
      }
    } catch (error) {
      status.status = 'broken';
      status.coverage = 0;
      status.issues.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }

    return status;
  }

  async testSecurityCheckerIntegration(): Promise<ComponentStatus> {
    const status: ComponentStatus = {
      name: 'SecurityChecker Integration',
      status: 'untested',
      coverage: 0,
      issues: [],
      features: [],
    };

    try {
      const context: CheckContext = {
        projectPath: process.cwd(),
        projectInfo: {
          name: 'test-project',
          version: '1.0.0',
          hasTypeScript: true,
          hasTests: false,
          hasDocker: false,
          hasCICD: false,
          dependencies: {
            production: 5,
            development: 3,
            total: 8,
          },
        },
        options: {
          projectPath: process.cwd(),
        },
      };

      const result = await SecurityChecker.checkComponent(context);

      status.features = [
        '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
        '–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
        '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –≤–µ–±-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
        '–û–±—â–∏–π scoring –∏ reporting',
      ];

      if (result && typeof result === 'object') {
        status.status = 'working';
        status.coverage = 85;
        status.testResults = {
          hasResult: true,
          resultKeys: Object.keys(result),
          hasRecommendations: !!result.recommendations,
        };
        console.log(`   ‚úÖ SecurityChecker –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç`);
        console.log(`   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∏: ${Object.keys(result).join(', ')}`);
      } else {
        status.status = 'partial';
        status.coverage = 30;
        status.issues.push('SecurityChecker –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
      }
    } catch (error) {
      status.status = 'broken';
      status.coverage = 0;
      status.issues.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }

    return status;
  }

  private createTestContext(fileName: string, content?: string): any {
    return {
      projectPath: process.cwd(),
      filePath: fileName,
      fileContent: content || '',
      workspaceRoot: process.cwd(),
      projectInfo: {
        name: 'test-project',
        version: '1.0.0',
        hasTypeScript: true,
        hasTests: false,
        hasDocker: false,
        hasCICD: false,
        dependencies: {
          production: 0,
          development: 0,
          total: 0,
        },
      },
      options: {
        projectPath: process.cwd(),
      },
    };
  }

  private calculateOverallStatus(components: ComponentStatus[]): string {
    const workingCount = components.filter(c => c.status === 'working').length;
    const partialCount = components.filter(c => c.status === 'partial').length;
    const brokenCount = components.filter(c => c.status === 'broken').length;

    const totalComponents = components.length;
    const workingPercentage = (workingCount / totalComponents) * 100;

    if (brokenCount > 0) {
      return `–ß–ê–°–¢–ò–ß–ù–û –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ï–ù (${Math.round(workingPercentage)}% –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)`;
    } else if (workingCount === totalComponents) {
      return '–ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ï–ù';
    } else {
      return `–†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ï–ù –° –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø–ú–ò (${Math.round(workingPercentage)}% –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)`;
    }
  }

  private generateRecommendations(components: ComponentStatus[]): string[] {
    const recommendations: string[] = [];

    components.forEach(comp => {
      if (comp.status === 'broken') {
        recommendations.push(`–ö–†–ò–¢–ò–ß–ù–û: –ò—Å–ø—Ä–∞–≤–∏—Ç—å ${comp.name} - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç`);
      } else if (comp.status === 'partial') {
        recommendations.push(`–£–õ–£–ß–®–ò–¢–¨: ${comp.name} - –ø–æ–≤—ã—Å–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ —Å ${comp.coverage}%`);
      } else if (comp.coverage < 90) {
        recommendations.push(`–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–¢–¨: ${comp.name} - –¥–æ–≤–µ—Å—Ç–∏ –ø–æ–∫—Ä—ã—Ç–∏–µ –¥–æ 90%+`);
      }
    });

    return recommendations;
  }
}

// –ó–∞–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏
async function runStatusEvaluation() {
  const evaluator = new EAPAnalyzerStatusEvaluator();

  try {
    const results = await evaluator.runCompleteEvaluation();

    console.log('\n' + '='.repeat(60));
    console.log('üìä –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø EAP ANALYZER');
    console.log('='.repeat(60));

    console.log(`\nüèÜ –û–ë–©–ò–ô –°–¢–ê–¢–£–°: ${results.overallStatus}\n`);

    console.log('üìã –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –ö–û–ú–ü–û–ù–ï–ù–¢–ê–ú:\n');
    results.components.forEach((comp, index) => {
      const statusIcon =
        comp.status === 'working'
          ? '‚úÖ'
          : comp.status === 'partial'
            ? '‚ö†Ô∏è'
            : comp.status === 'broken'
              ? '‚ùå'
              : '‚ùì';

      console.log(`${index + 1}. ${statusIcon} ${comp.name}`);
      console.log(`   üìä –ü–æ–∫—Ä—ã—Ç–∏–µ: ${comp.coverage}%`);
      console.log(`   üîß –§—É–Ω–∫—Ü–∏–∏: ${comp.features.length} —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ`);

      if (comp.issues.length > 0) {
        console.log(`   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã:`);
        comp.issues.forEach(issue => {
          console.log(`      ‚Ä¢ ${issue}`);
        });
      }

      if (comp.testResults) {
        console.log(`   üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${JSON.stringify(comp.testResults)}`);
      }
      console.log('');
    });

    if (results.criticalIssues.length > 0) {
      console.log('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:');
      results.criticalIssues.forEach(issue => {
        console.log(`   ‚ùå ${issue}`);
      });
      console.log('');
    }

    if (results.recommendations.length > 0) {
      console.log('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:');
      results.recommendations.forEach((rec, index) => {
        console.log(`   ${index + 1}. ${rec}`);
      });
      console.log('');
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const avgCoverage =
      results.components.reduce((sum, comp) => sum + comp.coverage, 0) / results.components.length;
    const workingComponents = results.components.filter(c => c.status === 'working').length;

    console.log('üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`   ‚Ä¢ –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: ${Math.round(avgCoverage)}%`);
    console.log(`   ‚Ä¢ –†–∞–±–æ—Ç–∞—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${workingComponents}/${results.components.length}`);
    console.log(`   ‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: ${results.criticalIssues.length}`);
    console.log(`   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫ —É–ª—É—á—à–µ–Ω–∏—é: ${results.recommendations.length}`);

    console.log('\nüéØ –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –ü–†–û–î–ê–ö–®–ï–ù–£:');
    if (avgCoverage >= 90 && results.criticalIssues.length === 0) {
      console.log('   ‚úÖ –ì–û–¢–û–í –ö –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Æ');
    } else if (avgCoverage >= 70 && results.criticalIssues.length <= 1) {
      console.log('   ‚ö†Ô∏è –ì–û–¢–û–í –° –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø–ú–ò (—Ç—Ä–µ–±—É—é—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏)');
    } else {
      console.log('   ‚ùå –ù–ï –ì–û–¢–û–í (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã)');
    }

    return results;
  } catch (error) {
    console.error('üí• –§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê –í –û–¶–ï–ù–ö–ï:', error);
    return null;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É
runStatusEvaluation()
  .then(results => {
    if (results) {
      const avgCoverage =
        results.components.reduce((sum, comp) => sum + comp.coverage, 0) /
        results.components.length;
      process.exit(avgCoverage >= 70 ? 0 : 1);
    } else {
      process.exit(1);
    }
  })
  .catch(() => process.exit(1));
