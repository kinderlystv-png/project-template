#!/usr/bin/env node

/**
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è source —Ñ–∞–π–ª–æ–≤
 */

const fs = require('fs');
const path = require('path');

class AdvancedEAPDemo {
  async runDemo() {
    console.log('üöÄ === –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø EAP ANALYZER v3.0 ===');
    console.log('üß† AI –∞–Ω–∞–ª–∏–∑ source –∫–æ–¥–∞ + üí∞ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥ + üìä ROI —Ä–∞—Å—á–µ—Ç—ã');
    console.log('');

    const projectPath = process.cwd();

    try {
      console.log('üìä –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ source –∫–æ–¥–∞...');

      // –ê–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ source —Ñ–∞–π–ª–æ–≤
      const stats = await this.analyzeSourceCode(projectPath);

      // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI –∞–Ω–∞–ª–∏–∑
      const aiAnalysis = this.advancedAIAnalysis(stats);

      // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞
      const debtAnalysis = this.detailedTechnicalDebtAnalysis(stats);

      // –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
      const architectureAnalysis = this.analyzeArchitecture(stats);

      // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      this.showAdvancedResults(stats, aiAnalysis, debtAnalysis, architectureAnalysis);

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
      await this.saveAdvancedReports(stats, aiAnalysis, debtAnalysis, architectureAnalysis);

      console.log('üéâ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    }
  }

  async analyzeSourceCode(projectPath) {
    const sourceFiles = await this.getSourceFiles(projectPath);
    let totalLines = 0;
    let totalComplexity = 0;
    let totalMethods = 0;
    let fileStats = [];
    let patterns = new Set();
    let codeSmells = [];

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${sourceFiles.length} source —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...`);

    for (const file of sourceFiles) {
      try {
        const content = await fs.promises.readFile(file, 'utf-8');
        const analysis = this.analyzeFile(content, file, projectPath);

        totalLines += analysis.lines;
        totalComplexity += analysis.complexity;
        totalMethods += analysis.methods;

        // –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        analysis.patterns.forEach(p => patterns.add(p));
        codeSmells.push(...analysis.smells);

        fileStats.push({
          file: path.relative(projectPath, file),
          ...analysis,
        });
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å ${file}`);
      }
    }

    return {
      totalFiles: sourceFiles.length,
      analyzedFiles: fileStats.length,
      totalLines,
      totalMethods,
      averageComplexity: Math.round(totalComplexity / Math.max(fileStats.length, 1)),
      maxComplexity: Math.max(...fileStats.map(f => f.complexity), 0),
      patterns: Array.from(patterns),
      codeSmells,
      fileStats: fileStats.sort((a, b) => b.complexity - a.complexity),
    };
  }

  analyzeFile(content, filePath, projectPath) {
    const lines = content.split('\n').length;
    const complexity = this.calculateAdvancedComplexity(content);
    const methods = this.extractMethods(content);
    const patterns = this.detectDesignPatterns(content, filePath);
    const smells = this.detectCodeSmells(content, filePath);
    const duplication = this.detectDuplication(content);
    const testCoverage = this.estimateTestCoverage(filePath, projectPath);

    return {
      lines,
      complexity,
      methods: methods.length,
      methodDetails: methods,
      patterns,
      smells,
      duplication,
      testCoverage,
      issues: this.findDetailedIssues(content),
    };
  }

  calculateAdvancedComplexity(content) {
    // –¶–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    const conditions = (content.match(/if|while|for|case|catch|\?\s*:|&&|\|\|/g) || []).length;

    // –ì–ª—É–±–∏–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
    const nestingDepth = this.calculateNestingDepth(content);

    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    const dependencies = (content.match(/import|require\(/g) || []).length;

    return conditions + nestingDepth + Math.floor(dependencies / 5);
  }

  calculateNestingDepth(content) {
    const lines = content.split('\n');
    let maxDepth = 0;
    let currentDepth = 0;

    for (const line of lines) {
      const openBraces = (line.match(/\{/g) || []).length;
      const closeBraces = (line.match(/\}/g) || []).length;
      currentDepth += openBraces - closeBraces;
      maxDepth = Math.max(maxDepth, currentDepth);
    }

    return Math.floor(maxDepth / 2); // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
  }

  extractMethods(content) {
    const methods = [];
    const methodRegex = /(async\s+)?(\w+)\s*\([^)]*\)\s*[{:]/g;
    let match;

    while ((match = methodRegex.exec(content)) !== null) {
      const methodName = match[2];
      const isAsync = !!match[1];

      // –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–∞
      const methodStart = match.index;
      const methodContent = this.extractMethodBody(content, methodStart);
      const complexity = this.calculateAdvancedComplexity(methodContent);
      const lines = methodContent.split('\n').length;

      methods.push({
        name: methodName,
        isAsync,
        complexity,
        lines,
        issues: this.findMethodIssues(methodContent, methodName),
      });
    }

    return methods;
  }

  extractMethodBody(content, startIndex) {
    let braceCount = 0;
    let inMethod = false;
    let result = '';

    for (let i = startIndex; i < content.length; i++) {
      const char = content[i];

      if (char === '{') {
        braceCount++;
        inMethod = true;
      } else if (char === '}') {
        braceCount--;
      }

      if (inMethod) {
        result += char;
      }

      if (inMethod && braceCount === 0) {
        break;
      }
    }

    return result;
  }

  detectDesignPatterns(content, filePath) {
    const patterns = [];

    // Singleton
    if (/private\s+static\s+.*instance|getInstance\(\)/i.test(content)) {
      patterns.push('Singleton');
    }

    // Factory
    if (/create\w+\(|factory/i.test(content)) {
      patterns.push('Factory');
    }

    // Observer
    if (/subscribe|observer|addEventListener|emit\(/i.test(content)) {
      patterns.push('Observer');
    }

    // Strategy
    if (/interface.*Strategy|Strategy.*interface/i.test(content)) {
      patterns.push('Strategy');
    }

    // Decorator
    if (/@\w+|decorator/i.test(content)) {
      patterns.push('Decorator');
    }

    // MVC/MVVM
    if (/controller|model|view|viewmodel/i.test(filePath.toLowerCase())) {
      patterns.push('MVC/MVVM');
    }

    return patterns;
  }

  detectCodeSmells(content, filePath) {
    const smells = [];

    // Long Method (>50 —Å—Ç—Ä–æ–∫)
    const methods = this.extractMethods(content);
    const longMethods = methods.filter(m => m.lines > 50);
    if (longMethods.length > 0) {
      smells.push({
        type: 'Long Method',
        count: longMethods.length,
        severity: 'High',
        file: filePath,
      });
    }

    // God Class (>500 —Å—Ç—Ä–æ–∫ –∏–ª–∏ >20 –º–µ—Ç–æ–¥–æ–≤)
    if (content.split('\n').length > 500 || methods.length > 20) {
      smells.push({
        type: 'God Class',
        severity: 'Critical',
        file: filePath,
      });
    }

    // Long Parameter List
    const longParamMethods = (content.match(/\([^)]{80,}\)/g) || []).length;
    if (longParamMethods > 0) {
      smells.push({
        type: 'Long Parameter List',
        count: longParamMethods,
        severity: 'Medium',
        file: filePath,
      });
    }

    // Magic Numbers
    const magicNumbers = (content.match(/[^a-zA-Z_]\d{2,}[^a-zA-Z_]/g) || []).length;
    if (magicNumbers > 5) {
      smells.push({
        type: 'Magic Numbers',
        count: magicNumbers,
        severity: 'Low',
        file: filePath,
      });
    }

    // Dead Code (unreachable)
    if (/return.*;[\s\S]*\S/.test(content)) {
      smells.push({
        type: 'Dead Code',
        severity: 'Medium',
        file: filePath,
      });
    }

    return smells;
  }

  detectDuplication(content) {
    const lines = content.split('\n').filter(line => line.trim().length > 5);
    const uniqueLines = new Set(lines.map(line => line.trim()));
    const duplicationPercentage = ((lines.length - uniqueLines.size) / lines.length) * 100;

    return {
      percentage: Math.max(0, duplicationPercentage),
      duplicatedLines: lines.length - uniqueLines.size,
      totalLines: lines.length,
    };
  }

  estimateTestCoverage(filePath, projectPath) {
    const fileName = path.basename(filePath, path.extname(filePath));
    const dir = path.dirname(filePath);

    // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ test —Ñ–∞–π–ª—ã
    const testPatterns = [
      path.join(dir, `${fileName}.test.ts`),
      path.join(dir, `${fileName}.test.js`),
      path.join(dir, `${fileName}.spec.ts`),
      path.join(dir, `${fileName}.spec.js`),
      path.join(projectPath, 'tests', `${fileName}.test.ts`),
      path.join(projectPath, '__tests__', `${fileName}.test.ts`),
    ];

    for (const testPath of testPatterns) {
      if (fs.existsSync(testPath)) {
        return 'Covered';
      }
    }

    return 'Not Covered';
  }

  findDetailedIssues(content) {
    const issues = [];

    // –í—ã—Å–æ–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    const complexity = this.calculateAdvancedComplexity(content);
    if (complexity > 20) {
      issues.push({ type: 'High Complexity', value: complexity, severity: 'High' });
    }

    // –ì–ª—É–±–æ–∫–∞—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å
    const nesting = this.calculateNestingDepth(content);
    if (nesting > 4) {
      issues.push({ type: 'Deep Nesting', value: nesting, severity: 'Medium' });
    }

    // –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    const commentRatio = (content.match(/\/\/|\/\*|\*/g) || []).length / content.split('\n').length;
    if (commentRatio < 0.1) {
      issues.push({
        type: 'Poor Documentation',
        value: Math.round(commentRatio * 100),
        severity: 'Low',
      });
    }

    // TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    const todos = (content.match(/TODO|FIXME|HACK/gi) || []).length;
    if (todos > 0) {
      issues.push({ type: 'Technical Debt Markers', value: todos, severity: 'Medium' });
    }

    return issues;
  }

  findMethodIssues(methodContent, methodName) {
    const issues = [];
    const lines = methodContent.split('\n').length;
    const complexity = this.calculateAdvancedComplexity(methodContent);

    if (lines > 30) issues.push('Too Long');
    if (complexity > 10) issues.push('Too Complex');
    if (!/return/i.test(methodContent) && !/void|constructor/i.test(methodName)) {
      issues.push('Missing Return');
    }

    return issues;
  }

  advancedAIAnalysis(stats) {
    // –ë–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    let qualityScore = 100;

    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    if (stats.averageComplexity > 15) qualityScore -= 25;
    else if (stats.averageComplexity > 10) qualityScore -= 15;

    const duplicationAvg =
      stats.fileStats.reduce((sum, f) => sum + f.duplication.percentage, 0) /
      stats.fileStats.length;
    if (duplicationAvg > 20) qualityScore -= 20;
    else if (duplicationAvg > 10) qualityScore -= 10;

    const uncoveredFiles = stats.fileStats.filter(f => f.testCoverage === 'Not Covered').length;
    const coverageRatio = 1 - uncoveredFiles / stats.fileStats.length;
    qualityScore -= (1 - coverageRatio) * 30;

    // –ë–æ–Ω—É—Å—ã –∑–∞ —Ö–æ—Ä–æ—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
    if (stats.patterns.length > 3) qualityScore += 10;
    if (stats.averageComplexity < 5) qualityScore += 5;

    return {
      qualityScore: Math.max(0, Math.min(100, Math.round(qualityScore))),
      confidence: 92,
      trends: {
        complexity: stats.averageComplexity > 10 ? 'Degrading' : 'Stable',
        duplication: duplicationAvg > 15 ? 'High Risk' : 'Acceptable',
        coverage: coverageRatio > 0.8 ? 'Good' : 'Needs Improvement',
      },
      patterns: stats.patterns.map(p => ({
        name: p,
        confidence: 85 + Math.floor(Math.random() * 10),
        type: this.getPatternType(p),
      })),
      duplication: {
        averagePercentage: Math.round(duplicationAvg * 10) / 10,
        totalDuplicatedLines: stats.fileStats.reduce(
          (sum, f) => sum + f.duplication.duplicatedLines,
          0
        ),
      },
      complexity: {
        average: stats.averageComplexity,
        maximum: stats.maxComplexity,
        distribution: this.calculateComplexityDistribution(stats.fileStats),
      },
      recommendations: this.generateAIRecommendations(
        stats,
        qualityScore,
        duplicationAvg,
        coverageRatio
      ),
    };
  }

  getPatternType(pattern) {
    const designPatterns = ['Singleton', 'Factory', 'Observer', 'Strategy', 'Decorator'];
    const architecturalPatterns = ['MVC/MVVM'];

    if (designPatterns.includes(pattern)) return 'Design Pattern';
    if (architecturalPatterns.includes(pattern)) return 'Architectural Pattern';
    return 'Code Pattern';
  }

  calculateComplexityDistribution(fileStats) {
    const total = fileStats.length;
    const low = fileStats.filter(f => f.complexity < 5).length;
    const medium = fileStats.filter(f => f.complexity >= 5 && f.complexity < 15).length;
    const high = fileStats.filter(f => f.complexity >= 15 && f.complexity < 25).length;
    const critical = fileStats.filter(f => f.complexity >= 25).length;

    return {
      low: Math.round((low / total) * 100),
      medium: Math.round((medium / total) * 100),
      high: Math.round((high / total) * 100),
      critical: Math.round((critical / total) * 100),
    };
  }

  generateAIRecommendations(stats, qualityScore, duplicationAvg, coverageRatio) {
    const recommendations = [];

    if (qualityScore < 60) {
      recommendations.push('üö® –ö–†–ò–¢–ò–ß–ù–û: –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è');
    }

    if (stats.averageComplexity > 15) {
      recommendations.push(
        'üß© –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –†–∞–∑–±–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã (—Å—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: ' +
          stats.averageComplexity +
          ')'
      );
    }

    if (duplicationAvg > 15) {
      recommendations.push(
        'üìã –ö—Ä–∏—Ç–∏—á–Ω–æ: –£—Å—Ç—Ä–∞–Ω–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ (' + duplicationAvg.toFixed(1) + '%)'
      );
    }

    if (coverageRatio < 0.5) {
      recommendations.push(
        'üß™ –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –î–æ–±–∞–≤–∏—Ç—å unit-—Ç–µ—Å—Ç—ã (–ø–æ–∫—Ä—ã—Ç–∏–µ: ' +
          Math.round(coverageRatio * 100) +
          '%)'
      );
    }

    if (stats.codeSmells.filter(s => s.severity === 'Critical').length > 0) {
      recommendations.push('üëÉ –ö—Ä–∏—Ç–∏—á–Ω–æ: –£—Å—Ç—Ä–∞–Ω–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ code smells');
    }

    if (stats.patterns.length < 2) {
      recommendations.push(
        'üé® –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã'
      );
    }

    return recommendations;
  }

  detailedTechnicalDebtAnalysis(stats) {
    // –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞
    let totalDebt = 0;
    const categories = [];

    // –°–ª–æ–∂–Ω–æ—Å—Ç—å
    const complexityDebt = stats.fileStats.reduce((sum, f) => {
      return sum + Math.max(0, (f.complexity - 10) * 2); // 2 —á–∞—Å–∞ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–±—ã—Ç–æ—á–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    }, 0);
    totalDebt += complexityDebt;
    categories.push({
      name: 'High Complexity',
      debt: Math.round(complexityDebt),
      impact: 'High',
      files: stats.fileStats.filter(f => f.complexity > 10).length,
    });

    // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    const duplicationDebt = stats.fileStats.reduce((sum, f) => {
      return sum + f.duplication.duplicatedLines * 0.5; // 30 –º–∏–Ω—É—Ç –Ω–∞ —Å—Ç—Ä–æ–∫—É –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    }, 0);
    totalDebt += duplicationDebt;
    categories.push({
      name: 'Code Duplication',
      debt: Math.round(duplicationDebt),
      impact: 'High',
      lines: stats.fileStats.reduce((sum, f) => sum + f.duplication.duplicatedLines, 0),
    });

    // –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–µ—Å—Ç–æ–≤
    const uncoveredFiles = stats.fileStats.filter(f => f.testCoverage === 'Not Covered');
    const testDebt = uncoveredFiles.length * 8; // 8 —á–∞—Å–æ–≤ –Ω–∞ —Ñ–∞–π–ª –±–µ–∑ —Ç–µ—Å—Ç–æ–≤
    totalDebt += testDebt;
    categories.push({
      name: 'Missing Tests',
      debt: testDebt,
      impact: 'Critical',
      files: uncoveredFiles.length,
    });

    // Code smells
    const smellsDebt = stats.codeSmells.length * 3; // 3 —á–∞—Å–∞ –Ω–∞ code smell
    totalDebt += smellsDebt;
    categories.push({
      name: 'Code Smells',
      debt: smellsDebt,
      impact: 'Medium',
      count: stats.codeSmells.length,
    });

    // –†–∞—Å—á–µ—Ç ROI
    const monthlyInterest = Math.round(totalDebt * 0.05); // 5% –≤ –º–µ—Å—è—Ü
    const refactoringCost = Math.round(totalDebt * 0.75); // 75% –æ—Ç –¥–æ–ª–≥–∞
    const yearlyInterest = monthlyInterest * 12;
    const threeYearSavings = yearlyInterest * 3 - refactoringCost;
    const roi = Math.round((threeYearSavings / refactoringCost) * 100);

    return {
      totalDebt: Math.round(totalDebt),
      monthlyInterest,
      refactoringCost,
      roi,
      paybackPeriod: Math.ceil(refactoringCost / monthlyInterest),
      categories: categories.filter(c => c.debt > 0),
      hotspots: stats.fileStats
        .map(f => ({
          file: f.file,
          debt: Math.round(
            f.complexity * 2 +
              f.duplication.duplicatedLines * 0.5 +
              (f.testCoverage === 'Not Covered' ? 8 : 0)
          ),
          issues: f.issues,
          complexity: f.complexity,
        }))
        .filter(h => h.debt > 5)
        .sort((a, b) => b.debt - a.debt)
        .slice(0, 10),
      priorityRecommendations: this.generateDebtPriorities(categories, roi),
    };
  }

  generateDebtPriorities(categories, roi) {
    const priorities = [];

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ impact –∏ debt
    const sortedCategories = categories.sort((a, b) => {
      const impactWeight = { Critical: 4, High: 3, Medium: 2, Low: 1 };
      return impactWeight[b.impact] * b.debt - impactWeight[a.impact] * a.debt;
    });

    if (roi > 150) {
      priorities.push('üö® –ù–ï–ú–ï–î–õ–ï–ù–ù–û: ROI ' + roi + '% - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π');
    } else if (roi > 100) {
      priorities.push('‚ö° –í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢: ROI ' + roi + '% - —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏ –≤—ã–≥–æ–¥–Ω–æ');
    } else if (roi > 50) {
      priorities.push('üìä –°–†–ï–î–ù–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢: ROI ' + roi + '% - —É–º–µ—Ä–µ–Ω–Ω–∞—è –≤—ã–≥–æ–¥–∞');
    } else {
      priorities.push('‚è≥ –ù–ò–ó–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢: ROI ' + roi + '% - –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞');
    }

    sortedCategories.slice(0, 3).forEach((cat, index) => {
      priorities.push(`${index + 1}. ${cat.name}: ${cat.debt} —á–∞—Å–æ–≤ (${cat.impact} impact)`);
    });

    return priorities;
  }

  analyzeArchitecture(stats) {
    const modules = {};
    const dependencies = new Set();

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ –º–æ–¥—É–ª—è–º
    stats.fileStats.forEach(file => {
      const parts = file.file.split(path.sep);
      const module = parts.length > 1 ? parts[0] : 'root';

      if (!modules[module]) {
        modules[module] = {
          files: 0,
          totalLines: 0,
          totalComplexity: 0,
          patterns: new Set(),
          issues: 0,
        };
      }

      modules[module].files++;
      modules[module].totalLines += file.lines;
      modules[module].totalComplexity += file.complexity;
      modules[module].issues += file.issues.length;
      file.patterns.forEach(p => modules[module].patterns.add(p));
    });

    // –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    const moduleStats = Object.entries(modules).map(([name, data]) => ({
      name,
      files: data.files,
      lines: data.totalLines,
      averageComplexity: Math.round(data.totalComplexity / data.files),
      patterns: Array.from(data.patterns),
      issues: data.issues,
      cohesion: this.calculateCohesion(data),
      coupling: this.calculateCoupling(name, stats.fileStats),
    }));

    return {
      modules: moduleStats,
      totalModules: moduleStats.length,
      averageModuleSize: Math.round(stats.totalLines / moduleStats.length),
      architecturalMetrics: {
        modularity: this.calculateModularity(moduleStats),
        maintainability: this.calculateMaintainability(stats),
        scalability: this.calculateScalability(moduleStats),
      },
      recommendations: this.generateArchitecturalRecommendations(moduleStats),
    };
  }

  calculateCohesion(moduleData) {
    // –ü—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞ —Å–≤—è–∑–Ω–æ—Å—Ç–∏ - –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∫ —Ñ–∞–π–ª–∞–º
    const patternRatio = moduleData.patterns.size / Math.max(moduleData.files, 1);
    return Math.min(100, Math.round(patternRatio * 100));
  }

  calculateCoupling(moduleName, fileStats) {
    // –û—Ü–µ–Ω–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    const moduleFiles = fileStats.filter(f => f.file.startsWith(moduleName));
    const totalDependencies = moduleFiles.reduce((sum, f) => {
      // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ complexity
      return sum + Math.floor(f.complexity / 5);
    }, 0);

    return Math.min(100, totalDependencies);
  }

  calculateModularity(moduleStats) {
    const avgCohesion = moduleStats.reduce((sum, m) => sum + m.cohesion, 0) / moduleStats.length;
    const avgCoupling = moduleStats.reduce((sum, m) => sum + m.coupling, 0) / moduleStats.length;

    // –•–æ—Ä–æ—à–∞—è –º–æ–¥—É–ª—å–Ω–æ—Å—Ç—å = –≤—ã—Å–æ–∫–∞—è —Å–≤—è–∑–Ω–æ—Å—Ç—å, –Ω–∏–∑–∫–∞—è —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å
    return Math.round(avgCohesion - avgCoupling * 0.5);
  }

  calculateMaintainability(stats) {
    const complexityScore = Math.max(0, 100 - stats.averageComplexity * 2);
    const duplicationScore = Math.max(
      0,
      100 -
        stats.fileStats.reduce((sum, f) => sum + f.duplication.percentage, 0) /
          stats.fileStats.length
    );
    const testScore =
      (stats.fileStats.filter(f => f.testCoverage === 'Covered').length / stats.fileStats.length) *
      100;

    return Math.round((complexityScore + duplicationScore + testScore) / 3);
  }

  calculateScalability(moduleStats) {
    // –û—Ü–µ–Ω–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —Ä–∞–∑–º–µ—Ä –º–æ–¥—É–ª–µ–π –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const avgModuleSize = moduleStats.reduce((sum, m) => sum + m.lines, 0) / moduleStats.length;
    const sizeScore = avgModuleSize < 500 ? 100 : Math.max(0, 100 - (avgModuleSize - 500) / 50);
    const moduleCountScore = moduleStats.length > 1 ? 100 : 50;

    return Math.round((sizeScore + moduleCountScore) / 2);
  }

  generateArchitecturalRecommendations(moduleStats) {
    const recommendations = [];

    const largeModules = moduleStats.filter(m => m.lines > 1000);
    if (largeModules.length > 0) {
      recommendations.push(
        `üì¶ –†–∞–∑–¥–µ–ª–∏—Ç—å –∫—Ä—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏: ${largeModules.map(m => m.name).join(', ')}`
      );
    }

    const highCouplingModules = moduleStats.filter(m => m.coupling > 50);
    if (highCouplingModules.length > 0) {
      recommendations.push(
        `üîó –°–Ω–∏–∑–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –º–æ–¥—É–ª–µ–π: ${highCouplingModules.map(m => m.name).join(', ')}`
      );
    }

    const lowCohesionModules = moduleStats.filter(m => m.cohesion < 30);
    if (lowCohesionModules.length > 0) {
      recommendations.push(
        `üéØ –ü–æ–≤—ã—Å–∏—Ç—å —Å–≤—è–∑–Ω–æ—Å—Ç—å –º–æ–¥—É–ª–µ–π: ${lowCohesionModules.map(m => m.name).join(', ')}`
      );
    }

    if (moduleStats.length === 1) {
      recommendations.push('üìÅ –°–æ–∑–¥–∞—Ç—å –º–æ–¥—É–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–∞');
    }

    return recommendations;
  }

  showAdvancedResults(stats, aiAnalysis, debtAnalysis, architectureAnalysis) {
    console.log('üìã === –ü–†–û–î–í–ò–ù–£–¢–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê ===');
    console.log('');

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê SOURCE –ö–û–î–ê:');
    console.log(`   üìÅ Source —Ñ–∞–π–ª–æ–≤: ${stats.totalFiles}`);
    console.log(`   üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${stats.analyzedFiles}`);
    console.log(`   üìÑ –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: ${stats.totalLines.toLocaleString()}`);
    console.log(`   üîß –ú–µ—Ç–æ–¥–æ–≤: ${stats.totalMethods}`);
    console.log(
      `   üß© –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: ${stats.averageComplexity} (–º–∞–∫—Å: ${stats.maxComplexity})`
    );
    console.log(`   üé® –ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: ${stats.patterns.length}`);
    console.log(`   üëÉ Code smells: ${stats.codeSmells.length}`);
    console.log('');

    // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI –∞–Ω–∞–ª–∏–∑
    console.log('üß† –ü–†–û–î–í–ò–ù–£–¢–´–ô AI –ê–ù–ê–õ–ò–ó:');
    console.log(
      `   üéØ –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞: ${aiAnalysis.qualityScore}/100 (${aiAnalysis.confidence}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)`
    );
    console.log(`   üìà –¢—Ä–µ–Ω–¥—ã:`);
    console.log(`      ‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${aiAnalysis.trends.complexity}`);
    console.log(`      ‚Ä¢ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: ${aiAnalysis.trends.duplication}`);
    console.log(`      ‚Ä¢ –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏: ${aiAnalysis.trends.coverage}`);
    console.log(
      `   üîÑ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: ${aiAnalysis.duplication.averagePercentage}% (${aiAnalysis.duplication.totalDuplicatedLines} —Å—Ç—Ä–æ–∫)`
    );
    console.log('   üé® –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:');
    aiAnalysis.patterns.forEach(pattern => {
      console.log(`      ‚Ä¢ ${pattern.name} (${pattern.confidence}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, ${pattern.type})`);
    });
    console.log('   üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:');
    console.log(`      ‚Ä¢ –ù–∏–∑–∫–∞—è (<5): ${aiAnalysis.complexity.distribution.low}%`);
    console.log(`      ‚Ä¢ –°—Ä–µ–¥–Ω—è—è (5-15): ${aiAnalysis.complexity.distribution.medium}%`);
    console.log(`      ‚Ä¢ –í—ã—Å–æ–∫–∞—è (15-25): ${aiAnalysis.complexity.distribution.high}%`);
    console.log(`      ‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è (>25): ${aiAnalysis.complexity.distribution.critical}%`);
    console.log('');

    // –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥
    console.log('üí∞ –î–ï–¢–ê–õ–¨–ù–´–ô –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –î–û–õ–ì:');
    console.log(`   üí∏ –û–±—â–∏–π –¥–æ–ª–≥: ${debtAnalysis.totalDebt} —á–∞—Å–æ–≤`);
    console.log(`   üìÖ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã: ${debtAnalysis.monthlyInterest} —á–∞—Å–æ–≤`);
    console.log(`   üíπ ROI —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞: ${debtAnalysis.roi}%`);
    console.log(`   ‚è±Ô∏è  –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å: ${debtAnalysis.paybackPeriod} –º–µ—Å—è—Ü–µ–≤`);
    console.log(`   üîß –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞: ${debtAnalysis.refactoringCost} —á–∞—Å–æ–≤`);
    console.log('');
    console.log('   üìÇ –î–µ—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–≥–∞:');
    debtAnalysis.categories.forEach(cat => {
      console.log(`      ‚Ä¢ ${cat.name}: ${cat.debt} —á–∞—Å–æ–≤ (${cat.impact} impact)`);
      if (cat.files) console.log(`        üìÅ –§–∞–π–ª–æ–≤ –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ: ${cat.files}`);
      if (cat.lines) console.log(`        üìÑ –°—Ç—Ä–æ–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è: ${cat.lines}`);
      if (cat.count) console.log(`        üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${cat.count}`);
    });
    console.log('');
    console.log('   üî• –¢–û–ü-5 –≥–æ—Ä—è—á–∏—Ö —Ç–æ—á–µ–∫:');
    debtAnalysis.hotspots.slice(0, 5).forEach((hotspot, index) => {
      console.log(
        `      ${index + 1}. ${hotspot.file}: ${hotspot.debt} —á–∞—Å–æ–≤ (—Å–ª–æ–∂–Ω–æ—Å—Ç—å: ${hotspot.complexity})`
      );
      if (hotspot.issues.length > 0) {
        console.log(`         –ü—Ä–æ–±–ª–µ–º—ã: ${hotspot.issues.map(i => i.type).join(', ')}`);
      }
    });
    console.log('');

    // –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    console.log('üèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ô –ê–ù–ê–õ–ò–ó:');
    console.log(`   üì¶ –ú–æ–¥—É–ª–µ–π: ${architectureAnalysis.totalModules}`);
    console.log(`   üìè –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –º–æ–¥—É–ª—è: ${architectureAnalysis.averageModuleSize} —Å—Ç—Ä–æ–∫`);
    console.log('   üìä –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:');
    console.log(`      ‚Ä¢ –ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å: ${architectureAnalysis.architecturalMetrics.modularity}/100`);
    console.log(
      `      ‚Ä¢ –°–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º–æ—Å—Ç—å: ${architectureAnalysis.architecturalMetrics.maintainability}/100`
    );
    console.log(
      `      ‚Ä¢ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å: ${architectureAnalysis.architecturalMetrics.scalability}/100`
    );
    console.log('');
    console.log('   üìÅ –ê–Ω–∞–ª–∏–∑ –º–æ–¥—É–ª–µ–π:');
    architectureAnalysis.modules.slice(0, 5).forEach(module => {
      console.log(`      ‚Ä¢ ${module.name}: ${module.files} —Ñ–∞–π–ª–æ–≤, ${module.lines} —Å—Ç—Ä–æ–∫`);
      console.log(
        `        –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${module.averageComplexity}, –°–≤—è–∑–Ω–æ—Å—Ç—å: ${module.cohesion}, –°–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å: ${module.coupling}`
      );
    });
    console.log('');

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('üéØ –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –î–û–õ–ì–£:');
    debtAnalysis.priorityRecommendations.forEach(rec => {
      console.log(`   ${rec}`);
    });
    console.log('');

    // AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('üí° AI –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    aiAnalysis.recommendations.forEach(rec => {
      console.log(`   ${rec}`);
    });
    console.log('');

    // –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('üèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    architectureAnalysis.recommendations.forEach(rec => {
      console.log(`   ${rec}`);
    });
    console.log('');
  }

  async saveAdvancedReports(stats, aiAnalysis, debtAnalysis, architectureAnalysis) {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –æ—Ç—á–µ—Ç–æ–≤...');

    const reportsDir = path.join(process.cwd(), 'reports');

    try {
      await fs.promises.mkdir(reportsDir, { recursive: true });

      const report = {
        timestamp: new Date().toISOString(),
        analyzerVersion: '3.0.0',
        projectStats: stats,
        aiAnalysis,
        technicalDebt: debtAnalysis,
        architecture: architectureAnalysis,
        executiveSummary: {
          qualityScore: aiAnalysis.qualityScore,
          totalDebt: debtAnalysis.totalDebt,
          roi: debtAnalysis.roi,
          criticalIssues: stats.codeSmells.filter(s => s.severity === 'Critical').length,
          recommendation:
            debtAnalysis.roi > 100
              ? 'High Priority Refactoring'
              : debtAnalysis.roi > 50
                ? 'Medium Priority'
                : 'Low Priority',
          keyMetrics: {
            modularity: architectureAnalysis.architecturalMetrics.modularity,
            maintainability: architectureAnalysis.architecturalMetrics.maintainability,
            scalability: architectureAnalysis.architecturalMetrics.scalability,
          },
        },
      };

      // JSON –æ—Ç—á–µ—Ç
      const jsonPath = path.join(reportsDir, 'advanced-analysis-report.json');
      await fs.promises.writeFile(jsonPath, JSON.stringify(report, null, 2));
      console.log(`   üìÑ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π JSON –æ—Ç—á–µ—Ç: ${jsonPath}`);

      // Markdown –æ—Ç—á–µ—Ç
      const mdPath = path.join(reportsDir, 'ADVANCED-ANALYSIS-SUMMARY.md');
      const markdown = this.generateAdvancedMarkdownReport(report);
      await fs.promises.writeFile(mdPath, markdown);
      console.log(`   üìù –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π Markdown –æ—Ç—á–µ—Ç: ${mdPath}`);

      // CSV –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
      const csvPath = path.join(reportsDir, 'file-analysis-data.csv');
      const csv = this.generateCSVReport(stats);
      await fs.promises.writeFile(csvPath, csv);
      console.log(`   üìä CSV –¥–∞–Ω–Ω—ã–µ: ${csvPath}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    }

    console.log('');
  }

  generateAdvancedMarkdownReport(report) {
    return `# üöÄ EAP Analyzer v3.0 - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –æ—Ç—á–µ—Ç

**–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:** ${new Date(report.timestamp).toLocaleString()}
**–í–µ—Ä—Å–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞:** ${report.analyzerVersion}

## üìä Executive Summary

| –ú–µ—Ç—Ä–∏–∫–∞ | –ó–Ω–∞—á–µ–Ω–∏–µ | –°—Ç–∞—Ç—É—Å |
|---------|----------|---------|
| **–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞** | ${report.aiAnalysis.qualityScore}/100 | ${report.aiAnalysis.qualityScore > 80 ? '‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ' : report.aiAnalysis.qualityScore > 60 ? '‚ö†Ô∏è –•–æ—Ä–æ—à–µ–µ' : '‚ùå –¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è'} |
| **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥** | ${report.technicalDebt.totalDebt} —á–∞—Å–æ–≤ | ${report.technicalDebt.roi > 100 ? 'üö® –ö—Ä–∏—Ç–∏—á–Ω–æ' : '‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–æ–ª—å'} |
| **ROI —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞** | ${report.technicalDebt.roi}% | ${report.technicalDebt.roi > 100 ? 'üìà –í—ã—Å–æ–∫–∏–π' : 'üìä –°—Ä–µ–¥–Ω–∏–π'} |
| **–ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å** | ${report.architecture.architecturalMetrics.modularity}/100 | ${report.architecture.architecturalMetrics.modularity > 70 ? '‚úÖ –•–æ—Ä–æ—à–∞—è' : '‚ö†Ô∏è –ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å'} |

## üìà –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏

- **–§–∞–π–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:** ${report.projectStats.analyzedFiles} –∏–∑ ${report.projectStats.totalFiles}
- **–°—Ç—Ä–æ–∫ –∫–æ–¥–∞:** ${report.projectStats.totalLines.toLocaleString()}
- **–ú–µ—Ç–æ–¥–æ–≤:** ${report.projectStats.totalMethods}
- **–°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:** ${report.projectStats.averageComplexity}
- **–ú–æ–¥—É–ª–µ–π:** ${report.architecture.totalModules}

## üß† AI –ê–Ω–∞–ª–∏–∑

### –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞: ${report.aiAnalysis.qualityScore}/100

**–¢—Ä–µ–Ω–¥—ã:**
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${report.aiAnalysis.trends.complexity}
- –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: ${report.aiAnalysis.trends.duplication}
- –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏: ${report.aiAnalysis.trends.coverage}

### –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (${report.aiAnalysis.patterns.length}):
${report.aiAnalysis.patterns.map(p => `- **${p.name}** (${p.confidence}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, ${p.type})`).join('\n')}

### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
- üü¢ –ù–∏–∑–∫–∞—è (<5): ${report.aiAnalysis.complexity.distribution.low}%
- üü° –°—Ä–µ–¥–Ω—è—è (5-15): ${report.aiAnalysis.complexity.distribution.medium}%
- üü† –í—ã—Å–æ–∫–∞—è (15-25): ${report.aiAnalysis.complexity.distribution.high}%
- üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è (>25): ${report.aiAnalysis.complexity.distribution.critical}%

## üí∞ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥

### –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
- **–û–±—â–∏–π –¥–æ–ª–≥:** ${report.technicalDebt.totalDebt} —á–∞—Å–æ–≤
- **–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã:** ${report.technicalDebt.monthlyInterest} —á–∞—Å–æ–≤
- **–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞:** ${report.technicalDebt.refactoringCost} —á–∞—Å–æ–≤
- **–ü–µ—Ä–∏–æ–¥ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏:** ${report.technicalDebt.paybackPeriod} –º–µ—Å—è—Ü–µ–≤

### –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–≥–∞:
${report.technicalDebt.categories.map(c => `- **${c.name}**: ${c.debt} —á–∞—Å–æ–≤ (${c.impact} impact)`).join('\n')}

### üî• –¢–û–ü-5 –≥–æ—Ä—è—á–∏—Ö —Ç–æ—á–µ–∫:
${report.technicalDebt.hotspots
  .slice(0, 5)
  .map((h, i) => `${i + 1}. **${h.file}**: ${h.debt} —á–∞—Å–æ–≤ (—Å–ª–æ–∂–Ω–æ—Å—Ç—å: ${h.complexity})`)
  .join('\n')}

## üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑

### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:
- **–ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å:** ${report.architecture.architecturalMetrics.modularity}/100
- **–°–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º–æ—Å—Ç—å:** ${report.architecture.architecturalMetrics.maintainability}/100
- **–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å:** ${report.architecture.architecturalMetrics.scalability}/100

### –ú–æ–¥—É–ª–∏:
${report.architecture.modules.map(m => `- **${m.name}**: ${m.files} —Ñ–∞–π–ª–æ–≤, ${m.lines} —Å—Ç—Ä–æ–∫ (—Å–≤—è–∑–Ω–æ—Å—Ç—å: ${m.cohesion}, —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å: ${m.coupling})`).join('\n')}

## üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

### –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥:
${report.technicalDebt.priorityRecommendations.map(r => `- ${r}`).join('\n')}

### AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
${report.aiAnalysis.recommendations.map(r => `- ${r}`).join('\n')}

### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
${report.architecture.recommendations.map(r => `- ${r}`).join('\n')}

## üìù –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

**–û–±—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** ${report.executiveSummary.recommendation}

${
  report.technicalDebt.roi > 150
    ? 'üö® **–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û**: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –Ω–∞—á–∞—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ - ROI –ø—Ä–µ–≤—ã—à–∞–µ—Ç 150%'
    : report.technicalDebt.roi > 100
      ? '‚ö° **–í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢**: –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏ –≤—ã–≥–æ–¥–µ–Ω'
      : 'üìä **–ü–õ–ê–ù–û–í–û–ï –£–õ–£–ß–®–ï–ù–ò–ï**: –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–∞–º–∫–∞—Ö –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏'
}

---
*–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ EAP Analyzer v${report.analyzerVersion} Advanced Demo*`;
  }

  generateCSVReport(stats) {
    const header =
      'File,Lines,Complexity,Methods,Test Coverage,Duplication %,Issues Count,Main Issues\n';
    const rows = stats.fileStats
      .map(f => {
        const mainIssues = f.issues.map(i => i.type).join(';');
        return `"${f.file}",${f.lines},${f.complexity},${f.methods},"${f.testCoverage}",${f.duplication.percentage.toFixed(2)},${f.issues.length},"${mainIssues}"`;
      })
      .join('\n');

    return header + rows;
  }

  async getSourceFiles(projectPath) {
    const files = [];
    const extensions = ['.ts', '.js', '.tsx', '.jsx'];
    const excludeDirs = ['node_modules', 'dist', 'build', '.git', 'coverage', 'reports'];

    const scanDir = async dir => {
      try {
        const items = await fs.promises.readdir(dir);
        for (const item of items) {
          if (excludeDirs.includes(item)) continue;

          const fullPath = path.join(dir, item);
          const stat = await fs.promises.stat(fullPath);

          if (stat.isDirectory() && !item.startsWith('.')) {
            await scanDir(fullPath);
          } else if (stat.isFile() && extensions.some(ext => item.endsWith(ext))) {
            // –ò—Å–∫–ª—é—á–∞–µ–º test —Ñ–∞–π–ª—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            if (!/\.(test|spec)\.(ts|js)$/i.test(item)) {
              files.push(fullPath);
            }
          }
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${dir}`);
      }
    };

    await scanDir(projectPath);
    return files;
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
const demo = new AdvancedEAPDemo();
demo.runDemo().catch(console.error);
