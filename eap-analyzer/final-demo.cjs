#!/usr/bin/env node

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã - –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ dist-cjs
 */

const fs = require('fs');
const path = require('path');

async function runSimplifiedDemo() {
  console.log('üöÄ === –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø EAP ANALYZER v3.0 ===');
  console.log('üèóÔ∏è  –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —á–µ—Ä–µ–∑ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã');
  console.log('');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ dist-cjs
    const distPath = path.join(__dirname, 'dist-cjs');
    if (!fs.existsSync(distPath)) {
      console.log('‚ùå dist-cjs –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É...');

      // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –ø–æ–ª–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
      const projectPath = process.cwd();
      const simpleResults = await performSimpleAnalysis(projectPath);

      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:');
      console.log(`  üìÅ –§–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${simpleResults.totalFiles}`);
      console.log(`  üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${simpleResults.analyzedFiles}`);
      console.log(`  üìÑ –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: ${simpleResults.totalLines}`);
      console.log(`  üí∞ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥: ${simpleResults.debt} —á–∞—Å–æ–≤`);
      console.log(`  üéØ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: ${simpleResults.quality}/100`);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const reportsDir = path.join(process.cwd(), 'reports');
      if (!fs.existsSync(reportsDir)) {
        fs.mkdirSync(reportsDir, { recursive: true });
      }

      const reportPath = path.join(reportsDir, 'simplified-demo-report.json');
      fs.writeFileSync(
        reportPath,
        JSON.stringify(
          {
            timestamp: new Date().toISOString(),
            version: '3.0.0-simplified',
            results: simpleResults,
            status: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
          },
          null,
          2
        )
      );

      console.log(`üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
      console.log('');
      console.log('‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
      console.log('üí° –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å TypeScript –æ—à–∏–±–∫–∏.');

      return;
    }

    // –ï—Å–ª–∏ dist-cjs —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª–∏
    console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏...');

    try {
      // –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      const orchestratorPath = path.join(distPath, 'core', 'orchestrator.js');
      if (fs.existsSync(orchestratorPath)) {
        console.log('‚úÖ Orchestrator –Ω–∞–π–¥–µ–Ω');
      }

      const indexPath = path.join(distPath, 'index.js');
      if (fs.existsSync(indexPath)) {
        console.log('‚úÖ Index –Ω–∞–π–¥–µ–Ω');

        // –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
        const { createEAPAnalyzer } = require(indexPath);
        console.log('‚úÖ createEAPAnalyzer –∑–∞–≥—Ä—É–∂–µ–Ω');

        // –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        const analyzer = createEAPAnalyzer();
        console.log('‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω');

        // –¢–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        const projectPath = process.cwd();
        console.log(`üìÅ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞: ${projectPath}`);

        const results = await analyzer.runFullAnalysis(projectPath);
        console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:');
        if (results.checks) {
          console.log(`  üîç –ß–µ–∫–µ—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${Object.keys(results.checks).length}`);
        }
        if (results.modules) {
          console.log(`  üß© –ú–æ–¥—É–ª–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${Object.keys(results.modules).length}`);
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        const report = await analyzer.generateReport(results);
        console.log('‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        const reportsDir = path.join(process.cwd(), 'reports');
        if (!fs.existsSync(reportsDir)) {
          fs.mkdirSync(reportsDir, { recursive: true });
        }

        const reportPath = path.join(reportsDir, 'final-system-test.json');
        fs.writeFileSync(
          reportPath,
          JSON.stringify(
            {
              timestamp: new Date().toISOString(),
              version: '3.0.0',
              results,
              report,
              status: '–ü–æ–ª–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!',
            },
            null,
            2
          )
        );

        console.log(`üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç: ${reportPath}`);
        console.log('');
        console.log('üéâ === –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢! ===');
      } else {
        throw new Error('index.js –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ dist-cjs');
      }
    } catch (importError) {
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${importError.message}`);
      console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É...');

      const simpleResults = await performSimpleAnalysis(process.cwd());
      console.log('üìä –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω');
      console.log(`  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${JSON.stringify(simpleResults, null, 2)}`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error);

    // Fallback –∫ –±–∞–∑–æ–≤–æ–º—É –∞–Ω–∞–ª–∏–∑—É
    console.log('üîÑ Fallback –∫ –±–∞–∑–æ–≤–æ–º—É –∞–Ω–∞–ª–∏–∑—É...');
    const basicResults = {
      status: 'fallback',
      timestamp: new Date().toISOString(),
      message: '–°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏, –Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã',
    };

    const reportsDir = path.join(process.cwd(), 'reports');
    if (!fs.existsSync(reportsDir)) {
      fs.mkdirSync(reportsDir, { recursive: true });
    }

    fs.writeFileSync(
      path.join(reportsDir, 'demo-fallback.json'),
      JSON.stringify(basicResults, null, 2)
    );

    console.log('üìÑ Fallback –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
  }
}

async function performSimpleAnalysis(projectPath) {
  const extensions = ['.ts', '.js', '.tsx', '.jsx'];
  let totalFiles = 0;
  let analyzedFiles = 0;
  let totalLines = 0;
  let complexity = 0;

  const scanDir = async dir => {
    try {
      const items = await fs.promises.readdir(dir);
      for (const item of items) {
        if (item.startsWith('.') || item === 'node_modules' || item === 'dist') continue;

        const fullPath = path.join(dir, item);
        const stat = await fs.promises.stat(fullPath);

        if (stat.isDirectory()) {
          await scanDir(fullPath);
        } else if (extensions.some(ext => item.endsWith(ext))) {
          totalFiles++;
          try {
            const content = await fs.promises.readFile(fullPath, 'utf-8');
            const lines = content.split('\n').length;
            totalLines += lines;
            analyzedFiles++;

            // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            const complexityMarkers = (content.match(/if|for|while|switch|catch/g) || []).length;
            complexity += complexityMarkers;
          } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
          }
        }
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    }
  };

  await scanDir(projectPath);

  // –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
  const avgComplexity = analyzedFiles > 0 ? complexity / analyzedFiles : 0;
  const debt = Math.round(complexity * 0.5 + totalLines * 0.01); // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞
  const quality = Math.max(0, 100 - avgComplexity - (debt / totalLines) * 100);

  return {
    totalFiles,
    analyzedFiles,
    totalLines,
    complexity,
    avgComplexity: Math.round(avgComplexity * 10) / 10,
    debt,
    quality: Math.round(quality),
  };
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
runSimplifiedDemo().catch(console.error);
