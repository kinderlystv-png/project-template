/**
 * TestingAnalysisAdapter - –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ UnifiedTestingAnalyzer —Å –æ—Å–Ω–æ–≤–Ω—ã–º AnalysisOrchestrator
 *
 * Phase 4.1: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
 *
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å AI –º–æ–¥—É–ª—è–º–∏
 */

import * as path from 'path';
import { CheckContext, CheckResult, ComponentResult } from '../types/index.js';
import { ProcessIsolatedAnalyzer } from './ProcessIsolatedAnalyzer.js';
import { safeExecute, handleAnalysisError, ErrorType } from '../utils/error-handler.js';

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ AnalysisOrchestrator
 */
interface TestingAnalysisResult {
  component: string;
  score: number;
  maxScore: number;
  percentage: number;
  passed: Array<{ check: { name: string } }>;
  failed: Array<{ check: { name: string }; reason: string }>;

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
  testingMetrics: {
    unitTesting: {
      score: number;
      testsCount: number;
      frameworksReady: number;
    };
    e2eTesting: {
      score: number;
      testsCount: number;
      frameworksReady: number;
    };
    codeCoverage: {
      score: number;
      configured: boolean;
    };
    overallReadiness: 'production' | 'development' | 'basic' | 'inadequate';
  };

  recommendations: string[];
  executionTime: number;
}

/**
 * –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ UnifiedTestingAnalyzer –≤ –æ—Å–Ω–æ–≤–Ω–æ–π AnalysisOrchestrator EAP v4.0
 */
export class TestingAnalysisAdapter {
  private readonly componentName = 'Testing Infrastructure';
  private readonly maxScore = 100;
  private readonly isolatedAnalyzer: ProcessIsolatedAnalyzer;

  constructor() {
    this.isolatedAnalyzer = new ProcessIsolatedAnalyzer();
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
   */
  async checkComponent(context: CheckContext): Promise<ComponentResult> {
    const startTime = Date.now();

    try {
      console.log('üß™ –ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã...');

      // –ó–∞–ø—É—Å–∫–∞–µ–º UnifiedTestingAnalyzer –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
      const isolatedResult = await safeExecute(
        () => this.isolatedAnalyzer.runUnifiedAnalysis(context),
        ErrorType.INTEGRATION_ERROR,
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
      );

      if (!isolatedResult) {
        return this.createFallbackResult(context, startTime);
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
      const adaptedResult = this.adaptResultForOrchestrator(isolatedResult, startTime);

      console.log(
        `üß™ Testing Infrastructure: ${adaptedResult.percentage}% (${adaptedResult.score}/${adaptedResult.maxScore})`
      );

      return adaptedResult;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', error);

      handleAnalysisError(
        error,
        ErrorType.INTEGRATION_ERROR,
        'TestingAnalysisAdapter.checkComponent'
      );

      return this.createFallbackResult(context, startTime);
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç UnifiedTestingAnalyzer –≤ —Ñ–æ—Ä–º–∞—Ç ComponentResult
   */
  private adaptResultForOrchestrator(unifiedResult: any, startTime: number): ComponentResult {
    const executionTime = Date.now() - startTime;

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    const overallScore = unifiedResult.overallScore || 0;
    const percentage = Math.round(overallScore);

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤
    const passed: Array<{ check: { name: string } }> = [];
    const failed: Array<{ check: { name: string }; reason: string }> = [];

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞–º
    if (unifiedResult.frameworks) {
      unifiedResult.frameworks.forEach((framework: any) => {
        const checkName = `${framework.name} Framework`;

        if (framework.configured && framework.score >= 70) {
          passed.push({ check: { name: checkName } });
        } else {
          const reason = !framework.installed
            ? 'Framework not installed'
            : !framework.configured
              ? 'Framework not properly configured'
              : `Low score: ${framework.score}/100`;

          failed.push({ check: { name: checkName }, reason });
        }
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (unifiedResult.unitTesting?.score >= 70) {
      passed.push({ check: { name: 'Unit Testing Infrastructure' } });
    } else {
      failed.push({
        check: { name: 'Unit Testing Infrastructure' },
        reason: `Score: ${unifiedResult.unitTesting?.score || 0}/100`,
      });
    }

    if (unifiedResult.e2eTesting?.score >= 50) {
      passed.push({ check: { name: 'E2E Testing Infrastructure' } });
    } else {
      failed.push({
        check: { name: 'E2E Testing Infrastructure' },
        reason: `Score: ${unifiedResult.e2eTesting?.score || 0}/100`,
      });
    }

    if (unifiedResult.codeCoverage?.configured) {
      passed.push({ check: { name: 'Code Coverage Configuration' } });
    } else {
      failed.push({
        check: { name: 'Code Coverage Configuration' },
        reason: 'Code coverage not configured',
      });
    }

    // –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const result: ComponentResult = {
      component: this.componentName,
      score: Math.round(overallScore),
      maxScore: this.maxScore,
      percentage,
      passed,
      failed,

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      details: {
        testingMetrics: {
          unitTesting: {
            score: unifiedResult.unitTesting?.score || 0,
            testsCount: unifiedResult.unitTesting?.testsTotal || 0,
            frameworksReady: unifiedResult.unitTesting?.frameworksReady || 0,
          },
          e2eTesting: {
            score: unifiedResult.e2eTesting?.score || 0,
            testsCount: unifiedResult.e2eTesting?.testsTotal || 0,
            frameworksReady: unifiedResult.e2eTesting?.frameworksReady || 0,
          },
          codeCoverage: {
            score: unifiedResult.codeCoverage?.score || 0,
            configured: unifiedResult.codeCoverage?.configured || false,
          },
          overallReadiness: unifiedResult.readinessLevel || 'inadequate',
        },
        executionTime,
        frameworks: unifiedResult.frameworks || [],
        phase1Score: unifiedResult.phase1Score || 0,
        phase2Score: unifiedResult.phase2Score || 0,
      },
    };

    return result;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç fallback –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
   */
  private createFallbackResult(context: CheckContext, startTime: number): ComponentResult {
    const executionTime = Date.now() - startTime;

    return {
      component: this.componentName,
      score: 0,
      maxScore: this.maxScore,
      percentage: 0,
      passed: [],
      failed: [
        {
          check: { name: 'Testing Analysis' },
          reason: 'Failed to analyze testing infrastructure - fallback mode',
        },
      ],
      details: {
        testingMetrics: {
          unitTesting: { score: 0, testsCount: 0, frameworksReady: 0 },
          e2eTesting: { score: 0, testsCount: 0, frameworksReady: 0 },
          codeCoverage: { score: 0, configured: false },
          overallReadiness: 'inadequate' as const,
        },
        executionTime,
        error: true,
        fallbackMode: true,
      },
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
   */
  async isTestingAnalysisAvailable(): Promise<boolean> {
    try {
      return await this.isolatedAnalyzer.checkAvailability();
    } catch (error) {
      console.warn('‚ö†Ô∏è Testing analysis not available:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  getPerformanceStats(): {
    averageExecutionTime: number;
    successRate: number;
    lastExecutionTime: number;
  } {
    return this.isolatedAnalyzer.getPerformanceStats();
  }
}
