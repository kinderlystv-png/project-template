/**
 * ProcessIsolatedAnalyzer - JavaScript –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * Phase 4.1: –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ UnifiedTestingAnalyzer
 */

import * as child_process from 'child_process';
import * as path from 'path';
import * as fs from 'fs/promises';

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ UnifiedTestingAnalyzer
 */
export class ProcessIsolatedAnalyzer {
  constructor() {
    this.config = {
      timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥
      maxMemory: 200 * 1024 * 1024, // 200MB
      cwd: process.cwd(),
      env: {
        ...process.env,
        NODE_ENV: 'analysis',
        FORCE_COLOR: '0', // –æ—Ç–∫–ª—é—á–∞–µ–º —Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
      },
    };

    this.stats = {
      totalRuns: 0,
      successfulRuns: 0,
      averageExecutionTime: 0,
      lastExecutionTime: 0,
    };
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç UnifiedTestingAnalyzer –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
   */
  async runUnifiedAnalysis(context) {
    const startTime = Date.now();
    this.stats.totalRuns++;

    try {
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞
      const scriptPath = await this.createIsolatedScript(context);

      try {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        const result = await this.executeIsolatedProcess(scriptPath);

        this.stats.successfulRuns++;
        this.stats.lastExecutionTime = Date.now() - startTime;
        this.updateAverageExecutionTime();

        return result;
      } finally {
        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        await this.cleanupScript(scriptPath);
      }
    } catch (error) {
      this.stats.lastExecutionTime = Date.now() - startTime;
      this.updateAverageExecutionTime();

      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
   */
  async createIsolatedScript(context) {
    const scriptContent = `
/**
 * –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ UnifiedTestingAnalyzer
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ProcessIsolatedAnalyzer
 */

// –ò–º–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
async function runIsolatedAnalysis() {
  try {
    console.log('üîÑ –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω...');
    console.log('üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:', process.cwd());

    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç UnifiedTestingAnalyzer (–ø—É—Ç—å –∏–∑ –∫–æ—Ä–Ω—è eap-analyzer)
    console.log('üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º UnifiedTestingAnalyzer...');
    const module = await import('./src/checkers/testing/UnifiedTestingAnalyzerJS.js');
    console.log('üì¶ –ú–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:', Object.keys(module));

    const UnifiedTestingAnalyzer = module.UnifiedTestingAnalyzer;
    console.log('üì¶ UnifiedTestingAnalyzer –Ω–∞–π–¥–µ–Ω:', typeof UnifiedTestingAnalyzer);

    console.log('‚úÖ UnifiedTestingAnalyzer –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');

    const analyzer = new UnifiedTestingAnalyzer();
    const projectPath = '${context.projectPath.replace(/\\/g, '\\\\')}';

    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑:', projectPath);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    const result = await analyzer.analyze(projectPath);

    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ stdout –∫–∞–∫ JSON
    console.log(JSON.stringify({
      success: true,
      data: result,
      timestamp: Date.now()
    }));

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ:', error.message);
    console.error('üîç Stack trace:', error.stack);

    // –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –≤ stdout –∫–∞–∫ JSON –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    console.log(JSON.stringify({
      success: false,
      error: {
        message: error.message,
        stack: error.stack,
        name: error.name
      },
      timestamp: Date.now()
    }));

    process.exit(1);
  }
}// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
runIsolatedAnalysis();
`;

    const scriptPath = path.join(
      this.config.cwd,
      `isolated-analysis-${Date.now()}-${Math.random().toString(36).substring(7)}.mjs`
    );

    await fs.writeFile(scriptPath, scriptContent, 'utf8');
    return scriptPath;
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
   */
  async executeIsolatedProcess(scriptPath) {
    return new Promise((resolve, reject) => {
      const child = child_process.spawn('node', [scriptPath], {
        cwd: this.config.cwd,
        env: this.config.env,
        stdio: ['ignore', 'pipe', 'pipe'],
        timeout: this.config.timeout,
      });

      let stdout = '';
      let stderr = '';

      // –°–æ–±–∏—Ä–∞–µ–º –≤—ã–≤–æ–¥
      child.stdout?.on('data', data => {
        stdout += data.toString();
      });

      child.stderr?.on('data', data => {
        stderr += data.toString();
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
      child.on('close', (code, signal) => {
        if (signal === 'SIGTERM') {
          reject(new Error(`Analysis timed out after ${this.config.timeout}ms`));
          return;
        }

        if (code !== 0) {
          reject(new Error(`Analysis process exited with code ${code}. stderr: ${stderr}`));
          return;
        }

        try {
          // –ü–∞—Ä—Å–∏–º JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          const result = this.parseAnalysisResult(stdout);

          if (result.success) {
            resolve(result.data);
          } else {
            reject(new Error(`Analysis failed: ${result.error?.message || 'Unknown error'}`));
          }
        } catch (parseError) {
          const errorMessage =
            parseError instanceof Error ? parseError.message : String(parseError);
          reject(new Error(`Failed to parse analysis result: ${errorMessage}. stdout: ${stdout}`));
        }
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–ø—É—Å–∫–∞
      child.on('error', error => {
        reject(new Error(`Failed to start analysis process: ${error.message}`));
      });
    });
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ stdout
   */
  parseAnalysisResult(stdout) {
    // –ò—â–µ–º JSON –≤ –≤—ã–≤–æ–¥–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å–º–µ—à–∞–Ω —Å –ª–æ–≥–∞–º–∏)
    const lines = stdout.split('\n');

    for (const line of lines) {
      const trimmed = line.trim();
      if (trimmed.startsWith('{') && trimmed.endsWith('}')) {
        try {
          return JSON.parse(trimmed);
        } catch (error) {
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
        }
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É, –ø—Ä–æ–±—É–µ–º –≤–µ—Å—å –≤—ã–≤–æ–¥
    try {
      return JSON.parse(stdout.trim());
    } catch (error) {
      throw new Error(`No valid JSON found in output: ${stdout}`);
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
   */
  async cleanupScript(scriptPath) {
    try {
      await fs.unlink(scriptPath);
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—á–∏—Å—Ç–∫–∏
      console.warn(`‚ö†Ô∏è Failed to cleanup script ${scriptPath}:`, error);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  updateAverageExecutionTime() {
    if (this.stats.totalRuns > 0) {
      this.stats.averageExecutionTime =
        (this.stats.averageExecutionTime * (this.stats.totalRuns - 1) +
          this.stats.lastExecutionTime) /
        this.stats.totalRuns;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞
   */
  async checkAvailability() {
    try {
      // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      const testPath = path.join(this.config.cwd, `test-${Date.now()}.tmp`);
      await fs.writeFile(testPath, 'test', 'utf8');
      await fs.unlink(testPath);

      return true;
    } catch (error) {
      return false;
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  getPerformanceStats() {
    return { ...this.stats };
  }

  /**
   * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  resetStats() {
    this.stats.totalRuns = 0;
    this.stats.successfulRuns = 0;
    this.stats.averageExecutionTime = 0;
    this.stats.lastExecutionTime = 0;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
   */
  updateConfig(updates) {
    Object.assign(this.config, updates);
  }
}
