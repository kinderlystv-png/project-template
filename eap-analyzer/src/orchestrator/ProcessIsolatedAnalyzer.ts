/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ProcessIsolatedAnalyzer v2.0
 * –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–∑—Ä—ã–≤–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å 46% –¥–æ 90%+
 *
 * –ö–ª—é—á–µ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
 * - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ —Å –º–æ–¥—É–ª—è–º–∏ –∏ –ø—É—Ç—è–º–∏
 * - –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –≤—Å–µ—Ö –û–°
 * - –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 * - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Ä–∞–±–æ—Ç–∞ —Å –ø–∞–º—è—Ç—å—é
 * - –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ö–∞–Ω–∏–∑–º —Ä–µ–∑–∏–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏
 */

import * as child_process from 'child_process';
import * as path from 'path';
import * as fs from 'fs/promises';
import type { CheckContext } from '../types/index.js';

/**
 * –¢–∏–ø—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
 */
export interface AnalysisResult {
  success: boolean;
  data?: unknown;
  error?: {
    message: string;
    stack?: string;
    name: string;
  };
  timestamp: number;
  duration: number;
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
 */
export interface IsolatedProcessConfig {
  timeout: number;
  maxMemory: number;
  cwd: string;
  env: Record<string, string>;
  retryAttempts: number;
  retryDelay: number;
}

/**
 * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
export interface PerformanceStats {
  totalRuns: number;
  successfulRuns: number;
  failedRuns: number;
  averageExecutionTime: number;
  lastExecutionTime: number;
  successRate: number;
  memoryPeakUsage: number;
}

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤
 */
export class ProcessIsolatedAnalyzer {
  private readonly config: IsolatedProcessConfig;
  private readonly stats: PerformanceStats;
  private readonly tempFiles: Set<string>;

  constructor(config?: Partial<IsolatedProcessConfig>) {
    this.config = {
      timeout: 45000, // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 45 —Å–µ–∫—É–Ω–¥
      maxMemory: 256 * 1024 * 1024, // 256MB
      cwd: process.cwd(),
      retryAttempts: 3,
      retryDelay: 1000,
      env: {
        ...process.env,
        NODE_ENV: 'analysis',
        FORCE_COLOR: '0',
        NODE_OPTIONS: '--max-old-space-size=256',
      },
      ...config,
    };

    this.stats = {
      totalRuns: 0,
      successfulRuns: 0,
      failedRuns: 0,
      averageExecutionTime: 0,
      lastExecutionTime: 0,
      successRate: 0,
      memoryPeakUsage: 0,
    };

    this.tempFiles = new Set();

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
    process.on('exit', () => this.cleanup());
    process.on('SIGINT', () => this.cleanup());
    process.on('SIGTERM', () => this.cleanup());
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π retry
   */
  async runUnifiedAnalysis(context: CheckContext): Promise<AnalysisResult> {
    const startTime = Date.now();
    this.stats.totalRuns++;

    let lastError: Error | null = null;

    for (let attempt = 1; attempt <= this.config.retryAttempts; attempt++) {
      try {
        // eslint-disable-next-line no-console
        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${this.config.retryAttempts} –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...`);

        const result = await this.executeAnalysisWithTimeout(context);

        this.updateSuccessStats(startTime);
        return result;
      } catch (error) {
        lastError = error instanceof Error ? error : new Error(String(error));
        // eslint-disable-next-line no-console
        console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, lastError.message);

        if (attempt < this.config.retryAttempts) {
          // eslint-disable-next-line no-console
          console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${this.config.retryDelay}ms –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
          await this.delay(this.config.retryDelay);
        }
      }
    }

    this.updateFailureStats(startTime);
    throw lastError || new Error('–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ —É–¥–∞–ª–∏—Å—å');
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ —Å —Ç–∞–π–º-–∞—É—Ç–æ–º
   */
  private async executeAnalysisWithTimeout(context: CheckContext): Promise<AnalysisResult> {
    return Promise.race([this.executeIsolatedAnalysis(context), this.createTimeoutPromise()]);
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
   */
  private async executeIsolatedAnalysis(context: CheckContext): Promise<AnalysisResult> {
    const scriptPath = await this.createOptimizedScript(context);
    this.tempFiles.add(scriptPath);

    try {
      const result = await this.spawnAnalysisProcess(scriptPath);
      return result;
    } finally {
      await this.cleanupScript(scriptPath);
      this.tempFiles.delete(scriptPath);
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   */
  private async createOptimizedScript(context: CheckContext): Promise<string> {
    const scriptContent = `
/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª–∏–∑–∞ v2.0
 * –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω OptimizedProcessIsolatedAnalyzer
 */

import { fileURLToPath } from 'url';
import { dirname, resolve } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

async function runOptimizedAnalysis() {
  const startTime = Date.now();

  try {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å
    const basePath = resolve(__dirname);

    // –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
    let UnifiedTestingAnalyzer;

    const importPaths = [
      './src/checkers/testing/UnifiedTestingAnalyzerJS.js',
      './eap-analyzer/src/checkers/testing/UnifiedTestingAnalyzerJS.js',
      resolve(basePath, 'src/checkers/testing/UnifiedTestingAnalyzerJS.js'),
      resolve(basePath, 'eap-analyzer/src/checkers/testing/UnifiedTestingAnalyzerJS.js')
    ];

    for (const importPath of importPaths) {
      try {
        const module = await import(importPath);
        UnifiedTestingAnalyzer = module.UnifiedTestingAnalyzer || module.default;
        if (UnifiedTestingAnalyzer) {
          console.error('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∏–∑:', importPath);
          break;
        }
      } catch (error) {
        console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª—Å—è –∏–º–ø–æ—Ä—Ç –∏–∑:', importPath, error.message);
      }
    }

    if (!UnifiedTestingAnalyzer) {
      throw new Error('UnifiedTestingAnalyzer –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–æ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö –∏–º–ø–æ—Ä—Ç–∞');
    }

    // –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
    const analyzer = new UnifiedTestingAnalyzer();
    const projectPath = '${context.projectPath.replace(/\\/g, '\\\\')}';

    console.error('üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è:', projectPath);
    const result = await analyzer.analyze(projectPath);

    const duration = Date.now() - startTime;

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ stdout
    const output = {
      success: true,
      data: result,
      timestamp: Date.now(),
      duration,
      metadata: {
        projectPath,
        analyzerVersion: '2.0',
        memoryUsage: process.memoryUsage()
      }
    };

    console.log(JSON.stringify(output));

  } catch (error) {
    const duration = Date.now() - startTime;

    const output = {
      success: false,
      error: {
        message: error.message || 'Unknown error',
        name: error.name || 'Error',
        stack: error.stack
      },
      timestamp: Date.now(),
      duration,
      metadata: {
        nodeVersion: process.version,
        platform: process.platform,
        memoryUsage: process.memoryUsage()
      }
    };

    console.log(JSON.stringify(output));
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error) => {
  const output = {
    success: false,
    error: {
      message: 'Uncaught Exception: ' + error.message,
      name: 'UncaughtException',
      stack: error.stack
    },
    timestamp: Date.now(),
    duration: 0
  };

  console.log(JSON.stringify(output));
  process.exit(1);
});

runOptimizedAnalysis();
`;

    const scriptPath = path.join(
      this.config.cwd,
      `optimized-analysis-${Date.now()}-${Math.random().toString(36).substring(7)}.mjs`
    );

    await fs.writeFile(scriptPath, scriptContent, 'utf8');
    return scriptPath;
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞
   */
  private async spawnAnalysisProcess(scriptPath: string): Promise<AnalysisResult> {
    return new Promise((resolve, reject) => {
      const startTime = Date.now();
      let memoryPeak = 0;

      const child = child_process.spawn('node', [scriptPath], {
        cwd: this.config.cwd,
        env: this.config.env,
        stdio: ['ignore', 'pipe', 'pipe'],
        timeout: this.config.timeout,
      });

      let stdout = '';
      let stderr = '';

      // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      child.stdout?.on('data', data => {
        stdout += data.toString();
      });

      child.stderr?.on('data', data => {
        stderr += data.toString();
      });

      // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏
      const memoryMonitor = setInterval(() => {
        if (child.pid) {
          try {
            const memUsage = process.memoryUsage();
            memoryPeak = Math.max(memoryPeak, memUsage.rss);

            if (memUsage.rss > this.config.maxMemory) {
              clearInterval(memoryMonitor);
              child.kill('SIGTERM');
              reject(
                new Error(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏: ${memUsage.rss} > ${this.config.maxMemory}`)
              );
            }
          } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
          }
        }
      }, 1000);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      child.on('close', (_code, signal) => {
        clearInterval(memoryMonitor);
        this.stats.memoryPeakUsage = Math.max(this.stats.memoryPeakUsage, memoryPeak);

        if (signal === 'SIGTERM') {
          reject(new Error(`–ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ —Ç–∞–π–º-–∞—É—Ç—É –ø–æ—Å–ª–µ ${this.config.timeout}ms`));
          return;
        }

        try {
          const result = this.parseOptimizedResult(stdout, stderr);
          result.duration = Date.now() - startTime;

          if (result.success) {
            resolve(result);
          } else {
            reject(new Error(result.error?.message || '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π'));
          }
        } catch (parseError) {
          reject(
            new Error(
              `–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${parseError}. stdout: ${stdout.substring(0, 500)}`
            )
          );
        }
      });

      child.on('error', error => {
        clearInterval(memoryMonitor);
        reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: ${error.message}`));
      });
    });
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   */
  private parseOptimizedResult(stdout: string, stderr: string): AnalysisResult {
    // –ò—â–µ–º JSON –≤ stdout
    const lines = stdout.split('\n');

    for (const line of lines) {
      const trimmed = line.trim();
      if (trimmed.startsWith('{') && trimmed.endsWith('}')) {
        try {
          const parsed = JSON.parse(trimmed);
          if (typeof parsed.success === 'boolean') {
            return parsed;
          }
        } catch (error) {
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
        }
      }
    }

    // –ï—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ stderr
    return {
      success: false,
      error: {
        message: stderr || '–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω',
        name: 'ParseError',
      },
      timestamp: Date.now(),
      duration: 0,
    };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–∏—Å —Å —Ç–∞–π–º-–∞—É—Ç–æ–º
   */
  private createTimeoutPromise(): Promise<never> {
    return new Promise((_, reject) => {
      setTimeout(() => {
        reject(new Error(`–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º-–∞—É—Ç –∞–Ω–∞–ª–∏–∑–∞: ${this.config.timeout}ms`));
      }, this.config.timeout);
    });
  }

  /**
   * –ó–∞–¥–µ—Ä–∂–∫–∞
   */
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Å–ø–µ—Ö–∞
   */
  private updateSuccessStats(startTime: number): void {
    this.stats.successfulRuns++;
    this.stats.lastExecutionTime = Date.now() - startTime;
    this.updateDerivedStats();
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–µ—É–¥–∞—á
   */
  private updateFailureStats(startTime: number): void {
    this.stats.failedRuns++;
    this.stats.lastExecutionTime = Date.now() - startTime;
    this.updateDerivedStats();
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  private updateDerivedStats(): void {
    this.stats.averageExecutionTime =
      (this.stats.averageExecutionTime * (this.stats.totalRuns - 1) +
        this.stats.lastExecutionTime) /
      this.stats.totalRuns;

    this.stats.successRate =
      this.stats.totalRuns > 0 ? (this.stats.successfulRuns / this.stats.totalRuns) * 100 : 0;
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
   */
  private async cleanupScript(scriptPath: string): Promise<void> {
    try {
      await fs.unlink(scriptPath);
    } catch (error) {
      // eslint-disable-next-line no-console
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª ${scriptPath}:`, error);
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
   */
  private async cleanup(): Promise<void> {
    const cleanupPromises = Array.from(this.tempFiles).map(file => this.cleanupScript(file));
    await Promise.allSettled(cleanupPromises);
    this.tempFiles.clear();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
   */
  async checkAvailability(): Promise<boolean> {
    try {
      const testPath = path.join(this.config.cwd, `availability-test-${Date.now()}.tmp`);
      await fs.writeFile(testPath, 'test', 'utf8');
      await fs.unlink(testPath);
      return true;
    } catch (error) {
      return false;
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  getPerformanceStats(): PerformanceStats {
    return { ...this.stats };
  }

  /**
   * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  resetStats(): void {
    Object.assign(this.stats, {
      totalRuns: 0,
      successfulRuns: 0,
      failedRuns: 0,
      averageExecutionTime: 0,
      lastExecutionTime: 0,
      successRate: 0,
      memoryPeakUsage: 0,
    });
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
   */
  updateConfig(updates: Partial<IsolatedProcessConfig>): void {
    Object.assign(this.config, updates);
  }

  /**
   * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
   */
  getDiagnostics(): Record<string, unknown> {
    return {
      config: this.config,
      stats: this.stats,
      tempFiles: Array.from(this.tempFiles),
      systemInfo: {
        platform: process.platform,
        nodeVersion: process.version,
        memoryUsage: process.memoryUsage(),
        cwd: process.cwd(),
      },
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export default ProcessIsolatedAnalyzer;
