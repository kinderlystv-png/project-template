/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç XSS –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
 */

export {}; // –î–µ–ª–∞–µ–º —Ñ–∞–π–ª –º–æ–¥—É–ª–µ–º

console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç XSS –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...');

try {
  // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
  console.log('üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç XSSAnalyzer...');

  const { XSSAnalyzer } = await import('./checkers/security/analyzers/XSSAnalyzer.js');
  console.log('‚úÖ XSSAnalyzer –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');

  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
  const analyzer = new XSSAnalyzer();
  console.log('‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä XSSAnalyzer —Å–æ–∑–¥–∞–Ω');

  // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
  const context = {
    projectPath: process.cwd(),
    projectInfo: {
      name: 'test',
      version: '1.0.0',
      hasTypeScript: true,
      hasTests: false,
      hasDocker: false,
      hasCICD: false,
      dependencies: { production: 0, development: 0, total: 0 },
    },
    options: {
      projectPath: process.cwd(),
      includeOptional: true,
    },
  };

  console.log('üîç –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑...');
  const result = await analyzer.analyzeXSS(context);

  console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω:');
  console.log(`   –§–∞–π–ª–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${result.filesScanned}`);
  console.log(`   –£—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–∞–π–¥–µ–Ω–æ: ${result.summary.total}`);

  if (result.vulnerabilities.length > 0) {
    console.log('üîç –ü–µ—Ä–≤—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏:');
    result.vulnerabilities.slice(0, 3).forEach((v, i) => {
      console.log(`   ${i + 1}. ${v.file}:${v.line} - ${v.type} (${v.severity})`);
    });
  }

  console.log('üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error);
  process.exit(1);
}
