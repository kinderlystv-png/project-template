#!/usr/bin/env node

/**
 * CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≠—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ü—Ä–æ–µ–∫—Ç–æ–≤ (–≠–ê–ü)
 */

import { Command } from 'commander';
import * as path from 'path';
import { GoldenStandardAnalyzer } from './analyzer.js';

const program = new Command();

program
  .name('eap')
  .description('–≠—Ç–∞–ª–æ–Ω–Ω—ã–π –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ü—Ä–æ–µ–∫—Ç–æ–≤ (–≠–ê–ü) - –∞–Ω–∞–ª–∏–∑ –ø–æ –∑–æ–ª–æ—Ç–æ–º—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É SHINOMONTAGKA')
  .version('1.0.0');

program
  .command('analyze')
  .alias('a')
  .description('–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –ø–æ –∑–æ–ª–æ—Ç–æ–º—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É')
  .argument('[path]', '–ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)', '.')
  .option('-o, --output <file>', '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª')
  .option('-r, --report <file>', '–°–æ–∑–¥–∞—Ç—å HTML –æ—Ç—á–µ—Ç')
  .option('--silent', '–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º (—Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç)')
  .action(
    async (
      projectPath: string,
      options: { output?: string; report?: string; silent?: boolean }
    ) => {
      try {
        const resolvedPath = path.resolve(projectPath);

        if (!options.silent) {
          // eslint-disable-next-line no-console
          console.log('üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞...');
          // eslint-disable-next-line no-console
          console.log(`üìÇ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: ${resolvedPath}`);
          // eslint-disable-next-line no-console
          console.log('');
        }

        const analyzer = new GoldenStandardAnalyzer();
        const result = await analyzer.analyzeProject(resolvedPath);

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if (options.output) {
          await analyzer.saveResults(result, options.output);
        }

        if (options.report) {
          // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ HTML –æ—Ç—á–µ—Ç–∞
          // eslint-disable-next-line no-console
          console.log('üìÑ HTML –æ—Ç—á–µ—Ç –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏');
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if (result.summary.percentage >= 75) {
          process.exit(0); // –£—Å–ø–µ—Ö
        } else if (result.summary.percentage >= 50) {
          process.exit(1); // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        } else {
          process.exit(2); // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        }
      } catch (error) {
        // eslint-disable-next-line no-console
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error instanceof Error ? error.message : error);
        process.exit(3);
      }
    }
  );

program
  .command('check')
  .alias('c')
  .description('–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞')
  .argument('[path]', '–ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)', '.')
  .action(async (projectPath: string) => {
    try {
      const analyzer = new GoldenStandardAnalyzer();
      const result = await analyzer.analyzeProject(path.resolve(projectPath));

      // –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥
      // eslint-disable-next-line no-console
      console.log('\nüéØ –ö–†–ê–¢–ö–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
      // eslint-disable-next-line no-console
      console.log(`   –û—Ü–µ–Ω–∫–∞: ${result.summary.percentage}/100`);
      // eslint-disable-next-line no-console
      console.log(
        `   –ü—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ: ${result.summary.passedChecks}/${result.summary.totalChecks}`
      );
      // eslint-disable-next-line no-console
      console.log(`   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: ${result.summary.criticalIssues}`);

      if (result.summary.percentage >= 75) {
        // eslint-disable-next-line no-console
        console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!');
      } else {
        // eslint-disable-next-line no-console
        console.log('‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏.');
      }
    } catch (error) {
      // eslint-disable-next-line no-console
      console.error('‚ùå –û—à–∏–±–∫–∞:', error instanceof Error ? error.message : error);
      process.exit(1);
    }
  });

program
  .command('init')
  .description('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å –±–∞–∑–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∑–æ–ª–æ—Ç–æ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞')
  .argument('[path]', '–ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)', '.')
  .action(async (_projectPath: string) => {
    // eslint-disable-next-line no-console
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∑–æ–ª–æ—Ç–æ–º—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É...');
    // eslint-disable-next-line no-console
    console.log('üìù –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏');
    // eslint-disable-next-line no-console
    console.log('üí° –ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ SHINOMONTAGKA template –∫–∞–∫ –æ—Å–Ω–æ–≤—É');
  });

program
  .command('standard')
  .alias('s')
  .description('–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–æ–ª–æ—Ç–æ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ')
  .action(() => {
    // eslint-disable-next-line no-console
    console.log('üìö SHINOMONTAGKA Golden Standard');
    // eslint-disable-next-line no-console
    console.log('‚îÅ'.repeat(50));
    // eslint-disable-next-line no-console
    console.log('üî¨ –≠–ú–¢ (–≠—Ç–∞–ª–æ–Ω–Ω—ã–π –ú–æ–¥—É–ª—å –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):');
    // eslint-disable-next-line no-console
    console.log('   ‚Ä¢ Vitest –¥–ª—è unit/integration —Ç–µ—Å—Ç–æ–≤');
    // eslint-disable-next-line no-console
    console.log('   ‚Ä¢ Playwright –¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤');
    // eslint-disable-next-line no-console
    console.log('   ‚Ä¢ Coverage >= 75%');
    // eslint-disable-next-line no-console
    console.log('');
    // eslint-disable-next-line no-console
    console.log('üê≥ Docker Infrastructure:');
    // eslint-disable-next-line no-console
    console.log('   ‚Ä¢ Multi-stage Dockerfile');
    // eslint-disable-next-line no-console
    console.log('   ‚Ä¢ Docker Compose –¥–ª—è –≤—Å–µ—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π');
    // eslint-disable-next-line no-console
    console.log('   ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è');
    // eslint-disable-next-line no-console
    console.log('');
    // eslint-disable-next-line no-console
    console.log('üéØ –ò –µ—â–µ 5 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∑–æ–ª–æ—Ç–æ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞!');
  });

// –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º help
if (process.argv.length <= 2) {
  program.help();
}

program.parse();
