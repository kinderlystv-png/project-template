/**
 * –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ä–∞–±–æ—Ç–∞—é—Ç –ª–∏ –Ω–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ
 */

export {};
return {
  score: result.score || 0,
  checks: result.checkResults?.length || 0,
  hasWebSecurity,
};
onsole.log('üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ù–û–í–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í');
console.log('='.repeat(60));

async function testComponent(name: string, importPath: string, testFn: () => Promise<any>) {
  console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º ${name}...`);

  try {
    const result = await testFn();
    console.log(`‚úÖ ${name}: –†–ê–ë–û–¢–ê–ï–¢`);
    return { name, status: 'OK', result };
  } catch (error: any) {
    console.log(`‚ùå ${name}: –û–®–ò–ë–ö–ê - ${error?.message || 'Unknown error'}`);
    return { name, status: 'ERROR', error: error?.message || 'Unknown error' };
  }
}

async function runCriticalTests() {
  const results = [];

  // 1. XSSAnalyzer
  results.push(
    await testComponent('XSSAnalyzer', './checkers/security/analyzers/XSSAnalyzer.js', async () => {
      const { XSSAnalyzer } = await import('./checkers/security/analyzers/XSSAnalyzer.js');
      const analyzer = new XSSAnalyzer();

      const context = {
        projectPath: process.cwd(),
        projectInfo: {
          name: 'test',
          version: '1.0.0',
          hasTypeScript: true,
          hasTests: false,
          hasDocker: false,
          hasCICD: false,
          dependencies: { production: 0, development: 0, total: 0 },
        },
        options: { projectPath: process.cwd() },
      };

      const result = await analyzer.analyzeXSS(context);
      return { vulnerabilities: result.summary.total, files: result.filesScanned };
    })
  );

  // 2. CSRFAnalyzer
  results.push(
    await testComponent(
      'CSRFAnalyzer',
      './checkers/security/analyzers/CSRFAnalyzer.js',
      async () => {
        const { CSRFAnalyzer } = await import('./checkers/security/analyzers/CSRFAnalyzer.js');
        const analyzer = new CSRFAnalyzer();

        const context = {
          projectPath: process.cwd(),
          projectInfo: {
            name: 'test',
            version: '1.0.0',
            hasTypeScript: true,
            hasTests: false,
            hasDocker: false,
            hasCICD: false,
            dependencies: { production: 0, development: 0, total: 0 },
          },
          options: { projectPath: process.cwd() },
        };

        const result = await analyzer.analyzeCSRF(context);
        return { issues: result.summary.total, forms: result.formsFound };
      }
    )
  );

  // 3. WebSecurityChecker
  results.push(
    await testComponent(
      'WebSecurityChecker',
      './checkers/security/WebSecurityChecker.js',
      async () => {
        const { WebSecurityChecker } = await import('./checkers/security/WebSecurityChecker.js');
        const checker = new WebSecurityChecker();

        const context = {
          projectPath: process.cwd(),
          projectInfo: {
            name: 'test',
            version: '1.0.0',
            hasTypeScript: true,
            hasTests: false,
            hasDocker: false,
            hasCICD: false,
            dependencies: { production: 0, development: 0, total: 0 },
          },
          options: { projectPath: process.cwd() },
        };

        const result = await checker.analyzeWebSecurity(context);
        return {
          totalProblems: result.summary.totalVulnerabilities,
          xss: result.xss.summary.total,
          csrf: result.csrf.summary.total,
        };
      }
    )
  );

  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º SecurityChecker
  results.push(
    await testComponent(
      'SecurityChecker Integration',
      './checkers/security/SecurityChecker.js',
      async () => {
        const { SecurityChecker } = await import('./checkers/security/SecurityChecker.js');

        const context = {
          projectPath: process.cwd(),
          projectInfo: {
            name: 'test',
            version: '1.0.0',
            hasTypeScript: true,
            hasTests: false,
            hasDocker: false,
            hasCICD: false,
            dependencies: { production: 0, development: 0, total: 0 },
          },
          options: { projectPath: process.cwd() },
        };

        const result = await SecurityChecker.checkComponent(context);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–µ–±-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        const hasWebSecurity =
          JSON.stringify(result).toLowerCase().includes('xss') ||
          JSON.stringify(result).toLowerCase().includes('csrf');

        return {
          score: result.overallScore,
          checks: result.checkResults?.length || 0,
          hasWebSecurity,
        };
      }
    )
  );

  // 5. RecommendationEngine –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
  results.push(
    await testComponent(
      'RecommendationEngine',
      './recommendations/RecommendationEngine.js',
      async () => {
        const { RecommendationEngine } = await import('./recommendations/RecommendationEngine.js');
        const engine = new RecommendationEngine();

        // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        const testIssues = {
          dependencies: { vulnerabilities: [], outdatedPackages: [] },
          code: { issues: [{ type: 'xss', severity: 'high', file: 'test.js' }] },
          config: { issues: [] },
        };

        const recommendations = await engine.generateRecommendations(testIssues);
        return { recommendations: recommendations.length };
      }
    )
  );

  console.log('\n' + '='.repeat(60));
  console.log('üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
  console.log('='.repeat(60));

  const okCount = results.filter(r => r.status === 'OK').length;
  const errorCount = results.filter(r => r.status === 'ERROR').length;

  results.forEach(result => {
    const status = result.status === 'OK' ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${result.name}: ${result.status}`);

    if (result.status === 'OK' && result.result) {
      const data = JSON.stringify(result.result, null, 2).replace(/\n/g, '\n     ');
      console.log(`     ${data}`);
    } else if (result.status === 'ERROR') {
      console.log(`     –û—à–∏–±–∫–∞: ${result.error}`);
    }
  });

  console.log('\nüìà –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê:');
  console.log(`   ‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${okCount}/${results.length}`);
  console.log(`   ‚ùå –°–ª–æ–º–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${errorCount}/${results.length}`);
  console.log(`   üìä –ü—Ä–æ—Ü–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: ${Math.round((okCount / results.length) * 100)}%`);

  // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞
  const criticalIssues = [];

  const webSecurityResult = results.find(r => r.name === 'WebSecurityChecker');
  if (webSecurityResult?.status === 'OK') {
    console.log('   ‚úÖ WebSecurity: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ');
  } else {
    criticalIssues.push('WebSecurity –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç');
  }

  const integrationResult = results.find(r => r.name === 'SecurityChecker Integration');
  if (integrationResult?.status === 'OK' && integrationResult.result?.hasWebSecurity) {
    console.log('   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: WebSecurity –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ –≥–ª–∞–≤–Ω—ã–π SecurityChecker');
  } else {
    criticalIssues.push('WebSecurity –ù–ï –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ –≥–ª–∞–≤–Ω—ã–π SecurityChecker');
  }

  if (criticalIssues.length > 0) {
    console.log('\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:');
    criticalIssues.forEach(issue => console.log(`   ‚ùå ${issue}`));
  }

  return { okCount, errorCount, criticalIssues };
}

// –ó–∞–ø—É—Å–∫
runCriticalTests().then(result => {
  console.log('\n' + '='.repeat(60));
  if (result.criticalIssues.length === 0 && result.okCount === 5) {
    console.log('üéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –ò –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–´!');
  } else {
    console.log('‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê –ö–û–ú–ü–û–ù–ï–ù–¢–û–í');
  }
  console.log('='.repeat(60));
});
