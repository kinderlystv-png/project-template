/**
 * –ü—Ä–æ—Å—Ç–æ–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑ AI –º–æ–¥—É–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */

import { BaseChecker } from '../../core/checker.js';
import { CheckContext, CheckResult } from '../../core/types.js';

export class SimpleOrchestrator {
  private checkers: Map<string, BaseChecker> = new Map();

  constructor() {
    console.log('üöÄ –°–æ–∑–¥–∞–Ω SimpleOrchestrator –±–µ–∑ AI –º–æ–¥—É–ª–µ–π');
  }

  registerChecker(name: string, checker: BaseChecker): void {
    this.checkers.set(name, checker);
    console.log(`‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —á–µ–∫–µ—Ä: ${name}`);
  }

  async analyzeProject(projectPath: string): Promise<{ checks: Record<string, CheckResult> }> {
    console.log('üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞...');
    console.log(`üìä –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–µ–∫–µ—Ä–æ–≤: ${this.checkers.size}`);

    const context: CheckContext = {
      projectPath,
      config: {},
    };

    const checks: Record<string, CheckResult> = {};

    try {
      // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ–∫–µ—Ä–æ–≤ (–±–µ–∑ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
      for (const [name, checker] of this.checkers) {
        console.log(`üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ–∫–µ—Ä–∞: ${name}...`);

        try {
          const startTime = Date.now();
          const result = await checker.check(context);
          const endTime = Date.now();

          checks[name] = result;
          console.log(
            `‚úì –ß–µ–∫–µ—Ä ${name} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${endTime - startTime}ms (–æ—Ü–µ–Ω–∫–∞: ${result.score})`
          );
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —á–µ–∫–µ—Ä–µ ${name}:`, error);
          // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
          checks[name] = {
            checker: name,
            category: 'quality',
            passed: false,
            score: 0,
            message: `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${error instanceof Error ? error.message : String(error)}`,
            timestamp: new Date(),
            details: { error: error instanceof Error ? error.message : String(error) },
          };
        }
      }

      console.log(`üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–µ–∫–µ—Ä–æ–≤: ${Object.keys(checks).length}`);

      return { checks };
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
      throw error;
    }
  }

  getCheckerCount(): number {
    return this.checkers.size;
  }

  getCheckerNames(): string[] {
    return Array.from(this.checkers.keys());
  }

  getRegisteredCheckers(): string[] {
    return this.getCheckerNames();
  }
}
