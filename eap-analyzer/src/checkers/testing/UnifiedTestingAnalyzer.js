/**
 * UnifiedTestingAnalyzer - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å SimpleOrchestrator
 * Phase 3: Unified Testing Analyzer
 *
 * –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ SimpleOrchestrator
 */

import * as fs from 'fs/promises';
import * as path from 'path';

// –ò–º–ø–æ—Ä—Ç SimpleOrchestrator –∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤
import { SimpleOrchestrator } from '../SimpleOrchestrator.js';
import { VitestCheckerAdapter } from './checkers/VitestCheckerAdapter.js';
import { JestCheckerAdapter } from './checkers/JestCheckerAdapter.js';
import { CoverageAnalyzerAdapter } from './checkers/CoverageAnalyzerAdapter.js';
import { PlaywrightCheckerAdapter } from './checkers/PlaywrightCheckerAdapter.js';
import { CypressCheckerAdapter } from './checkers/CypressCheckerAdapter.js';

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
 */
interface FrameworkAnalysis {
  name: string;
  category: 'unit' | 'e2e' | 'coverage';
  installed: boolean;
  configured: boolean;
  testsCount: number;
  score: number;
  status: 'excellent' | 'good' | 'fair' | 'poor' | 'missing';
  recommendations: string[];
  executionTime: number;
}

/**
 * –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
 */
interface TestingEcosystemAnalysis {
  overallScore: number;
  overallStatus: 'excellent' | 'good' | 'fair' | 'poor' | 'critical';
  readinessLevel: 'production' | 'development' | 'basic' | 'inadequate';

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∞–∑–∞–º
  phase1Score: number; // Unit Testing + Coverage
  phase2Score: number; // E2E Testing

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  unitTesting: {
    score: number;
    frameworksReady: number;
    frameworksTotal: number;
    testsTotal: number;
  };

  e2eTesting: {
    score: number;
    frameworksReady: number;
    frameworksTotal: number;
    testsTotal: number;
  };

  codeCoverage: {
    score: number;
    configured: boolean;
  };

  // –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  frameworks: FrameworkAnalysis[];

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  criticalIssues: string[];
  improvements: string[];
  nextSteps: string[];
  totalExecutionTime: number;
}

/**
 * –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
 */
export class UnifiedTestingAnalyzer {
  private orchestrator: SimpleOrchestrator;

  constructor() {
    this.orchestrator = new SimpleOrchestrator();

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
    this.orchestrator.register(new VitestCheckerAdapter());
    this.orchestrator.register(new JestCheckerAdapter());
    this.orchestrator.register(new CoverageAnalyzerAdapter());
    this.orchestrator.register(new PlaywrightCheckerAdapter());
    this.orchestrator.register(new CypressCheckerAdapter());
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
   */
  async analyze(projectPath: string): Promise<TestingEcosystemAnalysis> {
    const startTime = Date.now();

    console.log('üîç –ù–∞—á–∏–Ω–∞—é –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã...');
    console.log(`üìÅ –ü—Ä–æ–µ–∫—Ç: ${projectPath}`);

    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ SimpleOrchestrator
      const results = await this.orchestrator.analyze({ projectPath });

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      const frameworkAnalyses = this.convertResults(results);

      // –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
      const ecosystemAnalysis = this.buildEcosystemAnalysis(frameworkAnalyses);

      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      ecosystemAnalysis.totalExecutionTime = Date.now() - startTime;

      console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${ecosystemAnalysis.totalExecutionTime}ms`);
      console.log(`üìä –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: ${ecosystemAnalysis.overallScore}/100 (${ecosystemAnalysis.overallStatus})`);

      return ecosystemAnalysis;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ—Å—Ç–æ–≤–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã SimpleOrchestrator –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
   */
  private convertResults(results: any): FrameworkAnalysis[] {
    const analyses: FrameworkAnalysis[] = [];

    results.forEach((result: any) => {
      const analysis: FrameworkAnalysis = {
        name: result.checker || 'unknown',
        category: this.getCategoryByName(result.checker),
        installed: result.score > 10,
        configured: result.score > 50,
        testsCount: this.extractTestsCount(result.details),
        score: result.score || 0,
        status: this.getFrameworkStatus(result.score || 0),
        recommendations: result.recommendations || [],
        executionTime: result.executionTime || 0
      };

      analyses.push(analysis);
    });

    return analyses;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∏–º–µ–Ω–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
   */
  private getCategoryByName(name: string): 'unit' | 'e2e' | 'coverage' {
    if (name.includes('vitest') || name.includes('jest')) {
      return 'unit';
    }
    if (name.includes('playwright') || name.includes('cypress')) {
      return 'e2e';
    }
    if (name.includes('coverage')) {
      return 'coverage';
    }
    return 'unit'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   */
  private extractTestsCount(details: any): number {
    if (!details) return 0;

    // –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–µ—Å—Ç–æ–≤
    if (details.testsFound !== undefined) return details.testsFound;
    if (details.testFiles !== undefined) return details.testFiles;
    if (details.testCount !== undefined) return details.testCount;
    if (details.e2eTests !== undefined) return details.e2eTests;
    if (details.unitTests !== undefined) return details.unitTests;

    return 0;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ –ø–æ —Å—á–µ—Ç—É
   */
  private getFrameworkStatus(score: number): 'excellent' | 'good' | 'fair' | 'poor' | 'missing' {
    if (score >= 85) return 'excellent';
    if (score >= 70) return 'good';
    if (score >= 50) return 'fair';
    if (score >= 20) return 'poor';
    return 'missing';
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
   */
  private buildEcosystemAnalysis(frameworks: FrameworkAnalysis[]): TestingEcosystemAnalysis {
    // –†–∞–∑–¥–µ–ª—è–µ–º —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const unitFrameworks = frameworks.filter(f => f.category === 'unit');
    const e2eFrameworks = frameworks.filter(f => f.category === 'e2e');
    const coverageFrameworks = frameworks.filter(f => f.category === 'coverage');

    // –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Unit Testing
    const unitTesting = {
      score: this.calculateCategoryScore(unitFrameworks),
      frameworksReady: unitFrameworks.filter(f => f.configured).length,
      frameworksTotal: unitFrameworks.length,
      testsTotal: unitFrameworks.reduce((sum, f) => sum + f.testsCount, 0)
    };

    // –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ E2E Testing
    const e2eTesting = {
      score: this.calculateCategoryScore(e2eFrameworks),
      frameworksReady: e2eFrameworks.filter(f => f.configured).length,
      frameworksTotal: e2eFrameworks.length,
      testsTotal: e2eFrameworks.reduce((sum, f) => sum + f.testsCount, 0)
    };

    // –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Code Coverage
    const codeCoverage = {
      score: this.calculateCategoryScore(coverageFrameworks),
      configured: coverageFrameworks.some(f => f.configured)
    };

    // –†–∞—Å—á–µ—Ç —Ñ–∞–∑–æ–≤—ã—Ö —Å—á–µ—Ç–æ–≤
    const phase1Score = Math.round((unitTesting.score + codeCoverage.score) / 2);
    const phase2Score = e2eTesting.score;

    // –û–±—â–∏–π —Å—á–µ—Ç (–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π)
    const overallScore = Math.round(
      (unitTesting.score * 0.4) +   // Unit —Ç–µ—Å—Ç—ã - 40%
      (e2eTesting.score * 0.35) +   // E2E —Ç–µ—Å—Ç—ã - 35%
      (codeCoverage.score * 0.25)   // Coverage - 25%
    );

    return {
      overallScore,
      overallStatus: this.getOverallStatus(overallScore),
      readinessLevel: this.getReadinessLevel(overallScore, unitTesting, e2eTesting),
      phase1Score,
      phase2Score,
      unitTesting,
      e2eTesting,
      codeCoverage,
      frameworks,
      criticalIssues: this.identifyCriticalIssues(frameworks),
      improvements: this.identifyImprovements(frameworks),
      nextSteps: this.identifyNextSteps(overallScore, unitTesting, e2eTesting),
      totalExecutionTime: 0 // –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
    };
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —Å—á–µ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤
   */
  private calculateCategoryScore(frameworks: FrameworkAnalysis[]): number {
    if (frameworks.length === 0) return 0;

    const totalScore = frameworks.reduce((sum, f) => sum + f.score, 0);
    return Math.round(totalScore / frameworks.length);
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
   */
  private getOverallStatus(score: number): 'excellent' | 'good' | 'fair' | 'poor' | 'critical' {
    if (score >= 85) return 'excellent';
    if (score >= 70) return 'good';
    if (score >= 50) return 'fair';
    if (score >= 30) return 'poor';
    return 'critical';
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
   */
  private getReadinessLevel(
    overallScore: number,
    unitTesting: any,
    e2eTesting: any
  ): 'production' | 'development' | 'basic' | 'inadequate' {
    if (overallScore >= 80 && unitTesting.testsTotal >= 10 && e2eTesting.testsTotal >= 3) {
      return 'production';
    }
    if (overallScore >= 60 && unitTesting.testsTotal >= 5) {
      return 'development';
    }
    if (overallScore >= 40) {
      return 'basic';
    }
    return 'inadequate';
  }

  /**
   * –í—ã—è–≤–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
   */
  private identifyCriticalIssues(frameworks: FrameworkAnalysis[]): string[] {
    const issues: string[] = [];

    const unitFrameworks = frameworks.filter(f => f.category === 'unit');
    const e2eFrameworks = frameworks.filter(f => f.category === 'e2e');
    const coverageFrameworks = frameworks.filter(f => f.category === 'coverage');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    if (unitFrameworks.every(f => !f.configured)) {
      issues.push('‚ùå –ù–∏ –æ–¥–∏–Ω Unit Testing —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    if (e2eFrameworks.every(f => !f.configured)) {
      issues.push('‚ùå –ù–∏ –æ–¥–∏–Ω E2E Testing —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    if (coverageFrameworks.every(f => !f.configured)) {
      issues.push('‚ùå Code Coverage –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    const totalTests = frameworks.reduce((sum, f) => sum + f.testsCount, 0);
    if (totalTests === 0) {
      issues.push('‚ùå –í –ø—Ä–æ–µ–∫—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–µ—Å—Ç—ã');
    }

    return issues;
  }

  /**
   * –í—ã—è–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
   */
  private identifyImprovements(frameworks: FrameworkAnalysis[]): string[] {
    const improvements: string[] = [];

    frameworks.forEach(framework => {
      if (framework.status === 'poor' && framework.installed) {
        improvements.push(`‚ö†Ô∏è ${framework.name}: —É–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (${framework.score}/100)`);
      }

      if (framework.status === 'fair' && framework.testsCount < 5) {
        improvements.push(`üìù ${framework.name}: –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ç–µ—Å—Ç–æ–≤ (—Å–µ–π—á–∞—Å ${framework.testsCount})`);
      }
    });

    return improvements;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
   */
  private identifyNextSteps(overallScore: number, unitTesting: any, e2eTesting: any): string[] {
    const steps: string[] = [];

    if (overallScore < 50) {
      steps.push('üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑–æ–≤—É—é —Ç–µ—Å—Ç–æ–≤—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É');
    }

    if (unitTesting.testsTotal < 10) {
      steps.push('üìù –°–æ–∑–¥–∞—Ç—å –±–æ–ª—å—à–µ Unit —Ç–µ—Å—Ç–æ–≤');
    }

    if (e2eTesting.frameworksReady === 0) {
      steps.push('üé≠ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å E2E —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
    }

    if (overallScore >= 70) {
      steps.push('üöÄ –ì–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å AnalysisOrchestrator');
    }

    return steps;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
   */
  generateReport(analysis: TestingEcosystemAnalysis): string {
    const lines: string[] = [];

    lines.push('='.repeat(80));
    lines.push('üìä UNIFIED TESTING ANALYZER - –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –û–¢–ß–ï–¢');
    lines.push('='.repeat(80));
    lines.push('');

    // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    lines.push(`üéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê: ${analysis.overallScore}/100 (${analysis.overallStatus.toUpperCase()})`);
    lines.push(`üöÄ –ì–û–¢–û–í–ù–û–°–¢–¨: ${analysis.readinessLevel.toUpperCase()}`);
    lines.push(`‚è±Ô∏è  –í–†–ï–ú–Ø –ê–ù–ê–õ–ò–ó–ê: ${analysis.totalExecutionTime}ms`);
    lines.push('');

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∞–∑–∞–º
    lines.push('üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –§–ê–ó–ê–ú:');
    lines.push(`   Phase 1 (Unit + Coverage): ${analysis.phase1Score}/100`);
    lines.push(`   Phase 2 (E2E Testing):     ${analysis.phase2Score}/100`);
    lines.push('');

    // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    lines.push('üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    lines.push(`   Unit Testing:  ${analysis.unitTesting.score}/100 (${analysis.unitTesting.frameworksReady}/${analysis.unitTesting.frameworksTotal} –≥–æ—Ç–æ–≤—ã, ${analysis.unitTesting.testsTotal} —Ç–µ—Å—Ç–æ–≤)`);
    lines.push(`   E2E Testing:   ${analysis.e2eTesting.score}/100 (${analysis.e2eTesting.frameworksReady}/${analysis.e2eTesting.frameworksTotal} –≥–æ—Ç–æ–≤—ã, ${analysis.e2eTesting.testsTotal} —Ç–µ—Å—Ç–æ–≤)`);
    lines.push(`   Code Coverage: ${analysis.codeCoverage.score}/100 (${analysis.codeCoverage.configured ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'})`);
    lines.push('');

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞–º
    lines.push('üõ†Ô∏è  –ê–ù–ê–õ–ò–ó –§–†–ï–ô–ú–í–û–†–ö–û–í:');
    analysis.frameworks.forEach(framework => {
      const statusIcon = this.getStatusIcon(framework.status);
      lines.push(`   ${statusIcon} ${framework.name}: ${framework.score}/100 (${framework.status}, ${framework.testsCount} —Ç–µ—Å—Ç–æ–≤, ${framework.executionTime}ms)`);
    });
    lines.push('');

    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    if (analysis.criticalIssues.length > 0) {
      lines.push('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:');
      analysis.criticalIssues.forEach(issue => lines.push(`   ${issue}`));
      lines.push('');
    }

    // –£–ª—É—á—à–µ–Ω–∏—è
    if (analysis.improvements.length > 0) {
      lines.push('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:');
      analysis.improvements.forEach(improvement => lines.push(`   ${improvement}`));
      lines.push('');
    }

    // –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
    if (analysis.nextSteps.length > 0) {
      lines.push('üë£ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
      analysis.nextSteps.forEach(step => lines.push(`   ${step}`));
      lines.push('');
    }

    lines.push('='.repeat(80));

    return lines.join('\n');
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
   */
  private getStatusIcon(status: string): string {
    switch (status) {
      case 'excellent': return 'üü¢';
      case 'good': return 'üîµ';
      case 'fair': return 'üü°';
      case 'poor': return 'üü†';
      case 'missing': return 'üî¥';
      default: return '‚ö™';
    }
  }
}
