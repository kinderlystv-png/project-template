/**
 * –¢–µ—Å—Ç CoverageAnalyzerAdapter - –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞
 */

import { CoverageAnalyzerAdapter } from './checkers/CoverageAnalyzerAdapter.js';
import { SimpleOrchestrator } from './SimpleOrchestrator.js';

interface TestResult {
  name: string;
  passed: boolean;
  score: number;
  message: string;
  details?: any;
  recommendations?: string[];
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç CoverageAnalyzerAdapter –Ω–∞–ø—Ä—è–º—É—é –∏ —á–µ—Ä–µ–∑ SimpleOrchestrator
 */
async function testCoverageAnalyzer() {
  console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CoverageAnalyzerAdapter...\n');

  const projectPath = 'C:/alphacore/project-template';
  const analyzer = new CoverageAnalyzerAdapter();

  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const context = {
    projectPath,
    additionalData: {},
  };

  let directResult: TestResult;
  let orchestratorResult: TestResult;

  // –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
  console.log('üß™ –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ CoverageAnalyzerAdapter');
  try {
    const result = await analyzer.check(context);
    directResult = {
      name: 'CoverageAnalyzer Direct',
      passed: result.passed,
      score: result.score,
      message: result.message,
      details: result.details,
      recommendations: result.recommendations,
    };

    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.passed ? '–£–°–ü–ï–•' : '–ù–ï–£–î–ê–ß–ê'}`);
    console.log(`üìä –û—Ü–µ–Ω–∫–∞: ${result.score}/100`);
    console.log(`üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${result.message}`);

    if (result.details) {
      console.log('üìã –î–µ—Ç–∞–ª–∏:');
      console.log(`   ‚Ä¢ –û—Ç—á–µ—Ç –Ω–∞–π–¥–µ–Ω: ${result.details.hasReport ? '–¥–∞' : '–Ω–µ—Ç'}`);
      if (result.details.hasReport) {
        console.log(`   ‚Ä¢ –¢–∏–ø –æ—Ç—á–µ—Ç–∞: ${result.details.reportType}`);
        console.log(`   ‚Ä¢ –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: ${result.details.overall}%`);
        console.log(`   ‚Ä¢ –ü–æ–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–æ–∫: ${result.details.lines}%`);
        console.log(`   ‚Ä¢ –ü–æ–∫—Ä—ã—Ç–∏–µ –≤–µ—Ç–æ–∫: ${result.details.branches}%`);
        console.log(`   ‚Ä¢ –ü–æ–∫—Ä—ã—Ç–∏–µ —Ñ—É–Ω–∫—Ü–∏–π: ${result.details.functions}%`);
        console.log(`   ‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${result.details.configPresent ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`);
      } else {
        console.log(`   ‚Ä¢ –ò—Å–∫–∞–ª–∏ –≤: ${result.details.searchedPaths?.join(', ')}`);
        console.log(`   ‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: ${result.details.reason}`);
      }
    }

    if (result.recommendations && result.recommendations.length > 0) {
      console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      result.recommendations.forEach((rec: string) => console.log(`   ‚Ä¢ ${rec}`));
    }
  } catch (error) {
    directResult = {
      name: 'CoverageAnalyzer Direct',
      passed: false,
      score: 0,
      message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`,
    };
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ: ${directResult.message}`);
  }

  console.log('\n' + '‚îÄ'.repeat(60) + '\n');

  // –¢–µ—Å—Ç 2: –í—ã–∑–æ–≤ —á–µ—Ä–µ–∑ SimpleOrchestrator
  console.log('üß™ –¢–µ—Å—Ç 2: –í—ã–∑–æ–≤ —á–µ—Ä–µ–∑ SimpleOrchestrator');
  try {
    const orchestrator = new SimpleOrchestrator();

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ CoverageAnalyzerAdapter
    orchestrator.registerChecker('coverage-analyzer', analyzer);

    console.log('üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–µ–∫–µ—Ä—ã:', orchestrator.getRegisteredCheckers());

    const result = await orchestrator.analyzeProject(projectPath);

    if (Object.keys(result.checks).length === 0) {
      orchestratorResult = {
        name: 'CoverageAnalyzer Orchestrator',
        passed: false,
        score: 0,
        message: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
      };
    } else {
      const checkResult = result.checks['coverage-analyzer']; // –ë–µ—Ä–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç coverage-analyzer
      orchestratorResult = {
        name: 'CoverageAnalyzer Orchestrator',
        passed: checkResult.passed,
        score: checkResult.score,
        message: checkResult.message,
        details: checkResult.details,
        recommendations: checkResult.recommendations,
      };
    }
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${orchestratorResult.passed ? '–£–°–ü–ï–•' : '–ù–ï–£–î–ê–ß–ê'}`);
    console.log(`üìä –û—Ü–µ–Ω–∫–∞: ${orchestratorResult.score}/100`);
    console.log(`üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${orchestratorResult.message}`);

    if (orchestratorResult.details) {
      console.log('üìã –î–µ—Ç–∞–ª–∏ —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä:');
      console.log(`   ‚Ä¢ –û—Ç—á–µ—Ç –Ω–∞–π–¥–µ–Ω: ${orchestratorResult.details.hasReport ? '–¥–∞' : '–Ω–µ—Ç'}`);
      if (orchestratorResult.details.hasReport) {
        console.log(`   ‚Ä¢ –¢–∏–ø –æ—Ç—á–µ—Ç–∞: ${orchestratorResult.details.reportType}`);
        console.log(`   ‚Ä¢ –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: ${orchestratorResult.details.overall}%`);
      }
    }
  } catch (error) {
    orchestratorResult = {
      name: 'CoverageAnalyzer Orchestrator',
      passed: false,
      score: 0,
      message: `–û—à–∏–±–∫–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${error instanceof Error ? error.message : String(error)}`,
    };
    console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–µ: ${orchestratorResult.message}`);
  }

  console.log('\n' + '='.repeat(60) + '\n');

  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log('üìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
  console.log('‚îÄ'.repeat(60));
  console.log(`–ú–µ—Ç–æ–¥                  | –£—Å–ø–µ—Ö | –û—Ü–µ–Ω–∫–∞ | –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ`);
  console.log('‚îÄ'.repeat(60));
  console.log(
    `–ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤          | ${directResult.passed ? '‚úÖ' : '‚ùå'}    | ${directResult.score.toString().padStart(3)}    | -`
  );
  console.log(
    `–ß–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä     | ${orchestratorResult.passed ? '‚úÖ' : '‚ùå'}    | ${orchestratorResult.score.toString().padStart(3)}    | ${directResult.score === orchestratorResult.score ? '‚úÖ' : '‚ùå'}`
  );
  console.log('‚îÄ'.repeat(60));

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
  const scoresMatch = directResult.score === orchestratorResult.score;
  const statusMatch = directResult.passed === orchestratorResult.passed;

  if (scoresMatch && statusMatch) {
    console.log('üéâ –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
  } else {
    console.log('‚ö†Ô∏è  –†–ï–ó–£–õ–¨–¢–ê–¢: –ï—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö');
    if (!scoresMatch) {
      console.log(`   ‚Ä¢ –û—Ü–µ–Ω–∫–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç: ${directResult.score} vs ${orchestratorResult.score}`);
    }
    if (!statusMatch) {
      console.log(
        `   ‚Ä¢ –°—Ç–∞—Ç—É—Å—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç: ${directResult.passed} vs ${orchestratorResult.passed}`
      );
    }
  }

  console.log('\nüîç –ê–ù–ê–õ–ò–ó –ü–û–ö–†–´–¢–ò–Ø:');
  if (directResult.details?.hasReport) {
    console.log('‚úÖ –û—Ç—á–µ—Ç—ã –ø–æ–∫—Ä—ã—Ç–∏—è –Ω–∞–π–¥–µ–Ω—ã –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    console.log(
      `üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–∫—Ä—ã—Ç–∏—è: –æ–±—â–µ–µ ${directResult.details.overall}%, —Å—Ç—Ä–æ–∫–∏ ${directResult.details.lines}%, –≤–µ—Ç–∫–∏ ${directResult.details.branches}%`
    );
  } else {
    console.log('‚ö†Ô∏è  –û—Ç—á–µ—Ç—ã –ø–æ–∫—Ä—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    console.log('üí° –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: npm run test:coverage');
  }

  return {
    directResult,
    orchestratorResult,
    scoresMatch,
    statusMatch,
    success: scoresMatch && statusMatch,
  };
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (import.meta.url === `file://${process.argv[1].replace(/\\/g, '/')}`) {
  testCoverageAnalyzer()
    .then(results => {
      console.log(`\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${results.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
      process.exit(results.success ? 0 : 1);
    })
    .catch(error => {
      console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      process.exit(1);
    });
}

export { testCoverageAnalyzer };
