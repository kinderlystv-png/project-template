/**
 * UnifiedTestingAnalyzer - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ Unit Testing (Phase 1) –∏ E2E Testing (Phase 2) –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
 *
 * Phase 3: Unified Testing Analyzer
 *
 * –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É:
 * - VitestCheckerAdapter (Unit Testing)
 * - JestCheckerAdapter (Unit Testing)
 * - CoverageAnalyzerAdapter (Code Coverage)
 * - PlaywrightCheckerAdapter (E2E Testing)
 * - CypressCheckerAdapter (E2E Testing)
 */

import * as fs from 'fs/promises';
import * as path from 'path';
import { BaseChecker } from '../../../core/checker.js';
import { CheckContext, CheckResult } from '../../../core/types.js';

// –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤
import { VitestCheckerAdapter } from './checkers/VitestCheckerAdapter.js';
import { JestCheckerAdapter } from './checkers/JestCheckerAdapter.js';
import { CoverageAnalyzerAdapter } from './checkers/CoverageAnalyzerAdapter.js';
import { PlaywrightCheckerAdapter } from './checkers/PlaywrightCheckerAdapter.js';
import { CypressCheckerAdapter } from './checkers/CypressCheckerAdapter.js';

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
 */
interface FrameworkAnalysis {
  name: string;
  category: 'unit' | 'e2e' | 'coverage';
  installed: boolean;
  configured: boolean;
  testsCount: number;
  score: number;
  status: 'excellent' | 'good' | 'fair' | 'poor' | 'missing';
  recommendations: string[];
  details: any;
}

/**
 * –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
 */
interface TestingEcosystemAnalysis {
  overallScore: number;
  overallStatus: 'excellent' | 'good' | 'fair' | 'poor' | 'critical';
  readinessLevel: 'production' | 'development' | 'basic' | 'inadequate';

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  unitTesting: {
    score: number;
    frameworksReady: number;
    frameworksTotal: number;
    testsTotal: number;
  };

  e2eTesting: {
    score: number;
    frameworksReady: number;
    frameworksTotal: number;
    testsTotal: number;
  };

  codeCoverage: {
    score: number;
    configured: boolean;
    coverageReports: boolean;
  };

  // –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  frameworks: FrameworkAnalysis[];

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  criticalIssues: string[];
  improvements: string[];
  nextSteps: string[];
}

/**
 * –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–µ–∫—Ç–∞
 */
export class UnifiedTestingAnalyzer extends BaseChecker {
  readonly name = 'unified-testing-analyzer';
  readonly category = 'quality' as const;
  readonly description =
    '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ç–µ—Å—Ç–æ–≤–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–µ–∫—Ç–∞ (Unit + E2E + Coverage)';

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤
  private vitestAnalyzer = new VitestCheckerAdapter();
  private jestAnalyzer = new JestCheckerAdapter();
  private coverageAnalyzer = new CoverageAnalyzerAdapter();
  private playwrightAnalyzer = new PlaywrightCheckerAdapter();
  private cypressAnalyzer = new CypressCheckerAdapter();

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
   */
  async check(context: CheckContext): Promise<CheckResult> {
    const projectPath = context.projectPath;

    try {
      console.log('üîç –ù–∞—á–∏–Ω–∞—é –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã...');

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const analysisPromises = [
        this.analyzeFramework(this.vitestAnalyzer, 'unit', context),
        this.analyzeFramework(this.jestAnalyzer, 'unit', context),
        this.analyzeFramework(this.coverageAnalyzer, 'coverage', context),
        this.analyzeFramework(this.playwrightAnalyzer, 'e2e', context),
        this.analyzeFramework(this.cypressAnalyzer, 'e2e', context),
      ];

      const frameworkResults = await Promise.all(analysisPromises);

      // –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
      const ecosystemAnalysis = this.buildEcosystemAnalysis(frameworkResults);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      const recommendations = this.generateRecommendations(ecosystemAnalysis);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
      const isSuccess = ecosystemAnalysis.overallScore >= 60;
      const severity = this.getIssueSeverity(ecosystemAnalysis.overallScore);

      console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: ${ecosystemAnalysis.overallScore}/100`);

      return this.createResult(
        isSuccess,
        ecosystemAnalysis.overallScore,
        this.generateSummaryMessage(ecosystemAnalysis),
        {
          ecosystem: ecosystemAnalysis,
          frameworks: frameworkResults,
          recommendations,
          phase1Score:
            this.calculatePhaseScore(frameworkResults, 'unit') +
            this.calculatePhaseScore(frameworkResults, 'coverage'),
          phase2Score: this.calculatePhaseScore(frameworkResults, 'e2e'),
          readinessLevel: ecosystemAnalysis.readinessLevel,
        },
        recommendations,
        severity
      );
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ—Å—Ç–æ–≤–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã:', error);

      return this.createResult(
        false,
        0,
        '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ—Å—Ç–æ–≤–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã',
        { error: error instanceof Error ? error.message : String(error) },
        ['–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞'],
        'error'
      );
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫
   */
  private async analyzeFramework(
    analyzer: BaseChecker,
    category: 'unit' | 'e2e' | 'coverage',
    context: CheckContext
  ): Promise<FrameworkAnalysis> {
    try {
      console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é ${analyzer.name}...`);

      const result = await analyzer.check(context);

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      const details = result.details || {};
      const testsCount = this.extractTestsCount(details, analyzer.name);
      const status = this.getFrameworkStatus(result.score);
      const installed = result.score > 10; // –ï—Å–ª–∏ –±–æ–ª—å—à–µ 10, –∑–Ω–∞—á–∏—Ç —Ö–æ—Ç—è –±—ã —á—Ç–æ-—Ç–æ –Ω–∞–π–¥–µ–Ω–æ
      const configured = result.score > 50; // –ï—Å–ª–∏ –±–æ–ª—å—à–µ 50, –∑–Ω–∞—á–∏—Ç –ø—Ä–∏–ª–∏—á–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω

      return {
        name: analyzer.name,
        category,
        installed,
        configured,
        testsCount,
        score: result.score,
        status,
        recommendations: result.recommendations || [],
        details,
      };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ${analyzer.name}:`, error);

      return {
        name: analyzer.name,
        category,
        installed: false,
        configured: false,
        testsCount: 0,
        score: 0,
        status: 'missing',
        recommendations: [
          `–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error instanceof Error ? error.message : String(error)}`,
        ],
        details: { error: true },
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
   */
  private buildEcosystemAnalysis(frameworks: FrameworkAnalysis[]): TestingEcosystemAnalysis {
    // –†–∞–∑–¥–µ–ª—è–µ–º —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const unitFrameworks = frameworks.filter(f => f.category === 'unit');
    const e2eFrameworks = frameworks.filter(f => f.category === 'e2e');
    const coverageFrameworks = frameworks.filter(f => f.category === 'coverage');

    // –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Unit Testing
    const unitTesting = {
      score: this.calculateCategoryScore(unitFrameworks),
      frameworksReady: unitFrameworks.filter(f => f.configured).length,
      frameworksTotal: unitFrameworks.length,
      testsTotal: unitFrameworks.reduce((sum, f) => sum + f.testsCount, 0),
    };

    // –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ E2E Testing
    const e2eTesting = {
      score: this.calculateCategoryScore(e2eFrameworks),
      frameworksReady: e2eFrameworks.filter(f => f.configured).length,
      frameworksTotal: e2eFrameworks.length,
      testsTotal: e2eFrameworks.reduce((sum, f) => sum + f.testsCount, 0),
    };

    // –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Code Coverage
    const codeCoverage = {
      score: this.calculateCategoryScore(coverageFrameworks),
      configured: coverageFrameworks.some(f => f.configured),
      coverageReports: coverageFrameworks.some(f => f.score > 70),
    };

    // –û–±—â–∏–π —Å—á–µ—Ç (–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π)
    const overallScore = Math.round(
      unitTesting.score * 0.4 + // Unit —Ç–µ—Å—Ç—ã - 40%
        e2eTesting.score * 0.35 + // E2E —Ç–µ—Å—Ç—ã - 35%
        codeCoverage.score * 0.25 // Coverage - 25%
    );

    return {
      overallScore,
      overallStatus: this.getOverallStatus(overallScore),
      readinessLevel: this.getReadinessLevel(overallScore, unitTesting, e2eTesting),
      unitTesting,
      e2eTesting,
      codeCoverage,
      frameworks,
      criticalIssues: this.identifyCriticalIssues(frameworks),
      improvements: this.identifyImprovements(frameworks),
      nextSteps: this.identifyNextSteps(overallScore, unitTesting, e2eTesting),
    };
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –∏–∑ –¥–µ—Ç–∞–ª–µ–π –∞–Ω–∞–ª–∏–∑–∞
   */
  private extractTestsCount(details: any, analyzerName: string): number {
    if (!details) return 0;

    // –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–µ—Å—Ç–æ–≤
    if (details.testsFound !== undefined) return details.testsFound;
    if (details.testFiles !== undefined) return details.testFiles;
    if (details.testCount !== undefined) return details.testCount;
    if (details.e2eTests !== undefined) return details.e2eTests;
    if (details.unitTests !== undefined) return details.unitTests;

    return 0;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ –ø–æ —Å—á–µ—Ç—É
   */
  private getFrameworkStatus(score: number): 'excellent' | 'good' | 'fair' | 'poor' | 'missing' {
    if (score >= 85) return 'excellent';
    if (score >= 70) return 'good';
    if (score >= 50) return 'fair';
    if (score >= 20) return 'poor';
    return 'missing';
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —Å—á–µ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤
   */
  private calculateCategoryScore(frameworks: FrameworkAnalysis[]): number {
    if (frameworks.length === 0) return 0;

    const totalScore = frameworks.reduce((sum, f) => sum + f.score, 0);
    return Math.round(totalScore / frameworks.length);
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—á–µ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ñ–∞–∑—ã
   */
  private calculatePhaseScore(frameworks: FrameworkAnalysis[], category: string): number {
    const phaseFrameworks = frameworks.filter(f => f.category === category);
    return this.calculateCategoryScore(phaseFrameworks);
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
   */
  private getOverallStatus(score: number): 'excellent' | 'good' | 'fair' | 'poor' | 'critical' {
    if (score >= 85) return 'excellent';
    if (score >= 70) return 'good';
    if (score >= 50) return 'fair';
    if (score >= 30) return 'poor';
    return 'critical';
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
   */
  private getReadinessLevel(
    overallScore: number,
    unitTesting: any,
    e2eTesting: any
  ): 'production' | 'development' | 'basic' | 'inadequate' {
    if (overallScore >= 80 && unitTesting.testsTotal >= 10 && e2eTesting.testsTotal >= 3) {
      return 'production';
    }
    if (overallScore >= 60 && unitTesting.testsTotal >= 5) {
      return 'development';
    }
    if (overallScore >= 40) {
      return 'basic';
    }
    return 'inadequate';
  }

  /**
   * –í—ã—è–≤–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
   */
  private identifyCriticalIssues(frameworks: FrameworkAnalysis[]): string[] {
    const issues: string[] = [];

    const unitFrameworks = frameworks.filter(f => f.category === 'unit');
    const e2eFrameworks = frameworks.filter(f => f.category === 'e2e');
    const coverageFrameworks = frameworks.filter(f => f.category === 'coverage');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    if (unitFrameworks.every(f => !f.configured)) {
      issues.push('‚ùå –ù–∏ –æ–¥–∏–Ω Unit Testing —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    if (e2eFrameworks.every(f => !f.configured)) {
      issues.push('‚ùå –ù–∏ –æ–¥–∏–Ω E2E Testing —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    if (coverageFrameworks.every(f => !f.configured)) {
      issues.push('‚ùå Code Coverage –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    const totalTests = frameworks.reduce((sum, f) => sum + f.testsCount, 0);
    if (totalTests === 0) {
      issues.push('‚ùå –í –ø—Ä–æ–µ–∫—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–µ—Å—Ç—ã');
    }

    return issues;
  }

  /**
   * –í—ã—è–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
   */
  private identifyImprovements(frameworks: FrameworkAnalysis[]): string[] {
    const improvements: string[] = [];

    frameworks.forEach(framework => {
      if (framework.status === 'poor' && framework.installed) {
        improvements.push(`‚ö†Ô∏è ${framework.name}: —É–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (${framework.score}/100)`);
      }

      if (framework.status === 'fair' && framework.testsCount < 5) {
        improvements.push(
          `üìù ${framework.name}: –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ç–µ—Å—Ç–æ–≤ (—Å–µ–π—á–∞—Å ${framework.testsCount})`
        );
      }
    });

    return improvements;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
   */
  private identifyNextSteps(overallScore: number, unitTesting: any, e2eTesting: any): string[] {
    const steps: string[] = [];

    if (overallScore < 50) {
      steps.push('üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑–æ–≤—É—é —Ç–µ—Å—Ç–æ–≤—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É');
    }

    if (unitTesting.testsTotal < 10) {
      steps.push('üìù –°–æ–∑–¥–∞—Ç—å –±–æ–ª—å—à–µ Unit —Ç–µ—Å—Ç–æ–≤');
    }

    if (e2eTesting.frameworksReady === 0) {
      steps.push('üé≠ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å E2E —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
    }

    if (overallScore >= 70) {
      steps.push('üöÄ –ì–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å AnalysisOrchestrator');
    }

    return steps;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
   */
  private generateRecommendations(analysis: TestingEcosystemAnalysis): string[] {
    const recommendations: string[] = [];

    // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    recommendations.push(...analysis.criticalIssues);

    // –î–æ–±–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è
    recommendations.push(...analysis.improvements);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
    recommendations.push(...analysis.nextSteps);

    return recommendations;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  private generateSummaryMessage(analysis: TestingEcosystemAnalysis): string {
    const { overallScore, overallStatus, readinessLevel } = analysis;
    const { unitTesting, e2eTesting, codeCoverage } = analysis;

    return (
      `–¢–µ—Å—Ç–æ–≤–∞—è —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞: ${overallScore}/100 (${overallStatus}). ` +
      `Unit Testing: ${unitTesting.score}/100 (${unitTesting.frameworksReady}/${unitTesting.frameworksTotal} –≥–æ—Ç–æ–≤—ã). ` +
      `E2E Testing: ${e2eTesting.score}/100 (${e2eTesting.frameworksReady}/${e2eTesting.frameworksTotal} –≥–æ—Ç–æ–≤—ã). ` +
      `Code Coverage: ${codeCoverage.score}/100. ` +
      `–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ${readinessLevel}`
    );
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º
   */
  private getIssueSeverity(score: number): 'error' | 'warning' | 'info' {
    if (score < 30) return 'error';
    if (score < 70) return 'warning';
    return 'info';
  }
}
