#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã PerformanceChecker
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
 */

import { PerformanceChecker } from './PerformanceChecker';
import { BundleSizeAnalyzer } from './BundleSizeAnalyzer';

async function testPerformanceArchitecture() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã PerformanceChecker v2.0\n');

  // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —á–µ–∫–µ—Ä
  const performanceChecker = new PerformanceChecker({
    bundleSizeThreshold: 3 * 1024 * 1024, // 3MB
    enableBundleAnalysis: true,
    enableRuntimeAnalysis: false, // –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
    enableDependencyAnalysis: true,
  });

  console.log('üì¶ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä Bundle Size...');
  performanceChecker.registerAnalyzer(new BundleSizeAnalyzer());

  console.log(`‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤: ${performanceChecker.getAnalyzers().length}`);
  console.log(
    `üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${JSON.stringify(performanceChecker.getPerformanceConfig(), null, 2)}\n`
  );

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ
  const projectPath = process.cwd();
  console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç: ${projectPath}\n`);

  try {
    // –°–æ–∑–¥–∞–µ–º mock Project –æ–±—ä–µ–∫—Ç
    const project = {
      path: projectPath,
      name: 'test-project',
      getFileList: async () => [],
      getFileStats: async () => ({
        size: 0,
        isFile: false,
        isDirectory: true,
        created: new Date(),
        modified: new Date(),
      }),
      readFile: async () => '',
      hasFile: async () => false,
      exists: async () => true,
      resolvePath: (relativePath: string) => `${projectPath}/${relativePath}`,
    };
    const startTime = Date.now();

    const results = await performanceChecker.check(project);

    const analysisTime = Date.now() - startTime;
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: ${analysisTime}ms\n`);

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:\n');

    results.forEach((result, index) => {
      const statusIcon = result.passed ? '‚úÖ' : '‚ùå';
      const scoreColor = result.score >= 70 ? 'üü¢' : result.score >= 50 ? 'üü°' : 'üî¥';

      console.log(`${index + 1}. ${statusIcon} ${result.name}`);
      console.log(`   ${scoreColor} –ë–∞–ª–ª: ${result.score}/100`);
      console.log(`   üìù ${result.message}`);
      console.log(`   üìä –£—Ä–æ–≤–µ–Ω—å: ${result.severity}`);

      if (result.details) {
        console.log(`   üìã –î–µ—Ç–∞–ª–∏: ${Object.keys(result.details).length} –ø–æ–ª–µ–π`);
      }
      console.log('');
    });

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const overview = results.find(r => r.id === 'performance-overview');
    if (overview) {
      console.log('üéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê:');
      console.log(`   –û–±—â–∏–π –±–∞–ª–ª: ${overview.score}/100`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${overview.passed ? '–ü–†–û–®–ï–õ' : '–ù–ï –ü–†–û–®–ï–õ'}`);
      console.log(`   –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ: ${overview.details?.analyzersCount || 0}`);
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const allRecommendations = results
      .flatMap(r => r.details?.recommendations || [])
      .filter(Boolean);

    if (allRecommendations.length > 0) {
      console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
      allRecommendations.forEach((rec, i) => {
        console.log(`   ${i + 1}. ${rec}`);
      });
    }

    console.log('\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');

    return {
      success: true,
      overallScore: overview?.score || 0,
      totalChecks: results.length,
      passedChecks: results.filter(r => r.passed).length,
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    };
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testPerformanceArchitecture()
    .then(result => {
      console.log('\nüìã –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
      process.exit(result.success ? 0 : 1);
    })
    .catch(error => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

export { testPerformanceArchitecture };
