/**
 * WebSecurityChecker - –ì–ª–∞–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–µ–±-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 *
 * –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ XSS, CSRF –∏ –¥—Ä—É–≥–∏—Ö –≤–µ–±-—É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π SecurityChecker
 */

import { CheckContext } from '../../types/index.js';
import { XSSAnalyzer, XSSAnalysisResult } from './analyzers/XSSAnalyzer.js';
import { CSRFAnalyzer, CSRFAnalysisResult } from './analyzers/CSRFAnalyzer.js';

export interface WebSecurityResult {
  xss: XSSAnalysisResult;
  csrf: CSRFAnalysisResult;
  summary: {
    totalVulnerabilities: number;
    criticalCount: number;
    highCount: number;
    mediumCount: number;
    filesScanned: number;
  };
  recommendations: string[];
}

export class WebSecurityChecker {
  private xssAnalyzer = new XSSAnalyzer();
  private csrfAnalyzer = new CSRFAnalyzer();

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–µ–±-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   */
  async analyzeWebSecurity(context: CheckContext): Promise<WebSecurityResult> {
    console.log('üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤–µ–±-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...');

    try {
      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ XSS –∏ CSRF
      const [xssResult, csrfResult] = await Promise.all([
        this.xssAnalyzer.analyzeXSS(context),
        this.csrfAnalyzer.analyzeCSRF(context),
      ]);

      console.log(`üìä XSS: ${xssResult.summary.total} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–∞–π–¥–µ–Ω–æ`);
      console.log(`üìä CSRF: ${csrfResult.summary.total} –ø—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ`);

      // –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const result = this.createWebSecurityResult(xssResult, csrfResult);

      console.log(`‚úÖ –í–µ–±-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: ${result.summary.totalVulnerabilities} –ø—Ä–æ–±–ª–µ–º`);

      return result;
    } catch (error) {
      console.error('‚ùå WebSecurityChecker: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
      return this.createEmptyResult();
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
   */
  private createWebSecurityResult(
    xssResult: XSSAnalysisResult,
    csrfResult: CSRFAnalysisResult
  ): WebSecurityResult {
    const totalVulnerabilities = xssResult.summary.total + csrfResult.summary.total;
    const criticalCount = xssResult.summary.critical + csrfResult.summary.critical;
    const highCount = xssResult.summary.high + csrfResult.summary.high;
    const mediumCount = xssResult.summary.medium + csrfResult.summary.medium;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const recommendations = this.generateBasicRecommendations(xssResult, csrfResult);

    return {
      xss: xssResult,
      csrf: csrfResult,
      summary: {
        totalVulnerabilities,
        criticalCount,
        highCount,
        mediumCount,
        filesScanned: Math.max(xssResult.filesScanned, csrfResult.filesScanned),
      },
      recommendations,
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   */
  private generateBasicRecommendations(
    xssResult: XSSAnalysisResult,
    csrfResult: CSRFAnalysisResult
  ): string[] {
    const recommendations: string[] = [];

    // XSS —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (xssResult.summary.critical > 0) {
      recommendations.push(
        'üö® –ö–†–ò–¢–ò–ß–ù–û: –ù–∞–π–¥–µ–Ω—ã XSS —É—è–∑–≤–∏–º–æ—Å—Ç–∏ - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–π—Ç–µ –≤—ã–≤–æ–¥ HTML'
      );
    }

    if (xssResult.vulnerabilities.some(v => v.type === 'html_output')) {
      recommendations.push(
        'üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DOMPurify –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ HTML'
      );
    }

    if (xssResult.vulnerabilities.some(v => v.type === 'inner_html')) {
      recommendations.push('‚ö†Ô∏è –ò–∑–±–µ–≥–∞–π—Ç–µ –ø—Ä—è–º–æ–≥–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è innerHTML - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ textContent');
    }

    // CSRF —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (csrfResult.summary.high > 0) {
      recommendations.push('üîí –î–æ–±–∞–≤—å—Ç–µ CSRF –∑–∞—â–∏—Ç—É –¥–ª—è —Ñ–æ—Ä–º —Å –º–µ—Ç–æ–¥–∞–º–∏ POST/PUT/DELETE');
    }

    if (csrfResult.formsFound > csrfResult.protectedForms) {
      const unprotected = csrfResult.formsFound - csrfResult.protectedForms;
      recommendations.push(`üìã ${unprotected} —Ñ–æ—Ä–º –Ω–µ –∑–∞—â–∏—â–µ–Ω—ã –æ—Ç CSRF - –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω—ã`);
    }

    if (csrfResult.issues.some(i => i.type === 'cookie_no_samesite')) {
      recommendations.push('üç™ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SameSite –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è cookies (strict/lax)');
    }

    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (recommendations.length === 0) {
      recommendations.push('‚úÖ –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–µ–±-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–æ–±–ª—é–¥–µ–Ω');
    } else {
      recommendations.push('üìö –ò–∑—É—á–∏—Ç–µ OWASP Top 10 –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –≤–µ–±-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
    }

    return recommendations;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
   */
  private createEmptyResult(): WebSecurityResult {
    return {
      xss: {
        vulnerabilities: [],
        filesScanned: 0,
        summary: { critical: 0, high: 0, medium: 0, total: 0 },
      },
      csrf: {
        issues: [],
        filesScanned: 0,
        formsFound: 0,
        protectedForms: 0,
        summary: { critical: 0, high: 0, medium: 0, total: 0 },
      },
      summary: {
        totalVulnerabilities: 0,
        criticalCount: 0,
        highCount: 0,
        mediumCount: 0,
        filesScanned: 0,
      },
      recommendations: ['‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤–µ–±-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'],
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± XSS —É—è–∑–≤–∏–º–æ—Å—Ç—è—Ö
   */
  getXSSDetails(): string[] {
    // –ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å RecommendationEngine
    return [];
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ CSRF –ø—Ä–æ–±–ª–µ–º–∞—Ö
   */
  getCSRFDetails(): string[] {
    // –ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å RecommendationEngine
    return [];
  }
}
