/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ–≥–æ —Ü–∏–∫–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */

import { GoldenStandardAnalyzer } from '../analyzer.js';
import * as path from 'path';
import * as fs from 'fs';

export interface IntegrationTestResult {
  testName: string;
  passed: boolean;
  duration: number;
  details: {
    analysisCompleted: boolean;
    validationCompleted: boolean;
    reportGenerated: boolean;
    criticalIssues: number;
    confidence: number;
  };
  error?: string;
}

export interface IntegrationTestSuite {
  suiteName: string;
  totalTests: number;
  passedTests: number;
  failedTests: number;
  totalDuration: number;
  results: IntegrationTestResult[];
}

export class IntegrationTester {
  private analyzer: GoldenStandardAnalyzer;

  constructor() {
    this.analyzer = new GoldenStandardAnalyzer();
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
   */
  async runIntegrationTests(): Promise<IntegrationTestSuite> {
    console.log('üß™ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...\n');

    const suite: IntegrationTestSuite = {
      suiteName: 'EAP Integration Tests',
      totalTests: 0,
      passedTests: 0,
      failedTests: 0,
      totalDuration: 0,
      results: [],
    };

    const tests = [
      () => this.testBasicAnalysisAndValidation(),
      () => this.testInvalidMetricsDetection(),
      () => this.testReportGeneration(),
      () => this.testErrorHandling(),
      () => this.testPerformanceValidation(),
    ];

    for (const test of tests) {
      const result = await test();
      suite.results.push(result);
      suite.totalTests++;
      suite.totalDuration += result.duration;

      if (result.passed) {
        suite.passedTests++;
        console.log(`‚úÖ ${result.testName} (${result.duration}ms)`);
      } else {
        suite.failedTests++;
        console.log(`‚ùå ${result.testName} (${result.duration}ms)`);
        if (result.error) {
          console.log(`   –û—à–∏–±–∫–∞: ${result.error}`);
        }
      }
    }

    this.printSummary(suite);
    return suite;
  }

  /**
   * –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
   */
  private async testBasicAnalysisAndValidation(): Promise<IntegrationTestResult> {
    const startTime = Date.now();
    const testName = '–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è';

    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
      const testProjectPath = await this.createTestProject();

      // –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
      const analysisResults = await this.analyzer.performStructuralAnalysis(testProjectPath);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
      const analysisCompleted =
        analysisResults &&
        analysisResults.duplication &&
        analysisResults.complexity &&
        analysisResults.fileClassification;

      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
      const validationResults = await this.analyzer.validateAnalysisResults(
        analysisResults,
        testProjectPath,
        { generateReport: false }
      );

      const validationCompleted =
        validationResults &&
        typeof validationResults.isValid === 'boolean' &&
        typeof validationResults.confidence === 'number';

      // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      await this.cleanupTestProject(testProjectPath);

      return {
        testName,
        passed: analysisCompleted && validationCompleted,
        duration: Date.now() - startTime,
        details: {
          analysisCompleted,
          validationCompleted,
          reportGenerated: false,
          criticalIssues: validationResults.criticalIssues || 0,
          confidence: validationResults.confidence || 0,
        },
      };
    } catch (error) {
      return {
        testName,
        passed: false,
        duration: Date.now() - startTime,
        details: {
          analysisCompleted: false,
          validationCompleted: false,
          reportGenerated: false,
          criticalIssues: 0,
          confidence: 0,
        },
        error: String(error),
      };
    }
  }

  /**
   * –¢–µ—Å—Ç 2: –î–µ—Ç–µ–∫—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
   */
  private async testInvalidMetricsDetection(): Promise<IntegrationTestResult> {
    const startTime = Date.now();
    const testName = '–î–µ—Ç–µ–∫—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫';

    try {
      // –°–æ–∑–¥–∞–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const invalidAnalysisResults = {
        duplication: {
          percentage: 150, // –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ > 100%
          duplicatedBlocks: 100,
          totalBlocks: 50, // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–æ–ª—å—à–µ —á–µ–º –≤—Å–µ–≥–æ
        },
        complexity: {
          summary: {
            maxCyclomatic: -5, // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
            maxCognitive: 999999, // –ù–µ—Ä–µ–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∞—è
            totalFiles: 1,
          },
          files: [
            {
              metrics: {
                maintainabilityIndex: 150, // > 100
              },
            },
          ],
        },
        fileClassification: {
          total: 10,
          classified: 8, // –ù–µ –≤—Å–µ —Ñ–∞–π–ª—ã –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã
        },
      };

      const validationResults = await this.analyzer.validateAnalysisResults(
        invalidAnalysisResults,
        './test-project',
        { generateReport: false }
      );

      // –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
      const correctlyDetected =
        !validationResults.isValid &&
        validationResults.criticalIssues > 0 &&
        validationResults.confidence < 50;

      return {
        testName,
        passed: correctlyDetected,
        duration: Date.now() - startTime,
        details: {
          analysisCompleted: true,
          validationCompleted: true,
          reportGenerated: false,
          criticalIssues: validationResults.criticalIssues,
          confidence: validationResults.confidence,
        },
      };
    } catch (error) {
      return {
        testName,
        passed: false,
        duration: Date.now() - startTime,
        details: {
          analysisCompleted: false,
          validationCompleted: false,
          reportGenerated: false,
          criticalIssues: 0,
          confidence: 0,
        },
        error: String(error),
      };
    }
  }

  /**
   * –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
   */
  private async testReportGeneration(): Promise<IntegrationTestResult> {
    const startTime = Date.now();
    const testName = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤';

    try {
      const validAnalysisResults = {
        duplication: { percentage: 15, duplicatedBlocks: 5, totalBlocks: 100 },
        complexity: {
          summary: { maxCyclomatic: 10, maxCognitive: 15, totalFiles: 3 },
          files: [{ metrics: { maintainabilityIndex: 85 } }],
        },
        fileClassification: { total: 10, classified: 10 },
      };

      const validationResults = await this.analyzer.validateAnalysisResults(
        validAnalysisResults,
        './test-project',
        {
          generateReport: true,
          reportFormat: 'markdown',
          outputPath: './test-reports',
        }
      );

      const reportGenerated =
        validationResults.reportPath && fs.existsSync(validationResults.reportPath);

      // –û—á–∏—â–∞–µ–º –æ—Ç—á–µ—Ç
      if (validationResults.reportPath && fs.existsSync(validationResults.reportPath)) {
        fs.unlinkSync(validationResults.reportPath);
        if (fs.existsSync('./test-reports')) {
          fs.rmdirSync('./test-reports');
        }
      }

      return {
        testName,
        passed: !!reportGenerated,
        duration: Date.now() - startTime,
        details: {
          analysisCompleted: true,
          validationCompleted: true,
          reportGenerated: !!reportGenerated,
          criticalIssues: validationResults.criticalIssues,
          confidence: validationResults.confidence,
        },
      };
    } catch (error) {
      return {
        testName,
        passed: false,
        duration: Date.now() - startTime,
        details: {
          analysisCompleted: false,
          validationCompleted: false,
          reportGenerated: false,
          criticalIssues: 0,
          confidence: 0,
        },
        error: String(error),
      };
    }
  }

  /**
   * –¢–µ—Å—Ç 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
   */
  private async testErrorHandling(): Promise<IntegrationTestResult> {
    const startTime = Date.now();
    const testName = '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫';

    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç
      const analysisResults =
        await this.analyzer.performStructuralAnalysis('./nonexistent-project');

      // –ê–Ω–∞–ª–∏–∑ –¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –±–µ–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
      const errorHandled =
        analysisResults &&
        analysisResults.fileClassification &&
        analysisResults.fileClassification.total >= 0;

      return {
        testName,
        passed: errorHandled,
        duration: Date.now() - startTime,
        details: {
          analysisCompleted: errorHandled,
          validationCompleted: false,
          reportGenerated: false,
          criticalIssues: 0,
          confidence: 0,
        },
      };
    } catch (error) {
      // –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–µ—Ç—Å—è, –Ω–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
      return {
        testName,
        passed: true, // –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
        duration: Date.now() - startTime,
        details: {
          analysisCompleted: false,
          validationCompleted: false,
          reportGenerated: false,
          criticalIssues: 0,
          confidence: 0,
        },
        error: '–û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞',
      };
    }
  }

  /**
   * –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  private async testPerformanceValidation(): Promise<IntegrationTestResult> {
    const startTime = Date.now();
    const testName = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏';

    try {
      const testProjectPath = await this.createTestProject();

      // –ê–Ω–∞–ª–∏–∑ –¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –∑–∞ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è
      const analysisStart = Date.now();
      const analysisResults = await this.analyzer.performStructuralAnalysis(testProjectPath);
      const analysisDuration = Date.now() - analysisStart;

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±—ã—Å—Ç—Ä–æ–π
      const validationStart = Date.now();
      await this.analyzer.validateAnalysisResults(analysisResults, testProjectPath);
      const validationDuration = Date.now() - validationStart;

      await this.cleanupTestProject(testProjectPath);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
      const performanceOk =
        analysisDuration < 30000 && // –ê–Ω–∞–ª–∏–∑ < 30 —Å–µ–∫
        validationDuration < 5000; // –í–∞–ª–∏–¥–∞—Ü–∏—è < 5 —Å–µ–∫

      return {
        testName,
        passed: performanceOk,
        duration: Date.now() - startTime,
        details: {
          analysisCompleted: true,
          validationCompleted: true,
          reportGenerated: false,
          criticalIssues: 0,
          confidence: 100,
        },
        error: performanceOk
          ? undefined
          : `–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ: –∞–Ω–∞–ª–∏–∑ ${analysisDuration}ms, –≤–∞–ª–∏–¥–∞—Ü–∏—è ${validationDuration}ms`,
      };
    } catch (error) {
      return {
        testName,
        passed: false,
        duration: Date.now() - startTime,
        details: {
          analysisCompleted: false,
          validationCompleted: false,
          reportGenerated: false,
          criticalIssues: 0,
          confidence: 0,
        },
        error: String(error),
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
   */
  private async createTestProject(): Promise<string> {
    const testDir = path.join(process.cwd(), 'temp-test-project');

    if (!fs.existsSync(testDir)) {
      fs.mkdirSync(testDir, { recursive: true });
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    const testFiles = {
      'package.json': JSON.stringify({ name: 'test-project', version: '1.0.0' }),
      'src/main.js': 'function main() { console.log("Hello"); }',
      'src/utils.js': 'export function add(a, b) { return a + b; }',
      'README.md': '# Test Project',
    };

    for (const [filePath, content] of Object.entries(testFiles)) {
      const fullPath = path.join(testDir, filePath);
      const dir = path.dirname(fullPath);

      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }

      fs.writeFileSync(fullPath, content);
    }

    return testDir;
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
   */
  private async cleanupTestProject(projectPath: string): Promise<void> {
    if (fs.existsSync(projectPath)) {
      fs.rmSync(projectPath, { recursive: true, force: true });
    }
  }

  /**
   * –í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É
   */
  private printSummary(suite: IntegrationTestSuite): void {
    console.log('\n' + '='.repeat(60));
    console.log('üèÅ –ò–¢–û–ì–ò –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–• –¢–ï–°–¢–û–í');
    console.log('='.repeat(60));
    console.log(`üìä –ù–∞–±–æ—Ä: ${suite.suiteName}`);
    console.log(`üìã –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${suite.totalTests}`);
    console.log(`‚úÖ –ü—Ä–æ—à–ª–æ: ${suite.passedTests}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${suite.failedTests}`);
    console.log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${suite.totalDuration}ms`);
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((suite.passedTests / suite.totalTests) * 100).toFixed(1)}%`);

    if (suite.failedTests === 0) {
      console.log('\nüéâ –í–°–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò!');
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
      console.log('\n‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´');
      console.log('‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞');
    }

    console.log('='.repeat(60));
  }
}
