/**
 * –¢–µ—Å—Ç XSS Detection Engine
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ XSS —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
 */

import { join } from 'path';
import { XSSAnalyzer } from './checkers/security/analyzers/XSSAnalyzer.js';
import { CheckContext } from './types/index.js';

async function testXSSAnalyzer() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ XSS Detection Engine\n');

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
  const context: CheckContext = {
    projectPath: process.cwd(),
    projectInfo: {
      name: 'test-project',
      version: '1.0.0',
      description: 'Test project for XSS analysis',
      framework: 'sveltekit',
      packageManager: 'npm',
      hasTypeScript: true,
      hasTests: false,
      hasDocker: false,
      hasCICD: false,
      dependencies: {
        production: 0,
        development: 0,
        total: 0,
      },
    },
    options: {
      projectPath: process.cwd(),
      includeOptional: true,
      verbose: true,
    },
  };

  const analyzer = new XSSAnalyzer();

  try {
    console.log('üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ XSS —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π...');
    const result = await analyzer.analyzeXSS(context);

    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:');
    console.log(`   üìÅ –§–∞–π–ª–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${result.filesScanned}`);
    console.log(`   üö® –í—Å–µ–≥–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: ${result.summary.total}`);
    console.log(`   üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: ${result.summary.critical}`);
    console.log(`   üü† –í—ã—Å–æ–∫–∏—Ö: ${result.summary.high}`);
    console.log(`   üü° –°—Ä–µ–¥–Ω–∏—Ö: ${result.summary.medium}`);

    if (result.vulnerabilities.length > 0) {
      console.log('\nüîç –ù–ê–ô–î–ï–ù–ù–´–ï –£–Ø–ó–í–ò–ú–û–°–¢–ò:');

      result.vulnerabilities.slice(0, 5).forEach((vuln, index) => {
        console.log(`\n   ${index + 1}. ${vuln.description}`);
        console.log(`      üìÑ –§–∞–π–ª: ${vuln.file}:${vuln.line}:${vuln.column}`);
        console.log(`      üéØ –¢–∏–ø: ${vuln.type}`);
        console.log(`      ‚ö†Ô∏è  –£—Ä–æ–≤–µ–Ω—å: ${vuln.severity}`);
        console.log(`      üìù –ö–æ–¥: ${vuln.code}`);
        console.log(`      üîç –ö–æ–Ω—Ç–µ–∫—Å—Ç: ${vuln.context}`);
      });

      if (result.vulnerabilities.length > 5) {
        console.log(`\n   ... –∏ –µ—â–µ ${result.vulnerabilities.length - 5} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π`);
      }
    } else {
      console.log('\n‚úÖ XSS —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
    }

    // –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    console.log('\nüìà –û–¶–ï–ù–ö–ê –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò:');
    let score = 0;

    if (result.filesScanned > 0) {
      console.log('   ‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç (+25%)');
      score += 25;
    }

    if (result.summary.total >= 0) {
      console.log('   ‚úÖ –ü–æ–¥—Å—á–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç (+25%)');
      score += 25;
    }

    if (result.vulnerabilities.length >= 0) {
      console.log('   ‚úÖ –î–µ—Ç–µ–∫—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç (+25%)');
      score += 25;
    }

    if (result.vulnerabilities.some(v => v.severity === 'critical')) {
      console.log('   ‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç (+25%)');
      score += 25;
    } else if (result.vulnerabilities.length === 0) {
      console.log('   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ false positives (+25%)');
      score += 25;
    }

    console.log(`\nüéØ –ò–¢–û–ì–û–í–ê–Ø –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨: ${score}%`);

    if (score >= 75) {
      console.log('üéâ –£–°–ü–ï–•! XSS Detection Engine —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      return true;
    } else {
      console.log('‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ XSS –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞');
      return false;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è XSS –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞:', error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (import.meta.url === `file://${process.argv[1]}`) {
  testXSSAnalyzer()
    .then(success => {
      console.log('\n' + '='.repeat(60));
      if (success) {
        console.log('üèÅ –¢–ï–°–¢ XSS ANALYZER: SUCCESS');
        console.log('‚úÖ –ì–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å WebSecurityChecker');
      } else {
        console.log('üèÅ –¢–ï–°–¢ XSS ANALYZER: FAILED');
        console.log('‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π');
      }
      console.log('='.repeat(60));

      process.exit(success ? 0 : 1);
    })
    .catch(error => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}
