/**
 * –í–∞–ª–∏–¥–∞—Ç–æ—Ä –º–µ—Ç—Ä–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–æ–≤
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –∏—Ö –ª–æ–≥–∏—á–µ—Å–∫–æ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
 */

export interface MetricValidationRule {
  metricName: string;
  dataType: 'number' | 'percentage' | 'ratio' | 'count';
  range: { min: number; max: number };
  dependencies?: string[]; // –ú–µ—Ç—Ä–∏–∫–∏, –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–≤–∏—Å–∏—Ç –¥–∞–Ω–Ω–∞—è
  validator?: (value: any, context: any) => boolean;
  errorMessage?: string;
}

export interface MetricValidationResult {
  metric: string;
  value: any;
  isValid: boolean;
  violations: string[];
  suggestions: string[];
}

export interface MetricsValidationReport {
  projectPath: string;
  timestamp: Date;
  totalMetrics: number;
  validMetrics: number;
  invalidMetrics: number;
  results: MetricValidationResult[];
  summary: {
    byCategory: { [category: string]: { valid: number; invalid: number } };
    criticalViolations: number;
    warningViolations: number;
  };
}

export class MetricsValidator {
  private rules: Map<string, MetricValidationRule> = new Map();

  constructor() {
    this.initializeStandardRules();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫
   */
  private initializeStandardRules(): void {
    // –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫ –¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
    this.addRule({
      metricName: 'duplication.percentage',
      dataType: 'percentage',
      range: { min: 0, max: 100 },
      errorMessage: '–ü—Ä–æ—Ü–µ–Ω—Ç –¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0% –∏ 100%',
    });

    this.addRule({
      metricName: 'duplication.duplicatedBlocks',
      dataType: 'count',
      range: { min: 0, max: Number.MAX_SAFE_INTEGER },
      dependencies: ['duplication.totalBlocks'],
      validator: (value, context) => {
        const totalBlocks = context['duplication.totalBlocks'];
        return totalBlocks === undefined || value <= totalBlocks;
      },
      errorMessage: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤',
    });

    this.addRule({
      metricName: 'duplication.duplicatedLines',
      dataType: 'count',
      range: { min: 0, max: Number.MAX_SAFE_INTEGER },
      dependencies: ['duplication.totalLines'],
      validator: (value, context) => {
        const totalLines = context['duplication.totalLines'];
        return totalLines === undefined || value <= totalLines;
      },
      errorMessage: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫',
    });

    // –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    this.addRule({
      metricName: 'complexity.cyclomatic',
      dataType: 'number',
      range: { min: 1, max: 1000 }, // –†–∞–∑—É–º–Ω—ã–π –≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–µ–¥–µ–ª
      validator: (value, context) => {
        // –¶–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π
        return value > 0;
      },
      errorMessage: '–¶–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
    });

    this.addRule({
      metricName: 'complexity.cognitive',
      dataType: 'number',
      range: { min: 0, max: 5000 }, // –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è –º–æ–∂–µ—Ç –±—ã—Ç—å 0
      validator: (value, context) => {
        const cyclomatic = context['complexity.cyclomatic'];
        // –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ–±—ã—á–Ω–æ >= —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π
        return cyclomatic === undefined || value >= 0;
      },
      errorMessage: '–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
    });

    this.addRule({
      metricName: 'complexity.maintainabilityIndex',
      dataType: 'percentage',
      range: { min: 0, max: 100 },
      errorMessage: '–ò–Ω–¥–µ–∫—Å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ 100',
    });

    this.addRule({
      metricName: 'complexity.halstead.volume',
      dataType: 'number',
      range: { min: 0, max: Number.MAX_SAFE_INTEGER },
      validator: (value, context) => {
        // –û–±—ä–µ–º –•–æ–ª—Å—Ç–µ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
        return value >= 0 && isFinite(value);
      },
      errorMessage: '–û–±—ä–µ–º –•–æ–ª—Å—Ç–µ–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω–µ—á–Ω—ã–º —á–∏—Å–ª–æ–º',
    });

    this.addRule({
      metricName: 'complexity.halstead.difficulty',
      dataType: 'number',
      range: { min: 0, max: Number.MAX_SAFE_INTEGER },
      validator: (value, context) => {
        return value >= 0 && isFinite(value);
      },
      errorMessage: '–°–ª–æ–∂–Ω–æ—Å—Ç—å –•–æ–ª—Å—Ç–µ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω–µ—á–Ω—ã–º —á–∏—Å–ª–æ–º',
    });

    // –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
    this.addRule({
      metricName: 'nesting.maximum',
      dataType: 'count',
      range: { min: 0, max: 50 }, // –†–∞–∑—É–º–Ω—ã–π –ø—Ä–µ–¥–µ–ª –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
      validator: (value, context) => {
        const average = context['nesting.average'];
        return average === undefined || value >= average;
      },
      errorMessage: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å >= —Å—Ä–µ–¥–Ω–µ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏',
    });

    this.addRule({
      metricName: 'nesting.average',
      dataType: 'number',
      range: { min: 0, max: 50 },
      validator: value => value >= 0 && isFinite(value),
      errorMessage: '–°—Ä–µ–¥–Ω—è—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω–µ—á–Ω—ã–º —á–∏—Å–ª–æ–º',
    });

    // –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
    this.addRule({
      metricName: 'classification.totalFiles',
      dataType: 'count',
      range: { min: 0, max: Number.MAX_SAFE_INTEGER },
      errorMessage: '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º',
    });

    this.addRule({
      metricName: 'classification.classifiedFiles',
      dataType: 'count',
      range: { min: 0, max: Number.MAX_SAFE_INTEGER },
      dependencies: ['classification.totalFiles'],
      validator: (value, context) => {
        const totalFiles = context['classification.totalFiles'];
        return totalFiles === undefined || value <= totalFiles;
      },
      errorMessage: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ',
    });
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  addRule(rule: MetricValidationRule): void {
    this.rules.set(rule.metricName, rule);
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–∞–±–æ—Ä –º–µ—Ç—Ä–∏–∫
   */
  async validateMetrics(metrics: any, projectPath: string): Promise<MetricsValidationReport> {
    console.log('üî¢ –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫...');

    const report: MetricsValidationReport = {
      projectPath,
      timestamp: new Date(),
      totalMetrics: 0,
      validMetrics: 0,
      invalidMetrics: 0,
      results: [],
      summary: {
        byCategory: {},
        criticalViolations: 0,
        warningViolations: 0,
      },
    };

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –ø–ª–æ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const flatMetrics = this.flattenMetrics(metrics);
    report.totalMetrics = Object.keys(flatMetrics).length;

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –º–µ—Ç—Ä–∏–∫—É
    for (const [metricPath, value] of Object.entries(flatMetrics)) {
      const result = this.validateSingleMetric(metricPath, value, flatMetrics);
      report.results.push(result);

      if (result.isValid) {
        report.validMetrics++;
      } else {
        report.invalidMetrics++;

        // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏—è
        const isCritical = this.isCriticalViolation(result);
        if (isCritical) {
          report.summary.criticalViolations++;
        } else {
          report.summary.warningViolations++;
        }
      }

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      const category = this.getMetricCategory(metricPath);
      if (!report.summary.byCategory[category]) {
        report.summary.byCategory[category] = { valid: 0, invalid: 0 };
      }

      if (result.isValid) {
        report.summary.byCategory[category].valid++;
      } else {
        report.summary.byCategory[category].invalid++;
      }
    }

    console.log(
      `‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${report.validMetrics}/${report.totalMetrics} –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö`
    );
    return report;
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é –º–µ—Ç—Ä–∏–∫—É
   */
  private validateSingleMetric(
    metricPath: string,
    value: any,
    context: any
  ): MetricValidationResult {
    const result: MetricValidationResult = {
      metric: metricPath,
      value,
      isValid: true,
      violations: [],
      suggestions: [],
    };

    const rule = this.rules.get(metricPath);
    if (!rule) {
      // –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞, –ø—Ä–æ–≤–æ–¥–∏–º –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
      return this.performBasicValidation(metricPath, value);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
    if (!this.validateDataType(value, rule.dataType)) {
      result.isValid = false;
      result.violations.push(
        `–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: –æ–∂–∏–¥–∞–ª—Å—è ${rule.dataType}, –ø–æ–ª—É—á–µ–Ω ${typeof value}`
      );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    if (typeof value === 'number') {
      if (value < rule.range.min || value > rule.range.max) {
        result.isValid = false;
        result.violations.push(
          `–ó–Ω–∞—á–µ–Ω–∏–µ ${value} –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [${rule.range.min}, ${rule.range.max}]`
        );
      }
    }

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (rule.validator && !rule.validator(value, context)) {
      result.isValid = false;
      result.violations.push(rule.errorMessage || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if (rule.dependencies) {
      for (const dependency of rule.dependencies) {
        if (context[dependency] === undefined) {
          result.violations.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–∞—è –º–µ—Ç—Ä–∏–∫–∞: ${dependency}`);
        }
      }
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
    if (!result.isValid) {
      result.suggestions = this.generateSuggestions(metricPath, value, rule);
    }

    return result;
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –º–µ—Ç—Ä–∏–∫ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª
   */
  private performBasicValidation(metricPath: string, value: any): MetricValidationResult {
    const result: MetricValidationResult = {
      metric: metricPath,
      value,
      isValid: true,
      violations: [],
      suggestions: [],
    };

    // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (value === null || value === undefined) {
      result.isValid = false;
      result.violations.push('–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ');
    } else if (typeof value === 'number') {
      if (!isFinite(value)) {
        result.isValid = false;
        result.violations.push('–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–Ω–µ—á–Ω—ã–º —á–∏—Å–ª–æ–º');
      }
      if (isNaN(value)) {
        result.isValid = false;
        result.violations.push('–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º (NaN)');
      }
    }

    return result;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
   */
  private validateDataType(value: any, expectedType: string): boolean {
    switch (expectedType) {
      case 'number':
        return typeof value === 'number' && isFinite(value);
      case 'percentage':
        return typeof value === 'number' && value >= 0 && value <= 100;
      case 'ratio':
        return typeof value === 'number' && value >= 0 && value <= 1;
      case 'count':
        return typeof value === 'number' && value >= 0 && Number.isInteger(value);
      default:
        return true;
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è
   */
  private isCriticalViolation(result: MetricValidationResult): boolean {
    const criticalKeywords = ['–Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã–π', '–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π', '–ø—Ä–µ–≤—ã—à–∞–µ—Ç', 'NaN', 'infinite'];
    return result.violations.some(violation =>
      criticalKeywords.some(keyword => violation.toLowerCase().includes(keyword.toLowerCase()))
    );
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ç—Ä–∏–∫–∏
   */
  private getMetricCategory(metricPath: string): string {
    const parts = metricPath.split('.');
    return parts[0] || 'unknown';
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–µ—Ç—Ä–∏–∫ –≤ –ø–ª–æ—Å–∫—É—é
   */
  private flattenMetrics(obj: any, prefix = ''): { [key: string]: any } {
    const flattened: { [key: string]: any } = {};

    for (const [key, value] of Object.entries(obj || {})) {
      const newKey = prefix ? `${prefix}.${key}` : key;

      if (value && typeof value === 'object' && !Array.isArray(value)) {
        Object.assign(flattened, this.flattenMetrics(value, newKey));
      } else if (
        typeof value === 'number' ||
        typeof value === 'boolean' ||
        typeof value === 'string'
      ) {
        flattened[newKey] = value;
      }
    }

    return flattened;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
   */
  private generateSuggestions(
    metricPath: string,
    value: any,
    rule: MetricValidationRule
  ): string[] {
    const suggestions: string[] = [];

    if (metricPath.includes('duplication.percentage') && typeof value === 'number' && value > 100) {
      suggestions.push(
        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ - –≤–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞ –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏'
      );
      suggestions.push('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏ –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑');
    }

    if (metricPath.includes('complexity') && typeof value === 'number' && value > 1000) {
      suggestions.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –ª–∏ –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã');
      suggestions.push('–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ AST');
    }

    if (metricPath.includes('halstead') && (!isFinite(value) || isNaN(value))) {
      suggestions.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –•–æ–ª—Å—Ç–µ–¥–∞ –Ω–∞ –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å');
      suggestions.push('–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–æ–¥—Å—á–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤');
    }

    return suggestions;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  getValidationStatistics(report: MetricsValidationReport): any {
    return {
      accuracy: report.totalMetrics > 0 ? (report.validMetrics / report.totalMetrics) * 100 : 0,
      criticalIssues: report.summary.criticalViolations,
      warningIssues: report.summary.warningViolations,
      categoriesWithIssues: Object.keys(report.summary.byCategory).filter(
        category => report.summary.byCategory[category].invalid > 0
      ),
    };
  }
}
