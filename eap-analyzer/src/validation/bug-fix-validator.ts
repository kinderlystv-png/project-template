/**
 * –í–∞–ª–∏–¥–∞—Ç–æ—Ä –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±–∞–≥–æ–≤ EAP
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –º–µ—Ç—Ä–∏–∫ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
 */

export interface ValidationRule {
  name: string;
  description: string;
  category: 'duplication' | 'complexity' | 'classification' | 'general';
  validate: (value: any, context?: any) => ValidationResult;
}

export interface ValidationResult {
  passed: boolean;
  value: any;
  expected: string;
  message: string;
  severity: 'error' | 'warning' | 'info';
}

export interface BugFixValidationReport {
  projectPath: string;
  validatedAt: Date;
  rules: {
    total: number;
    passed: number;
    failed: number;
    warnings: number;
  };
  categories: {
    [key: string]: {
      passed: number;
      failed: number;
      results: ValidationResult[];
    };
  };
  criticalIssues: ValidationResult[];
  recommendations: string[];
  isValid: boolean;
}

export class BugFixValidator {
  private rules: ValidationRule[] = [];

  constructor() {
    this.initializeValidationRules();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–∞–≥–æ–≤
   */
  private initializeValidationRules(): void {
    // –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
    this.rules.push({
      name: 'duplication_percentage_valid',
      description: '–ü—Ä–æ—Ü–µ–Ω—Ç –¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100%',
      category: 'duplication',
      validate: (value: number) => ({
        passed: value >= 0 && value <= 100,
        value,
        expected: '0-100%',
        message:
          value > 100
            ? `–ù–µ–≤–æ–∑–º–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: ${value}%`
            : value < 0
              ? `–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: ${value}%`
              : '–ü—Ä–æ—Ü–µ–Ω—Ç –¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –≤ –Ω–æ—Ä–º–µ',
        severity: value > 100 || value < 0 ? 'error' : 'info',
      }),
    });

    this.rules.push({
      name: 'duplication_blocks_reasonable',
      description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑—É–º–Ω—ã–º',
      category: 'duplication',
      validate: (value: number, context?: { totalBlocks?: number }) => {
        const ratio = context?.totalBlocks ? value / context.totalBlocks : 0;
        return {
          passed: ratio <= 1.0,
          value,
          expected: `<= ${context?.totalBlocks || 'N/A'}`,
          message:
            ratio > 1.0
              ? `–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –±–æ–ª—å—à–µ —á–µ–º –≤—Å–µ–≥–æ –±–ª–æ–∫–æ–≤: ${value} > ${context?.totalBlocks}`
              : '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
          severity: ratio > 1.0 ? 'error' : 'info',
        };
      },
    });

    // –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    this.rules.push({
      name: 'cyclomatic_complexity_reasonable',
      description: '–¶–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–∑—É–º–Ω–æ–π',
      category: 'complexity',
      validate: (value: number, context?: { linesOfCode?: number }) => {
        const linesOfCode = context?.linesOfCode || 100;
        const maxReasonable = Math.max(50, Math.floor(linesOfCode / 10));

        return {
          passed: value > 0 && value <= maxReasonable,
          value,
          expected: `1-${maxReasonable}`,
          message:
            value <= 0
              ? `–ù–µ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: ${value}`
              : value > maxReasonable
                ? `–ù–µ—Ä–∞–∑—É–º–Ω–æ –≤—ã—Å–æ–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: ${value} –¥–ª—è ${linesOfCode} —Å—Ç—Ä–æ–∫`
                : '–°–ª–æ–∂–Ω–æ—Å—Ç—å –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö',
          severity: value <= 0 || value > maxReasonable ? 'error' : 'info',
        };
      },
    });

    this.rules.push({
      name: 'cognitive_complexity_reasonable',
      description: '–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–∑—É–º–Ω–æ–π',
      category: 'complexity',
      validate: (value: number, context?: { cyclomaticComplexity?: number }) => {
        const cyclomaticComplexity = context?.cyclomaticComplexity || 10;
        const maxReasonable = cyclomaticComplexity * 3; // –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è –æ–±—ã—á–Ω–æ –≤—ã—à–µ —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π

        return {
          passed: value >= 0 && value <= maxReasonable,
          value,
          expected: `0-${maxReasonable}`,
          message:
            value < 0
              ? `–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: ${value}`
              : value > maxReasonable
                ? `–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: ${value} (—Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è: ${cyclomaticComplexity})`
                : '–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞',
          severity: value < 0 || value > maxReasonable ? 'error' : 'info',
        };
      },
    });

    this.rules.push({
      name: 'maintainability_index_valid',
      description: '–ò–Ω–¥–µ–∫—Å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100',
      category: 'complexity',
      validate: (value: number) => ({
        passed: value >= 0 && value <= 100,
        value,
        expected: '0-100',
        message:
          value < 0
            ? `–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º–æ—Å—Ç–∏: ${value}`
            : value > 100
              ? `–ò–Ω–¥–µ–∫—Å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º–æ—Å—Ç–∏ –≤—ã—à–µ –º–∞–∫—Å–∏–º—É–º–∞: ${value}`
              : '–ò–Ω–¥–µ–∫—Å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω',
        severity: value < 0 || value > 100 ? 'error' : 'info',
      }),
    });

    // –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    this.rules.push({
      name: 'file_classification_complete',
      description: '–í—Å–µ —Ñ–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã',
      category: 'classification',
      validate: (value: { total: number; classified: number }) => ({
        passed: value.classified === value.total,
        value: `${value.classified}/${value.total}`,
        expected: `${value.total}/${value.total}`,
        message:
          value.classified < value.total
            ? `–ù–µ –≤—Å–µ —Ñ–∞–π–ª—ã –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã: ${value.classified} –∏–∑ ${value.total}`
            : '–í—Å–µ —Ñ–∞–π–ª—ã –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã',
        severity: value.classified < value.total ? 'warning' : 'info',
      }),
    });

    this.rules.push({
      name: 'no_unknown_categories',
      description: '–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ñ–∞–π–ª–æ–≤ —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π',
      category: 'classification',
      validate: (value: { [category: string]: number }) => {
        const unknownCount = value['unknown'] || 0;
        return {
          passed: unknownCount === 0,
          value: unknownCount,
          expected: '0',
          message:
            unknownCount > 0
              ? `–§–∞–π–ª—ã —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π: ${unknownCount}`
              : '–í—Å–µ —Ñ–∞–π–ª—ã –∏–º–µ—é—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
          severity: unknownCount > 0 ? 'warning' : 'info',
        };
      },
    });

    // –û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞
    this.rules.push({
      name: 'no_generated_files_analyzed',
      description: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –¥—É–ø–ª–∏–∫–∞—Ü–∏—é/—Å–ª–æ–∂–Ω–æ—Å—Ç—å',
      category: 'general',
      validate: (value: { analyzedGenerated: number; totalGenerated: number }) => ({
        passed: value.analyzedGenerated === 0,
        value: value.analyzedGenerated,
        expected: '0',
        message:
          value.analyzedGenerated > 0
            ? `–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: ${value.analyzedGenerated} –∏–∑ ${value.totalGenerated}`
            : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω—ã',
        severity: value.analyzedGenerated > 0 ? 'error' : 'info',
      }),
    });
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
   */
  async validateAnalysisResults(
    analysisResults: any,
    projectPath: string
  ): Promise<BugFixValidationReport> {
    console.log('üîç –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...');

    const report: BugFixValidationReport = {
      projectPath,
      validatedAt: new Date(),
      rules: { total: 0, passed: 0, failed: 0, warnings: 0 },
      categories: {},
      criticalIssues: [],
      recommendations: [],
      isValid: true,
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = ['duplication', 'complexity', 'classification', 'general'];
    categories.forEach(category => {
      report.categories[category] = { passed: 0, failed: 0, results: [] };
    });

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const validationData = this.prepareValidationData(analysisResults);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    for (const rule of this.rules) {
      const data = validationData[rule.name];
      if (data === undefined) continue;

      report.rules.total++;

      let result: ValidationResult;
      try {
        result = rule.validate(data.value, data.context);
      } catch (error) {
        result = {
          passed: false,
          value: data.value,
          expected: 'valid',
          message: `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error}`,
          severity: 'error',
        };
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      if (result.passed) {
        report.rules.passed++;
        report.categories[rule.category].passed++;
      } else {
        if (result.severity === 'error') {
          report.rules.failed++;
          report.categories[rule.category].failed++;
          report.criticalIssues.push(result);
          report.isValid = false;
        } else if (result.severity === 'warning') {
          report.rules.warnings++;
        }
      }

      report.categories[rule.category].results.push(result);
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    report.recommendations = this.generateRecommendations(report);

    console.log(
      `‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${report.rules.passed}/${report.rules.total} –ø—Ä–∞–≤–∏–ª –ø—Ä–æ—à–ª–∏`
    );

    return report;
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
   */
  private prepareValidationData(analysisResults: any): {
    [ruleName: string]: { value: any; context?: any };
  } {
    const data: { [key: string]: { value: any; context?: any } } = {};

    // –î–∞–Ω–Ω—ã–µ –¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
    if (analysisResults.duplication) {
      data['duplication_percentage_valid'] = {
        value: analysisResults.duplication.percentage || 0,
      };

      data['duplication_blocks_reasonable'] = {
        value: analysisResults.duplication.duplicatedBlocks || 0,
        context: { totalBlocks: analysisResults.duplication.totalBlocks || 0 },
      };
    }

    // –î–∞–Ω–Ω—ã–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if (analysisResults.complexity?.summary) {
      const summary = analysisResults.complexity.summary;

      data['cyclomatic_complexity_reasonable'] = {
        value: summary.maxCyclomatic || 0,
        context: { linesOfCode: 1000 }, // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
      };

      data['cognitive_complexity_reasonable'] = {
        value: summary.maxCognitive || 0,
        context: { cyclomaticComplexity: summary.maxCyclomatic || 10 },
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if (analysisResults.complexity?.files) {
      const files = analysisResults.complexity.files.filter((f: any) => f.shouldAnalyze);
      if (files.length > 0) {
        const avgMaintainability =
          files.reduce((sum: number, f: any) => sum + (f.metrics?.maintainabilityIndex || 0), 0) /
          files.length;

        data['maintainability_index_valid'] = {
          value: avgMaintainability,
        };
      }
    }

    // –î–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if (analysisResults.fileClassification) {
      data['file_classification_complete'] = {
        value: {
          total: analysisResults.fileClassification.total || 0,
          classified: analysisResults.fileClassification.classified || 0,
        },
      };

      if (analysisResults.fileClassification.categories?.byCategory) {
        data['no_unknown_categories'] = {
          value: analysisResults.fileClassification.categories.byCategory,
        };
      }
    }

    // –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    data['no_generated_files_analyzed'] = {
      value: {
        analyzedGenerated: 0, // TODO: –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        totalGenerated: 0,
      },
    };

    return data;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  private generateRecommendations(report: BugFixValidationReport): string[] {
    const recommendations: string[] = [];

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    for (const issue of report.criticalIssues) {
      if (issue.message.includes('–ù–µ–≤–æ–∑–º–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥—É–ø–ª–∏–∫–∞—Ü–∏–∏')) {
        recommendations.push(
          'üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å—á–µ—Ç–∞ –¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ - –≤–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞ –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏'
        );
      }

      if (issue.message.includes('–ù–µ—Ä–∞–∑—É–º–Ω–æ –≤—ã—Å–æ–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å')) {
        recommendations.push(
          'üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏'
        );
      }

      if (issue.message.includes('—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã')) {
        recommendations.push('üîß –£–ª—É—á—à–∏—Ç–µ –¥–µ—Ç–µ–∫—Ü–∏—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–µ');
      }
    }

    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (report.rules.failed > 0) {
      recommendations.push(
        '‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'
      );
    }

    if (report.rules.warnings > 0) {
      recommendations.push('üí° –ï—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞');
    }

    if (report.isValid) {
      recommendations.push('‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    }

    return recommendations;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  getRulesByCategory(category: string): ValidationRule[] {
    return this.rules.filter(rule => rule.category === category);
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  addCustomRule(rule: ValidationRule): void {
    this.rules.push(rule);
  }
}
