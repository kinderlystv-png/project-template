/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏ (TypeScript –≤–µ—Ä—Å–∏—è)
 */
import * as fs from 'fs';
import * as path from 'path';
import { readFileWithEncoding } from './file-utils.js';
import { handleConfigError, handleFileError } from './error-handler.js';

export interface ProjectThresholds {
  fileSize: number;
  complexity: number;
  nesting: number;
  duplication: number;
  maintainabilityIndex: number;
  linesPerFunction: number;
  parametersPerFunction: number;
  classesPerFile: number;
}

export interface ProjectMetrics {
  complexityMedian?: number;
  complexityAvg?: number;
  fileSizeP75?: number;
  duplicationPercent?: number;
  totalFiles?: number;
  refactoringPercent?: number;
}

export interface ProjectSizeConfig {
  files: [number, number];
  multiplier: number;
}

export interface ThresholdData {
  timestamp: string;
  projectType: string;
  thresholds: ProjectThresholds;
}

// –ë–∞–∑–æ–≤—ã–µ –ø–æ—Ä–æ–≥–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export const DEFAULT_THRESHOLDS: ProjectThresholds = {
  fileSize: 300,
  complexity: 15,
  nesting: 4,
  duplication: 10,
  maintainabilityIndex: 65,
  linesPerFunction: 50,
  parametersPerFunction: 7,
  classesPerFile: 3,
};

// –ü–æ—Ä–æ–≥–∏ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–µ–∫—Ç–æ–≤
export const PROJECT_TYPE_THRESHOLDS: Record<string, Partial<ProjectThresholds>> = {
  react: {
    fileSize: 400,
    complexity: 45,
    nesting: 5,
    linesPerFunction: 60,
    classesPerFile: 2,
  },
  node: {
    fileSize: 250,
    complexity: 20,
    nesting: 4,
    linesPerFunction: 40,
    classesPerFile: 5,
  },
  svelte: {
    fileSize: 350,
    complexity: 25,
    nesting: 4,
    linesPerFunction: 45,
    classesPerFile: 2,
  },
  angular: {
    fileSize: 450,
    complexity: 35,
    nesting: 5,
    linesPerFunction: 55,
    classesPerFile: 3,
  },
  vue: {
    fileSize: 400,
    complexity: 30,
    nesting: 5,
    linesPerFunction: 50,
    classesPerFile: 2,
  },
  typescript: {
    fileSize: 350,
    complexity: 25,
    nesting: 4,
    linesPerFunction: 45,
    classesPerFile: 4,
  },
};

// –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–æ—Ä–æ–≥–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
export const PROJECT_SIZE_MULTIPLIERS: Record<string, ProjectSizeConfig> = {
  small: { files: [1, 50], multiplier: 0.8 },
  medium: { files: [51, 200], multiplier: 1.0 },
  large: { files: [201, 500], multiplier: 1.2 },
  huge: { files: [501, Infinity], multiplier: 1.4 },
};

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º
 */
export function detectProjectType(projectRoot: string): string {
  try {
    const projectTypes: string[] = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
    const packageJsonPath = path.join(projectRoot, 'package.json');
    if (fs.existsSync(packageJsonPath)) {
      const content = readFileWithEncoding(packageJsonPath);
      const packageJson = JSON.parse(content);
      const deps = {
        ...packageJson.dependencies,
        ...packageJson.devDependencies,
        ...packageJson.peerDependencies,
      };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      if (deps['react'] || deps['next'] || deps['@next/core']) projectTypes.push('react');
      if (deps['svelte'] || deps['@sveltejs/kit']) projectTypes.push('svelte');
      if (deps['@angular/core'] || deps['@angular/cli']) projectTypes.push('angular');
      if (deps['vue'] || deps['@vue/cli']) projectTypes.push('vue');
      if (deps['typescript'] || deps['@types/node']) projectTypes.push('typescript');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Node.js —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏
      if (deps['express'] || deps['koa'] || deps['fastify'] || deps['nestjs']) {
        projectTypes.push('node');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    const configFiles = fs.readdirSync(projectRoot);

    if (configFiles.includes('tsconfig.json')) projectTypes.push('typescript');
    if (configFiles.includes('angular.json')) projectTypes.push('angular');
    if (configFiles.includes('vue.config.js')) projectTypes.push('vue');
    if (configFiles.includes('svelte.config.js')) projectTypes.push('svelte');
    if (configFiles.includes('next.config.js')) projectTypes.push('react');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    const dirs = fs
      .readdirSync(projectRoot, { withFileTypes: true })
      .filter(entry => entry.isDirectory())
      .map(entry => entry.name);

    if (dirs.includes('components') && dirs.includes('pages')) projectTypes.push('react');
    if (dirs.includes('routes') && dirs.includes('lib')) projectTypes.push('svelte');
    if (dirs.includes('src') && dirs.includes('app')) projectTypes.push('angular');
    if (dirs.includes('controllers') && dirs.includes('services')) projectTypes.push('node');

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Ç–∏–ø
    const priority = ['angular', 'react', 'vue', 'svelte', 'typescript', 'node'];
    for (const type of priority) {
      if (projectTypes.includes(type)) {
        return type;
      }
    }
  } catch (error) {
    console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞: ${error}`);
  }

  return 'default';
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ñ–∞–π–ª–æ–≤
 */
export function getProjectSize(fileCount: number): string {
  for (const [size, config] of Object.entries(PROJECT_SIZE_MULTIPLIERS)) {
    const [min, max] = config.files;
    if (fileCount >= min && fileCount <= max) {
      return size;
    }
  }
  return 'medium';
}

/**
 * –ü–∞—Ä—Å–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç—á–µ—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 */
export function parseReportMetrics(reportContent: string): ProjectMetrics {
  const metrics: ProjectMetrics = {};

  try {
    // –ü–∞—Ä—Å–∏–º –º–µ–¥–∏–∞–Ω—É —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const complexityMedianMatch = reportContent.match(/–ú–µ–¥–∏–∞–Ω–∞:\s*(\d+)/i);
    if (complexityMedianMatch) {
      metrics.complexityMedian = parseInt(complexityMedianMatch[1], 10);
    }

    // –ü–∞—Ä—Å–∏–º —Å—Ä–µ–¥–Ω—é—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    const complexityAvgMatch = reportContent.match(/–°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:\s*(\d+\.?\d*)/i);
    if (complexityAvgMatch) {
      metrics.complexityAvg = parseFloat(complexityAvgMatch[1]);
    }

    // –ü–∞—Ä—Å–∏–º 75-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤
    const fileSizeP75Match = reportContent.match(/75-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å:\s*(\d+)\s*—Å—Ç—Ä–æ–∫/i);
    if (fileSizeP75Match) {
      metrics.fileSizeP75 = parseInt(fileSizeP75Match[1], 10);
    }

    // –ü–∞—Ä—Å–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    const duplicationMatch = reportContent.match(/–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ:\s*(\d+\.?\d*)%/i);
    if (duplicationMatch) {
      metrics.duplicationPercent = parseFloat(duplicationMatch[1]);
    }

    // –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
    const fileCountMatch = reportContent.match(/–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:\s*(\d+)/i);
    if (fileCountMatch) {
      metrics.totalFiles = parseInt(fileCountMatch[1], 10);
    }

    // –ü–∞—Ä—Å–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç —Ñ–∞–π–ª–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
    const refactoringMatch = reportContent.match(/(\d+\.?\d*)%.*—Ç—Ä–µ–±—É[—é—Ç|–µ—Ç].*—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥/i);
    if (refactoringMatch) {
      metrics.refactoringPercent = parseFloat(refactoringMatch[1]);
    }
  } catch (error) {
    console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –º–µ—Ç—Ä–∏–∫ –æ—Ç—á–µ—Ç–∞: ${error}`);
  }

  return metrics;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
 */
export function getProjectThresholds(
  projectRoot: string,
  previousReport: string | null = null,
  fileCount = 0
): ProjectThresholds {
  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞
    const projectType = detectProjectType(projectRoot);
    console.log(`üìã –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: ${projectType}`);

    // –ë–∞–∑–æ–≤—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞
    const typeThresholds = PROJECT_TYPE_THRESHOLDS[projectType] || {};
    const baseThresholds: ProjectThresholds = { ...DEFAULT_THRESHOLDS, ...typeThresholds };

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ—Ä–æ–≥–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
    let adjustedThresholds = { ...baseThresholds };
    if (fileCount > 0) {
      const projectSize = getProjectSize(fileCount);
      const multiplier = PROJECT_SIZE_MULTIPLIERS[projectSize].multiplier;

      console.log(
        `üìä –†–∞–∑–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞: ${projectSize} (${fileCount} —Ñ–∞–π–ª–æ–≤), –º–Ω–æ–∂–∏—Ç–µ–ª—å: ${multiplier}`
      );

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫ —á–∏—Å–ª–µ–Ω–Ω—ã–º –ø–æ—Ä–æ–≥–∞–º
      Object.keys(adjustedThresholds).forEach(key => {
        const value = adjustedThresholds[key as keyof ProjectThresholds];
        if (typeof value === 'number') {
          (adjustedThresholds as any)[key] = Math.ceil(value * multiplier);
        }
      });
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç—á–µ—Ç, –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ—Ä–æ–≥–∏
    if (previousReport) {
      console.log(`üîç –ù–∞–π–¥–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç—á–µ—Ç, –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ—Ä–æ–≥–∏...`);
      const reportMetrics = parseReportMetrics(previousReport);
      adjustedThresholds = calculateAdaptiveThresholds(reportMetrics, adjustedThresholds);
    }

    console.log(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Ä–æ–≥–∏:`, adjustedThresholds);
    return adjustedThresholds;
  } catch (error) {
    const configError = handleConfigError(error, 'adaptive-thresholds');
    console.error(configError.formatForConsole());
    return DEFAULT_THRESHOLDS;
  }
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
 */
function calculateAdaptiveThresholds(
  reportMetrics: ProjectMetrics,
  baseThresholds: ProjectThresholds
): ProjectThresholds {
  const adaptiveThresholds = { ...baseThresholds };

  // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ—Ä–æ–≥–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  if (reportMetrics.complexityMedian) {
    const suggestedComplexity = Math.ceil(reportMetrics.complexityMedian * 1.1);
    adaptiveThresholds.complexity = Math.max(
      baseThresholds.complexity,
      Math.min(suggestedComplexity, baseThresholds.complexity * 3)
    );
  }

  // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ—Ä–æ–≥–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
  if (reportMetrics.fileSizeP75) {
    const suggestedFileSize = Math.ceil(reportMetrics.fileSizeP75 * 1.2);
    adaptiveThresholds.fileSize = Math.max(
      baseThresholds.fileSize,
      Math.min(suggestedFileSize, baseThresholds.fileSize * 2)
    );
  }

  // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ—Ä–æ–≥–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  if (reportMetrics.duplicationPercent) {
    if (reportMetrics.duplicationPercent > 50) {
      adaptiveThresholds.duplication = Math.max(5, baseThresholds.duplication * 0.7);
    } else if (reportMetrics.duplicationPercent < 5) {
      adaptiveThresholds.duplication = baseThresholds.duplication * 1.5;
    }
  }

  // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Ñ–∞–π–ª–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
  if (reportMetrics.refactoringPercent && reportMetrics.refactoringPercent > 70) {
    Object.keys(adaptiveThresholds).forEach(key => {
      const value = adaptiveThresholds[key as keyof ProjectThresholds];
      if (typeof value === 'number') {
        (adaptiveThresholds as any)[key] = Math.ceil(value * 0.8);
      }
    });
  }

  return adaptiveThresholds;
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
 */
export function loadPreviousReport(projectRoot: string): string | null {
  const possibleReportPaths = [
    path.join(projectRoot, 'project-analysis-report.md'),
    path.join(projectRoot, 'eap-report.md'),
    path.join(projectRoot, 'analysis-report.md'),
  ];

  for (const reportPath of possibleReportPaths) {
    if (fs.existsSync(reportPath)) {
      try {
        console.log(`üìÑ –ù–∞–π–¥–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç—á–µ—Ç: ${reportPath}`);
        return readFileWithEncoding(reportPath);
      } catch (error) {
        const fileError = handleFileError(error, reportPath, '—á—Ç–µ–Ω–∏–∏');
        console.warn(fileError.formatForConsole());
      }
    }
  }

  return null;
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø–æ—Ä–æ–≥–∏ –≤ —Ñ–∞–π–ª –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 */
export function saveThresholds(thresholds: ProjectThresholds, projectRoot: string): void {
  try {
    const thresholdsPath = path.join(projectRoot, '.eap-thresholds.json');
    const data: ThresholdData = {
      timestamp: new Date().toISOString(),
      projectType: detectProjectType(projectRoot),
      thresholds: thresholds,
    };

    fs.writeFileSync(thresholdsPath, JSON.stringify(data, null, 2), 'utf8');
    console.log(`üíæ –ü–æ—Ä–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${thresholdsPath}`);
  } catch (error) {
    console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä–æ–≥–∏: ${error}`);
  }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –∏–∑ —Ñ–∞–π–ª–∞
 */
export function loadSavedThresholds(projectRoot: string): ProjectThresholds | null {
  try {
    const thresholdsPath = path.join(projectRoot, '.eap-thresholds.json');
    if (fs.existsSync(thresholdsPath)) {
      const content = readFileWithEncoding(thresholdsPath);
      const data: ThresholdData = JSON.parse(content);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
      const savedDate = new Date(data.timestamp);
      const now = new Date();
      const daysDiff = (now.getTime() - savedDate.getTime()) / (1000 * 60 * 60 * 24);

      if (daysDiff <= 30) {
        console.log(`üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ (${Math.floor(daysDiff)} –¥–Ω–µ–π –Ω–∞–∑–∞–¥)`);
        return data.thresholds;
      } else {
        console.log(
          `üìÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ —É—Å—Ç–∞—Ä–µ–ª–∏ (${Math.floor(daysDiff)} –¥–Ω–µ–π), –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ`
        );
      }
    }
  } catch (error) {
    console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏: ${error}`);
  }

  return null;
}
