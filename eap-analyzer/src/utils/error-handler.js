/**
 * –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è –≠–ê–ü
 */
const fs = require('fs');
const path = require('path');

/**
 * –¢–∏–ø—ã –æ—à–∏–±–æ–∫
 */
const ErrorTypes = {
  FILE_ACCESS: 'FILE_ACCESS',
  PARSING: 'PARSING',
  CONFIG: 'CONFIG',
  ANALYSIS: 'ANALYSIS',
  SYSTEM: 'SYSTEM',
  NETWORK: 'NETWORK',
  ENCODING: 'ENCODING',
  MODULE: 'MODULE',
};

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –æ—à–∏–±–æ–∫ –≠–ê–ü —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
 */
class EAPError extends Error {
  constructor(message, type, details = {}, originalError = null) {
    super(message);
    this.name = 'EAPError';
    this.type = type;
    this.details = details;
    this.originalError = originalError;
    this.timestamp = new Date();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (originalError && originalError.stack) {
      this.stack = `${this.stack}\n–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: ${originalError.stack}`;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
   */
  formatForConsole() {
    let output = `\nüî¥ –û—à–∏–±–∫–∞ –≠–ê–ü: ${this.message}\n`;
    output += `üìã –¢–∏–ø: ${this.type}\n`;
    output += `‚è∞ –í—Ä–µ–º—è: ${this.timestamp.toLocaleString('ru-RU')}\n`;

    if (Object.keys(this.details).length > 0) {
      output += 'üìÑ –î–µ—Ç–∞–ª–∏:\n';
      for (const [key, value] of Object.entries(this.details)) {
        output += `   ${key}: ${value}\n`;
      }
    }

    if (this.details.filePath) {
      output += `üìÇ –§–∞–π–ª: ${this.details.filePath}\n`;
    }

    if (this.details.suggestion) {
      output += `üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${this.details.suggestion}\n`;
    }

    return output;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  formatForLog() {
    return {
      timestamp: this.timestamp.toISOString(),
      name: this.name,
      message: this.message,
      type: this.type,
      details: this.details,
      stack: this.stack,
      originalError: this.originalError
        ? {
            name: this.originalError.name,
            message: this.originalError.message,
            stack: this.originalError.stack,
          }
        : null,
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
   */
  getRecoveryAction() {
    switch (this.type) {
      case ErrorTypes.FILE_ACCESS:
        return '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞';
      case ErrorTypes.PARSING:
        return '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏—Å–∫–ª—é—á–∏—Ç–µ –µ–≥–æ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞';
      case ErrorTypes.CONFIG:
        return '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å';
      case ErrorTypes.ENCODING:
        return '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞ –Ω–∞ UTF-8';
      case ErrorTypes.MODULE:
        return '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: npm install';
      default:
        return '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ issue';
    }
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
function handleFileError(error, filePath, operation) {
  let suggestion = '';

  switch (error.code) {
    case 'ENOENT':
      suggestion = '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.';
      break;
    case 'EACCES':
      suggestion = '–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É.';
      break;
    case 'EMFILE':
      suggestion = '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤. –ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.';
      break;
    case 'ENOSPC':
      suggestion = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ.';
      break;
    default:
      suggestion = '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ.';
  }

  return new EAPError(
    `–û—à–∏–±–∫–∞ –ø—Ä–∏ ${operation} —Ñ–∞–π–ª–∞: ${error.message}`,
    ErrorTypes.FILE_ACCESS,
    { filePath, operation, code: error.code, suggestion },
    error
  );
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
function handleParsingError(error, filePath, format) {
  let suggestion = '';

  if (format === 'json') {
    suggestion = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å JSON —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞.';
  } else if (format === 'js' || format === 'ts') {
    suggestion = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å JavaScript/TypeScript –∫–æ–¥–∞.';
  } else {
    suggestion = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞.';
  }

  return new EAPError(
    `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ${format}: ${error.message}`,
    ErrorTypes.PARSING,
    { filePath, format, suggestion },
    error
  );
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
function handleConfigError(error, configName, configPath = null) {
  return new EAPError(
    `–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ${configName}: ${error.message}`,
    ErrorTypes.CONFIG,
    {
      configName,
      configPath,
      suggestion:
        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.',
    },
    error
  );
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
 */
function handleAnalysisError(error, moduleName, details = {}) {
  return new EAPError(
    `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤ –º–æ–¥—É–ª–µ ${moduleName}: ${error.message}`,
    ErrorTypes.ANALYSIS,
    {
      moduleName,
      suggestion: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä.',
      ...details,
    },
    error
  );
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
 */
function handleEncodingError(error, filePath) {
  return new EAPError(
    `–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${error.message}`,
    ErrorTypes.ENCODING,
    {
      filePath,
      suggestion: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –≤ UTF-8 –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É.',
    },
    error
  );
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –º–æ–¥—É–ª–µ–π
 */
function handleModuleError(error, moduleName) {
  return new EAPError(
    `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è ${moduleName}: ${error.message}`,
    ErrorTypes.MODULE,
    {
      moduleName,
      suggestion: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ "npm install" –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.',
    },
    error
  );
}

/**
 * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –≤ –ª–æ–≥ —Ñ–∞–π–ª
 */
function logError(error, logFilePath = null) {
  if (!logFilePath) {
    logFilePath = path.join(process.cwd(), 'eap-errors.log');
  }

  try {
    const logEntry = JSON.stringify(error.formatForLog()) + '\n';

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const logDir = path.dirname(logFilePath);
    if (!fs.existsSync(logDir)) {
      fs.mkdirSync(logDir, { recursive: true });
    }

    fs.appendFileSync(logFilePath, logEntry, 'utf8');
  } catch (logError) {
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫—É –≤ –ª–æ–≥:', logError.message);
  }
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞
 */
function setupGlobalErrorHandlers(options = {}) {
  const { logFile = 'eap-errors.log', exitOnUncaught = false, showStackTrace = false } = options;

  // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
  process.on('uncaughtException', error => {
    const eapError = new EAPError(
      `–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`,
      ErrorTypes.SYSTEM,
      { suggestion: '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, —Å–æ–∑–¥–∞–π—Ç–µ issue.' },
      error
    );

    console.error(eapError.formatForConsole());

    if (showStackTrace) {
      console.error('–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:', error.stack);
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    logError(eapError, logFile);

    if (exitOnUncaught) {
      console.log('üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
      process.exit(1);
    }
  });

  // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∫–∞–∑—ã –ø—Ä–æ–º–∏—Å–æ–≤
  process.on('unhandledRejection', (reason, promise) => {
    const eapError = new EAPError(
      `–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–∫–∞–∑ –ø—Ä–æ–º–∏—Å–∞: ${reason}`,
      ErrorTypes.SYSTEM,
      {
        promise: String(promise),
        suggestion: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∫–æ–¥–µ.',
      },
      reason instanceof Error ? reason : new Error(String(reason))
    );

    console.error(eapError.formatForConsole());
    logError(eapError, logFile);
  });

  // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
  process.on('warning', warning => {
    console.warn(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ${warning.message}`);
    if (warning.stack && showStackTrace) {
      console.warn(warning.stack);
    }
  });
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 */
async function safeExecute(operation, errorHandler, context = {}) {
  try {
    return await operation();
  } catch (error) {
    const eapError = errorHandler(error, context);
    console.error(eapError.formatForConsole());
    logError(eapError);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    return null;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –æ–±–µ—Ä—Ç–∫—É –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 */
function withErrorHandling(fn, errorHandler) {
  return async (...args) => {
    try {
      return await fn(...args);
    } catch (error) {
      const eapError = errorHandler(error, { args });
      console.error(eapError.formatForConsole());
      logError(eapError);
      throw eapError;
    }
  };
}

module.exports = {
  ErrorTypes,
  EAPError,
  handleFileError,
  handleParsingError,
  handleConfigError,
  handleAnalysisError,
  handleEncodingError,
  handleModuleError,
  logError,
  setupGlobalErrorHandlers,
  safeExecute,
  withErrorHandling,
};
