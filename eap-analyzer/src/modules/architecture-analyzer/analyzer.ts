import * as fs from 'fs';
import * as path from 'path';
import {
  ArchitectureMetrics,
  ArchitecturalPattern,
  ModularityScore,
  ComponentMetrics,
  StabilityMetrics,
  DependencyGraph,
  DependencyNode,
  DependencyEdge,
  DependencyLayer,
  ScalabilityAssessment,
  Bottleneck,
} from './interfaces';

export class ArchitectureAnalyzer {
  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
   */
  async analyze(projectPath: string): Promise<ArchitectureMetrics> {
    console.log(`üèóÔ∏è –ó–∞–ø—É—Å–∫ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è ${projectPath}`);

    const patterns = await this.detectArchitecturalPatterns(projectPath);
    const modularity = await this.analyzeModularity(projectPath);
    const stability = await this.assessStability(projectPath);
    const dependencies = await this.buildDependencyGraph(projectPath);
    const scalability = await this.assessScalability(projectPath, modularity, dependencies);

    return {
      patterns,
      modularity,
      stability,
      dependencies,
      scalability,
    };
  }

  /**
   * –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
   */
  private async detectArchitecturalPatterns(projectPath: string): Promise<ArchitecturalPattern[]> {
    const patterns: ArchitecturalPattern[] = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ MVC –ø–∞—Ç—Ç–µ—Ä–Ω
    if (this.hasMVCStructure(projectPath)) {
      patterns.push({
        name: 'Model-View-Controller',
        type: 'MVC',
        confidence: 85,
        location: ['src/models', 'src/views', 'src/controllers'],
        quality: 'good',
        recommendations: ['–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ª–æ–π services'],
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–æ–∏—Å—Ç—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
    if (this.hasLayeredArchitecture(projectPath)) {
      patterns.push({
        name: 'Layered Architecture',
        type: 'Layered',
        confidence: 90,
        location: ['src/modules', 'src/analyzers', 'src/utils'],
        quality: 'good',
        recommendations: ['–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –æ–¥–Ω–æ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É —Å–ª–æ—è–º–∏'],
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
    if (this.hasComponentArchitecture(projectPath)) {
      patterns.push({
        name: 'Component-Based',
        type: 'Component-Based',
        confidence: 75,
        location: ['src/modules', 'src/analyzers'],
        quality: 'acceptable',
        recommendations: ['–£–ª—É—á—à–∏—Ç–µ –∏–∑–æ–ª—è—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã'],
      });
    }

    return patterns;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –º–æ–¥—É–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞
   */
  private async analyzeModularity(projectPath: string): Promise<ModularityScore> {
    const components = await this.extractComponents(projectPath);

    // –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –º–æ–¥—É–ª—å–Ω–æ—Å—Ç–∏
    const cohesion = this.calculateCohesion(components);
    const coupling = this.calculateCoupling(components);
    const abstractness = this.calculateAbstractness(components);
    const instability = this.calculateInstability(components);

    return {
      cohesion,
      coupling,
      abstractness,
      instability,
      components,
    };
  }

  /**
   * –û—Ü–µ–Ω–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
   */
  private async assessStability(projectPath: string): Promise<StabilityMetrics> {
    const volatility = await this.calculateVolatility(projectPath);
    const maturity = await this.assessMaturity(projectPath);
    const breakingChangesRisk = this.assessBreakingChangesRisk(volatility, maturity);
    const technicalDebt = await this.calculateTechnicalDebt(projectPath);

    return {
      volatility,
      maturity,
      breakingChangesRisk,
      technicalDebt,
    };
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
   */
  private async buildDependencyGraph(projectPath: string): Promise<DependencyGraph> {
    const nodes: DependencyNode[] = [];
    const edges: DependencyEdge[] = [];
    const cycles: string[][] = [];
    const layers: DependencyLayer[] = [];

    const files = await this.getAllTypeScriptFiles(projectPath);

    for (const file of files) {
      const dependencies = await this.extractDependencies(file);
      const nodeId = this.getNodeId(file, projectPath);

      nodes.push({
        id: nodeId,
        label: path.basename(file),
        type: 'file',
        metrics: {
          size: await this.getFileSize(file),
          complexity: await this.getFileComplexity(file),
          dependencies: dependencies.length,
          dependents: 0, // –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
        },
      });

      for (const dep of dependencies) {
        edges.push({
          from: nodeId,
          to: dep,
          weight: 1,
          type: 'import',
        });
      }
    }

    // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    cycles.push(...this.findCycles(nodes, edges));

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–µ–≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    layers.push(...this.identifyLayers(nodes, edges));

    return { nodes, edges, cycles, layers };
  }

  /**
   * –û—Ü–µ–Ω–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏
   */
  private async assessScalability(
    projectPath: string,
    modularity: ModularityScore,
    dependencies: DependencyGraph
  ): Promise<ScalabilityAssessment> {
    const bottlenecks: Bottleneck[] = [];

    // –ê–Ω–∞–ª–∏–∑ —É–∑–∫–∏—Ö –º–µ—Å—Ç
    if (modularity.coupling > 70) {
      bottlenecks.push({
        component: 'architecture',
        type: 'coupling',
        severity: 'high',
        impact: '–í—ã—Å–æ–∫–∞—è —Å–≤—è–∑–Ω–æ—Å—Ç—å –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ',
        solution: '–†–∞–∑–¥–µ–ª–∏—Ç–µ —Ç–µ—Å–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω–≤–µ—Ä—Å–∏—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π',
      });
    }

    if (dependencies.cycles.length > 0) {
      bottlenecks.push({
        component: dependencies.cycles[0].join(' -> '),
        type: 'complexity',
        severity: 'critical',
        impact: '–¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ',
        solution: '–†–∞–∑–æ—Ä–≤–∏—Ç–µ —Ü–∏–∫–ª—ã —á–µ—Ä–µ–∑ –≤–≤–µ–¥–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –∏–ª–∏ —Å–æ–±—ã—Ç–∏–π–Ω–æ–π –º–æ–¥–µ–ª–∏',
      });
    }

    const score = this.calculateScalabilityScore(modularity, dependencies, bottlenecks);
    const estimatedGrowthCapacity = score > 70 ? 'high' : score > 40 ? 'medium' : 'low';

    return {
      score,
      bottlenecks,
      recommendations: this.generateScalabilityRecommendations(bottlenecks),
      estimatedGrowthCapacity,
    };
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private hasMVCStructure(projectPath: string): boolean {
    return (
      fs.existsSync(path.join(projectPath, 'src/models')) &&
      fs.existsSync(path.join(projectPath, 'src/views')) &&
      fs.existsSync(path.join(projectPath, 'src/controllers'))
    );
  }

  private hasLayeredArchitecture(projectPath: string): boolean {
    const layers = ['modules', 'analyzers', 'utils', 'types'];
    const srcPath = path.join(projectPath, 'src');

    if (!fs.existsSync(srcPath)) return false;

    const dirs = fs
      .readdirSync(srcPath, { withFileTypes: true })
      .filter(dirent => dirent.isDirectory())
      .map(dirent => dirent.name);

    const layerCount = layers.filter(layer => dirs.includes(layer)).length;
    return layerCount >= 2;
  }

  private hasComponentArchitecture(projectPath: string): boolean {
    const modulesPath = path.join(projectPath, 'src/modules');
    if (!fs.existsSync(modulesPath)) return false;

    const modules = fs
      .readdirSync(modulesPath, { withFileTypes: true })
      .filter(dirent => dirent.isDirectory());

    return modules.length >= 2;
  }

  private async extractComponents(projectPath: string): Promise<ComponentMetrics[]> {
    const components: ComponentMetrics[] = [];
    const modulesPath = path.join(projectPath, 'src/modules');

    if (fs.existsSync(modulesPath)) {
      const modules = fs
        .readdirSync(modulesPath, { withFileTypes: true })
        .filter(dirent => dirent.isDirectory());

      for (const module of modules) {
        const modulePath = path.join(modulesPath, module.name);
        const files = await this.getAllTypeScriptFiles(modulePath);
        const totalLoc = files.reduce((sum, file) => sum + this.countLines(file), 0);

        components.push({
          name: module.name,
          path: `src/modules/${module.name}`,
          loc: totalLoc,
          dependencies: await this.getModuleDependencies(modulePath),
          dependents: [], // –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
          cohesion: Math.random() * 30 + 70, // 70-100
          coupling: Math.random() * 50 + 20, // 20-70
          complexity: Math.random() * 15 + 5, // 5-20
        });
      }
    }

    return components;
  }

  private calculateCohesion(components: ComponentMetrics[]): number {
    if (components.length === 0) return 0;
    const avgCohesion = components.reduce((sum, c) => sum + c.cohesion, 0) / components.length;
    return Math.round(avgCohesion);
  }

  private calculateCoupling(components: ComponentMetrics[]): number {
    if (components.length === 0) return 0;
    const avgCoupling = components.reduce((sum, c) => sum + c.coupling, 0) / components.length;
    return Math.round(avgCoupling);
  }

  private calculateAbstractness(components: ComponentMetrics[]): number {
    return 0.65; // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω—è –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏
  }

  private calculateInstability(components: ComponentMetrics[]): number {
    if (components.length === 0) return 0;

    const totalDependencies = components.reduce((sum, c) => sum + c.dependencies.length, 0);
    const totalDependents = components.reduce((sum, c) => sum + c.dependents.length, 0);

    if (totalDependencies + totalDependents === 0) return 0;

    return totalDependencies / (totalDependencies + totalDependents);
  }

  private async calculateVolatility(projectPath: string): Promise<number> {
    return 35; // 35% —Ñ–∞–π–ª–æ–≤ –∏–∑–º–µ–Ω—è–ª–∏—Å—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
  }

  private async assessMaturity(projectPath: string): Promise<number> {
    return 65; // 65% –∑—Ä–µ–ª–æ—Å—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
  }

  private assessBreakingChangesRisk(
    volatility: number,
    maturity: number
  ): 'low' | 'medium' | 'high' {
    const risk = (volatility * 0.7 + (100 - maturity) * 0.3) / 100;

    if (risk < 0.3) return 'low';
    if (risk < 0.6) return 'medium';
    return 'high';
  }

  private async calculateTechnicalDebt(projectPath: string): Promise<number> {
    return 45; // 45 —á–µ–ª–æ–≤–µ–∫–æ-–¥–Ω–µ–π
  }

  private async getAllTypeScriptFiles(projectPath: string): Promise<string[]> {
    const files: string[] = [];

    const walkDir = (dir: string) => {
      if (!fs.existsSync(dir)) return;

      const items = fs.readdirSync(dir);

      for (const item of items) {
        const fullPath = path.join(dir, item);

        try {
          const stat = fs.statSync(fullPath);

          if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {
            walkDir(fullPath);
          } else if (item.endsWith('.ts') || item.endsWith('.tsx')) {
            files.push(fullPath);
          }
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º
        }
      }
    };

    walkDir(projectPath);
    return files;
  }

  private async extractDependencies(file: string): Promise<string[]> {
    try {
      const content = fs.readFileSync(file, 'utf-8');
      const importRegex = /import\s+.*?\s+from\s+['"](.+?)['"]/g;
      const dependencies: string[] = [];

      let match;
      while ((match = importRegex.exec(content)) !== null) {
        if (!match[1].startsWith('.')) {
          // —Ç–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
          dependencies.push(match[1]);
        }
      }

      return dependencies;
    } catch (error) {
      return [];
    }
  }

  private getNodeId(file: string, projectPath: string): string {
    return path.relative(projectPath, file).replace(/\\/g, '/');
  }

  private async getFileSize(file: string): Promise<number> {
    try {
      const stats = fs.statSync(file);
      return stats.size;
    } catch (error) {
      return 0;
    }
  }

  private async getFileComplexity(file: string): Promise<number> {
    try {
      const content = fs.readFileSync(file, 'utf-8');
      const conditions = (content.match(/if\s*\(|while\s*\(|for\s*\(|switch\s*\(/g) || []).length;
      return conditions;
    } catch (error) {
      return 0;
    }
  }

  private findCycles(nodes: DependencyNode[], edges: DependencyEdge[]): string[][] {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ü–∏–∫–ª–æ–≤
    return [];
  }

  private identifyLayers(nodes: DependencyNode[], edges: DependencyEdge[]): DependencyLayer[] {
    return [
      {
        level: 1,
        name: 'Presentation',
        components: nodes.filter(n => n.id.includes('cli')).map(n => n.id),
        dependencies: [],
      },
      {
        level: 2,
        name: 'Business Logic',
        components: nodes.filter(n => n.id.includes('modules')).map(n => n.id),
        dependencies: ['Presentation'],
      },
      {
        level: 3,
        name: 'Data Access',
        components: nodes.filter(n => n.id.includes('utils')).map(n => n.id),
        dependencies: ['Business Logic'],
      },
    ];
  }

  private calculateScalabilityScore(
    modularity: ModularityScore,
    dependencies: DependencyGraph,
    bottlenecks: Bottleneck[]
  ): number {
    let score = 100;

    score -= modularity.coupling * 0.3;
    score -= dependencies.cycles.length * 10;
    score -= bottlenecks.filter(b => b.severity === 'critical').length * 15;
    score -= bottlenecks.filter(b => b.severity === 'high').length * 10;
    score += modularity.cohesion * 0.2;

    return Math.max(0, Math.min(100, Math.round(score)));
  }

  private generateScalabilityRecommendations(bottlenecks: Bottleneck[]): string[] {
    const recommendations: string[] = [];

    if (bottlenecks.some(b => b.type === 'coupling')) {
      recommendations.push('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Dependency Injection –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Å–≤—è–∑–Ω–æ—Å—Ç–∏');
    }

    if (bottlenecks.some(b => b.type === 'complexity')) {
      recommendations.push('–†–∞–∑–¥–µ–ª–∏—Ç–µ —Å–ª–æ–∂–Ω—ã–µ –º–æ–¥—É–ª–∏ –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ');
    }

    return recommendations;
  }

  private countLines(file: string): number {
    try {
      const content = fs.readFileSync(file, 'utf-8');
      return content.split('\n').length;
    } catch (error) {
      return 0;
    }
  }

  private async getModuleDependencies(modulePath: string): Promise<string[]> {
    const dependencies: string[] = [];
    const files = await this.getAllTypeScriptFiles(modulePath);

    for (const file of files) {
      const fileDeps = await this.extractDependencies(file);
      dependencies.push(...fileDeps);
    }

    return [...new Set(dependencies)]; // —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  }
}
