/**
 * –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∏ ROI
 */

import { BaseAnalyzer } from '../../core/analyzer.js';
import { CheckContext } from '../../core/types.js';
import * as fs from 'fs';
import * as path from 'path';
import {
  TechnicalDebtAssessment,
  DebtMetrics,
  DebtCategory,
  DebtHeatmap,
  HeatmapEntry,
  DebtTimeline,
  DebtSnapshot,
  DebtProjection,
  PayoffStrategy,
  RefactoringPhase
} from './interfaces.js';

export class TechnicalDebtAnalyzer extends BaseAnalyzer {
  private readonly WORKING_HOURS_PER_DAY = 8;
  private readonly HOURLY_RATE = 50; // –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ —á–∞—Å

  getName(): string {
    return 'technical-debt';
  }

  get metadata() {
    return {
      name: 'Technical Debt Analyzer',
      version: '1.0.0',
      description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞ –∏ ROI —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞',
      supportedFileTypes: ['.ts', '.js', '.tsx', '.jsx'],
    };
  }

  async analyze(projectPath: string): Promise<any> {
    console.log('üí∞ –ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞...');

    const files = await this.getCodeFiles(projectPath);
    const debtData = {
      totalDebt: 0,
      monthlyInterest: 0,
      categories: [] as any[],
      hotspots: [] as any[],
      payoffPlan: [] as any[],
      roiAnalysis: {} as any,
    };

    // –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ–ª–≥–∞
    debtData.categories = await this.analyzeDebtCategories(files);

    // –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω
    debtData.hotspots = await this.findDebtHotspots(files);

    // –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –¥–æ–ª–≥–∞
    debtData.totalDebt = this.calculateTotalDebt(debtData.categories);
    debtData.monthlyInterest = this.calculateMonthlyInterest(debtData.totalDebt);

    // –ü–ª–∞–Ω –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–∞
    debtData.payoffPlan = this.generatePayoffPlan(debtData.categories);

    // ROI –∞–Ω–∞–ª–∏–∑
    debtData.roiAnalysis = this.calculateROI(debtData.categories, debtData.totalDebt);

    return {
      success: true,
      data: debtData,
      metadata: {
        analyzer: this.getName(),
        timestamp: new Date(),
        duration: 0,
        filesAnalyzed: files.length,
      },
    };
  }

  /**
   * –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞
   */
  private async categorizeDebt(projectPath: string): Promise<DebtCategory[]> {
    const categories: DebtCategory[] = [];

    // –ù–∞–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–ª–≥ (—Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è)
    categories.push({
      type: 'intentional',
      name: '–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥',
      description: '–°–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
      amount: 15,
      priority: 'medium',
      items: [
        {
          id: 'debt-001',
          file: 'src/modules/ai-insights/ai-insights-engine.ts',
          type: 'simplified-implementation',
          description: '–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ML –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã—Ö',
          effort: 40,
          impact: 6,
          risk: 4,
        },
      ],
    });

    // –ù–µ–Ω–∞–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–ª–≥ (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∑–Ω–∞–Ω–∏–π)
    categories.push({
      type: 'unintentional',
      name: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –¥–æ–ª–≥',
      description: '–ü—Ä–æ–±–ª–µ–º—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –æ–ø—ã—Ç–∞',
      amount: 25,
      priority: 'high',
      items: [
        {
          id: 'debt-002',
          file: 'src/modules/structure-analyzer',
          type: 'poor-separation',
          description: '–°–º–µ—à–µ–Ω–∏–µ JavaScript –∏ TypeScript –º–æ–¥—É–ª–µ–π',
          effort: 24,
          impact: 8,
          risk: 7,
        },
        {
          id: 'debt-003',
          file: 'src/checkers',
          type: 'duplication',
          description: '–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏',
          effort: 16,
          impact: 5,
          risk: 5,
        },
      ],
    });

    // –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥ (–±—ã—Å—Ç—Ä—ã–µ —Ä–µ—à–µ–Ω–∏—è)
    categories.push({
      type: 'tactical',
      name: '–ö–æ–¥-–¥–æ–ª–≥',
      description: '–ë—ã—Å—Ç—Ä—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ —Ö–∞–∫–∏',
      amount: 18,
      priority: 'medium',
      items: [
        {
          id: 'debt-004',
          file: 'src/utils',
          type: 'missing-tests',
          description: '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—Ç–∏–ª–∏—Ç',
          effort: 32,
          impact: 7,
          risk: 8,
        },
        {
          id: 'debt-005',
          file: 'src/cli.ts',
          type: 'poor-error-handling',
          description: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ CLI',
          effort: 8,
          impact: 6,
          risk: 6,
        },
      ],
    });

    return categories;
  }

  /**
   * –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞
   */
  private calculateTotalDebt(categories: DebtCategory[]): DebtMetrics {
    const totalDays = categories.reduce((sum, cat) => sum + cat.amount, 0);
    const totalHours = totalDays * this.WORKING_HOURS_PER_DAY;
    const totalCost = totalHours * this.HOURLY_RATE;

    // –†–∞—Å—á–µ—Ç "–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤" - —Ä–æ—Å—Ç –¥–æ–ª–≥–∞ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
    const monthlyInterest = totalDays * 0.05; // 5% –≤ –º–µ—Å—è—Ü

    // –¢–æ—á–∫–∞ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ - –∫–æ–≥–¥–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –æ–∫—É–ø–∏—Ç—Å—è
    const breakEvenPoint = totalDays * 1.5; // –æ–±—ã—á–Ω–æ –≤ 1.5 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

    return {
      totalDays,
      totalCost,
      monthlyInterest,
      breakEvenPoint,
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞
   */
  private async generateHeatmap(
    projectPath: string,
    categories: DebtCategory[]
  ): Promise<DebtHeatmap> {
    const files: HeatmapEntry[] = [];
    const modules: HeatmapEntry[] = [];

    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ñ–∞–π–ª–∞–º
    const fileDebtMap = new Map<string, number>();

    categories.forEach(cat => {
      cat.items.forEach(item => {
        const current = fileDebtMap.get(item.file) || 0;
        fileDebtMap.set(item.file, current + item.effort);
      });
    });

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∑–∞–ø–∏—Å–∏ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
    const maxDebt = Math.max(...Array.from(fileDebtMap.values()), 1);

    fileDebtMap.forEach((debt, file) => {
      const score = (debt / maxDebt) * 100;
      files.push({
        path: file,
        debtScore: score,
        color: this.getHeatmapColor(score),
        issues: categories.flatMap(c => c.items).filter(i => i.file === file).length,
      });
    });

    // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ –º–æ–¥—É–ª—è–º
    const moduleDebtMap = new Map<string, number>();

    files.forEach(file => {
      const module = this.extractModule(file.path);
      const current = moduleDebtMap.get(module) || 0;
      moduleDebtMap.set(module, current + file.debtScore);
    });

    moduleDebtMap.forEach((debt, module) => {
      const filesInModule = files.filter(f => this.extractModule(f.path) === module);
      const avgScore = filesInModule.length > 0 ? debt / filesInModule.length : 0;
      modules.push({
        path: module,
        debtScore: avgScore,
        color: this.getHeatmapColor(avgScore),
        issues: filesInModule.reduce((sum, f) => sum + f.issues, 0),
      });
    });

    return { files, modules, maxDebt };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–∏ –¥–æ–ª–≥–∞
   */
  private async analyzeTimeline(projectPath: string): Promise<DebtTimeline> {
    // –°–∏–º—É–ª—è—Ü–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    const history: DebtSnapshot[] = [
      { date: new Date('2025-06-01'), totalDebt: 35, newDebt: 35, paidDebt: 0 },
      { date: new Date('2025-07-01'), totalDebt: 42, newDebt: 12, paidDebt: 5 },
      { date: new Date('2025-08-01'), totalDebt: 48, newDebt: 10, paidDebt: 4 },
      { date: new Date('2025-09-01'), totalDebt: 45, newDebt: 5, paidDebt: 8 },
    ];

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
    const lastMonth = history[history.length - 1].totalDebt;
    const previousMonth = history[history.length - 2].totalDebt;
    const trend =
      lastMonth > previousMonth
        ? 'decreasing'
        : lastMonth < previousMonth
          ? 'increasing'
          : 'stable';

    // –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±—É–¥—É—â–µ–µ
    const projection: DebtProjection = {
      months: [1, 2, 3, 6, 12],
      pessimistic: [50, 55, 62, 78, 110],
      realistic: [46, 47, 48, 52, 60],
      optimistic: [43, 38, 32, 20, 10],
    };

    return { history, trend, projection };
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–∞
   */
  private createPayoffStrategy(categories: DebtCategory[]): PayoffStrategy {
    const allItems = categories.flatMap(c => c.items);

    // –ë—ã—Å—Ç—Ä—ã–µ –ø–æ–±–µ–¥—ã - –Ω–∏–∑–∫–∏–µ —É—Å–∏–ª–∏—è, —Ö–æ—Ä–æ—à–µ–µ –≤–ª–∏—è–Ω–∏–µ
    const quickWins = allItems
      .filter(i => i.effort <= 8 && i.impact >= 5)
      .sort((a, b) => b.impact / b.effort - a.impact / a.effort)
      .slice(0, 3);

    // –í—ã—Å–æ–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—Ç–¥–∞—á–∞
    const highImpact = allItems
      .filter(i => i.impact >= 7)
      .sort((a, b) => b.impact - a.impact)
      .slice(0, 3);

    // –°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏
    const riskMitigation = allItems
      .filter(i => i.risk >= 7)
      .sort((a, b) => b.risk - a.risk)
      .slice(0, 3);

    // –§–∞–∑—ã —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
    const phases: RefactoringPhase[] = [
      {
        phase: 1,
        name: '–ë—ã—Å—Ç—Ä—ã–µ –ø–æ–±–µ–¥—ã',
        duration: 5,
        items: quickWins.map(i => i.id),
        effort: quickWins.reduce((sum, i) => sum + i.effort, 0),
        expectedImprovement: 15,
      },
      {
        phase: 2,
        name: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏',
        duration: 10,
        items: riskMitigation.map(i => i.id),
        effort: riskMitigation.reduce((sum, i) => sum + i.effort, 0),
        expectedImprovement: 25,
      },
      {
        phase: 3,
        name: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è',
        duration: 20,
        items: highImpact.map(i => i.id),
        effort: highImpact.reduce((sum, i) => sum + i.effort, 0),
        expectedImprovement: 35,
      },
    ];

    // –†–∞—Å—á–µ—Ç ROI
    const totalEffort = phases.reduce((sum, p) => sum + p.effort, 0);
    const totalImprovement = phases.reduce((sum, p) => sum + p.expectedImprovement, 0);
    const estimatedROI = totalEffort > 0 ? (totalImprovement / totalEffort) * 100 : 0;

    return {
      quickWins,
      highImpact,
      riskMitigation,
      phases,
      estimatedROI,
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
   */
  private getHeatmapColor(score: number): string {
    if (score >= 80) return '#d32f2f'; // –∫—Ä–∞—Å–Ω—ã–π - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π
    if (score >= 60) return '#f57c00'; // –æ—Ä–∞–Ω–∂–µ–≤—ã–π - –≤—ã—Å–æ–∫–∏–π
    if (score >= 40) return '#fbc02d'; // –∂–µ–ª—Ç—ã–π - —Å—Ä–µ–¥–Ω–∏–π
    if (score >= 20) return '#689f38'; // —Å–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π - –Ω–∏–∑–∫–∏–π
    return '#388e3c'; // –∑–µ–ª–µ–Ω—ã–π - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–æ–¥—É–ª—è –∏–∑ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞
   */
  private extractModule(filePath: string): string {
    const parts = filePath.split('/');
    if (parts.includes('modules')) {
      const moduleIndex = parts.indexOf('modules');
      return parts.slice(0, moduleIndex + 2).join('/');
    }
    return parts[0];
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –¥–æ–ª–≥–µ
   */
  generateReport(assessment: TechnicalDebtAssessment): string {
    const { totalDebt, categories, timeline, payoffPlan } = assessment;

    return `
# üí∞ –û—Ç—á–µ—Ç –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –¥–æ–ª–≥–µ

## üìä –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
- **–û–±—â–∏–π –¥–æ–ª–≥:** ${totalDebt.totalDays} —á–µ–ª–æ–≤–µ–∫–æ-–¥–Ω–µ–π
- **–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:** $${totalDebt.totalCost.toLocaleString()}
- **–†–æ—Å—Ç –¥–æ–ª–≥–∞:** ${totalDebt.monthlyInterest.toFixed(1)} –¥–Ω–µ–π/–º–µ—Å—è—Ü
- **–¢–æ—á–∫–∞ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏:** ${totalDebt.breakEvenPoint} –¥–Ω–µ–π

## üìà –¢—Ä–µ–Ω–¥
- **–¢–µ–∫—É—â–∏–π —Ç—Ä–µ–Ω–¥:** ${timeline.trend}
- **–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≥–æ–¥ (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π):** ${timeline.projection.realistic[4]} –¥–Ω–µ–π

## üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–≥–∞—à–µ–Ω–∏—è

### –§–∞–∑–∞ 1: –ë—ã—Å—Ç—Ä—ã–µ –ø–æ–±–µ–¥—ã (${payoffPlan.phases[0].duration} –¥–Ω–µ–π)
${payoffPlan.quickWins.map(i => `- ${i.description} (${i.effort}—á)`).join('\n')}

### –§–∞–∑–∞ 2: –°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤ (${payoffPlan.phases[1].duration} –¥–Ω–µ–π)
${payoffPlan.riskMitigation.map(i => `- ${i.description} (${i.effort}—á)`).join('\n')}

### –§–∞–∑–∞ 3: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è (${payoffPlan.phases[2].duration} –¥–Ω–µ–π)
${payoffPlan.highImpact.map(i => `- ${i.description} (${i.effort}—á)`).join('\n')}

## üí° ROI
**–û–∂–∏–¥–∞–µ–º–∞—è –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å:** ${payoffPlan.estimatedROI.toFixed(0)}%
    `;
  }
}
