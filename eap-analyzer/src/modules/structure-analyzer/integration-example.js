/**
 * –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –≠–ê–ü
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã
 */

import StructureAnalyzer from './index.js';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * –ö–ª–∞—Å—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≠–ê–ü
 */
class EAPStructureIntegration {
  constructor() {
    this.analyzer = new StructureAnalyzer();
  }

  /**
   * –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç—á–µ—Ç–∞ –∏ –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã
   */
  async analyzeProject(projectPath, outputPath = null) {
    console.log('üîç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...');

    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
      const fullReport = await this.analyzer.generateFullReport(projectPath, {
        includeAdvanced: true,
        enableLearning: true,
        generateRoadmap: true,
      });

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
      const finalReport = {
        metadata: {
          analyzedAt: new Date().toISOString(),
          projectPath,
          analyzer: 'EAP Structure Analyzer',
          version: fullReport.roadmap.metadata.analysisVersion,
        },

        // –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        analysis: {
          score: fullReport.verdict.score,
          grade: fullReport.verdict.grade,
          totalFiles: fullReport.summary.totalFiles,
          totalLines: fullReport.summary.totalLines,
          issues: fullReport.summary.issues,
          strengths: fullReport.summary.strengths,
        },

        // –í–µ—Ä–¥–∏–∫—Ç –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        verdict: {
          ...fullReport.verdict,
          summary: this.generateVerdictSummary(fullReport),
        },

        // –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        details: {
          basic: fullReport.basic,
          advanced: fullReport.advanced,
          recommendations: fullReport.recommendations,
        },

        // –î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
        roadmap: {
          necessity: fullReport.summary.refactoringNecessity,
          content: fullReport.roadmap.content,
          tasks: fullReport.summary.roadmap.tasks,
          phases: fullReport.summary.roadmap.phases,
          effort: fullReport.summary.roadmap.totalEffort,
          roi: fullReport.verdict.roi,
        },

        // –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
        actionPlan: {
          immediate: fullReport.verdict.nextSteps,
          monitoring: this.generateMonitoringPlan(fullReport),
          success_criteria: this.generateSuccessCriteria(fullReport),
        },
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å
      if (outputPath) {
        await this.saveReport(finalReport, outputPath);
      }

      // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—é–º–µ –≤ –∫–æ–Ω—Å–æ–ª—å
      this.printSummary(finalReport);

      return finalReport;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ–µ–∫—Ç–∞:', error.message);
      throw error;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –≤–µ—Ä–¥–∏–∫—Ç–∞
   */
  generateVerdictSummary(fullReport) {
    const { score, grade, criticalIssues, necessity } = fullReport.verdict;

    let summary = `–ü—Ä–æ–µ–∫—Ç –ø–æ–ª—É—á–∏–ª –æ—Ü–µ–Ω–∫—É ${grade} (${score}/100 –±–∞–ª–ª–æ–≤). `;

    if (criticalIssues > 0) {
      summary += `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${criticalIssues} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º. `;
    }

    summary += `–ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞: ${necessity}. `;

    if (fullReport.verdict.roi.roi > 50) {
      summary += `–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –≤—ã—Å–æ–∫–æ —Ä–µ–Ω—Ç–∞–±–µ–ª–µ–Ω (ROI: ${fullReport.verdict.roi.roi}%). `;
    }

    summary += `${fullReport.verdict.recommendation}`;

    return summary;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  generateMonitoringPlan(fullReport) {
    const plan = [];

    plan.push({
      metric: '–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã',
      current: fullReport.verdict.score,
      target: Math.min(95, fullReport.verdict.score + 20),
      frequency: '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ',
    });

    if (fullReport.verdict.criticalIssues > 0) {
      plan.push({
        metric: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã',
        current: fullReport.verdict.criticalIssues,
        target: 0,
        frequency: '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ',
      });
    }

    if (fullReport.analysis.technicalDebt > 0) {
      plan.push({
        metric: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥',
        current: fullReport.summary.technicalDebt,
        target: Math.max(0, fullReport.summary.technicalDebt * 0.5),
        frequency: '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ',
      });
    }

    plan.push({
      metric: '–ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏',
      current: '—Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–∏—è',
      target: '80%+',
      frequency: '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ',
    });

    return plan;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞
   */
  generateSuccessCriteria(fullReport) {
    const criteria = [];

    criteria.push(`–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ A- (80+ –±–∞–ª–ª–æ–≤)`);

    if (fullReport.verdict.criticalIssues > 0) {
      criteria.push('–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º');
    }

    criteria.push('–°–Ω–∏–∂–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞ –Ω–∞ 50%');
    criteria.push('–£–ª—É—á—à–µ–Ω–∏–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º–æ—Å—Ç–∏ –∫–æ–¥–∞ –¥–æ 80+');
    criteria.push('–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
    criteria.push('–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∞–º–∏ 80%+');

    return criteria;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
   */
  async saveReport(report, outputPath) {
    try {
      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      await fs.mkdir(path.dirname(outputPath), { recursive: true });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –æ—Ç—á–µ—Ç
      await fs.writeFile(outputPath, JSON.stringify(report, null, 2), 'utf8');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º Markdown –¥–æ—Ä–æ–∂–Ω—É—é –∫–∞—Ä—Ç—É
      const markdownPath = outputPath.replace('.json', '-roadmap.md');
      await fs.writeFile(markdownPath, report.roadmap.content, 'utf8');

      console.log(`üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${outputPath}`);
      console.log(`üìã –î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${markdownPath}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:', error.message);
    }
  }

  /**
   * –í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –≤ –∫–æ–Ω—Å–æ–ª—å
   */
  printSummary(report) {
    console.log('\n' + '='.repeat(60));
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –°–¢–†–£–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê');
    console.log('='.repeat(60));

    console.log(`\nüéØ –û–¶–ï–ù–ö–ê: ${report.analysis.grade} (${report.analysis.score}/100)`);
    console.log(`üìÅ –§–∞–π–ª–æ–≤: ${report.analysis.totalFiles}`);
    console.log(`üìù –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: ${report.analysis.totalLines.toLocaleString()}`);

    if (report.verdict.criticalIssues > 0) {
      console.log(`\n‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´: ${report.verdict.criticalIssues}`);
    }

    console.log(`\nüîß –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–¨ –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê: ${report.roadmap.necessity}`);
    console.log(`‚è±Ô∏è  –û–ë–©–ò–ï –ó–ê–¢–†–ê–¢–´: ${report.roadmap.effort} —á–∞—Å–æ–≤`);
    console.log(
      `üí∞ ROI: ${report.roadmap.roi.roi}% (–æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å: ${report.roadmap.roi.paybackPeriod} –º–µ—Å.)`
    );

    console.log('\nüìã –î–û–†–û–ñ–ù–ê–Ø –ö–ê–†–¢–ê:');
    console.log(`   ‚Ä¢ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ (0-2 –Ω–µ–¥.): ${report.roadmap.phases.immediate.length} –∑–∞–¥–∞—á`);
    console.log(`   ‚Ä¢ –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ (2-4 –Ω–µ–¥.): ${report.roadmap.phases.shortTerm.length} –∑–∞–¥–∞—á`);
    console.log(`   ‚Ä¢ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ (4-8 –Ω–µ–¥.): ${report.roadmap.phases.longTerm.length} –∑–∞–¥–∞—á`);

    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:');
    console.log(`   ${report.verdict.recommendation}`);

    console.log('\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
    report.actionPlan.immediate.forEach((step, index) => {
      console.log(`   ${index + 1}. ${step}`);
    });

    console.log('\n' + '='.repeat(60));
  }
}

/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 */
async function exampleUsage() {
  const integration = new EAPStructureIntegration();

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç
  const projectPath = process.cwd();
  const outputPath = path.join(projectPath, 'reports', 'structure-analysis.json');

  try {
    const report = await integration.analyzeProject(projectPath, outputPath);

    console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìä –û—Ü–µ–Ω–∫–∞: ${report.analysis.grade}`);
    console.log(`üîß –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: ${report.roadmap.necessity}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { EAPStructureIntegration, exampleUsage };

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  exampleUsage();
}
