/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –±–∞–≥–∏ –≤ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
 */
import * as crypto from 'crypto';
import * as path from 'path';

export interface DuplicateBlock {
  hash: string;
  content: string;
  lines: number;
  startLine: number;
  endLine: number;
  files: Array<{
    path: string;
    startLine: number;
    endLine: number;
  }>;
}

export interface DuplicationResult {
  percentage: number;
  duplicatedLines: number;
  totalLines: number;
  duplicateBlocks: DuplicateBlock[];
  uniqueLines: number;
  analysisMetadata: {
    analyzedFiles: number;
    skippedFiles: number;
    generatedFiles: number;
  };
}

export interface CodeBlock {
  hash: string;
  content: string;
  lines: number;
  startLine: number;
  endLine: number;
  filePath: string;
  normalized: string;
}

export class ImprovedDuplicationDetector {
  private readonly MIN_BLOCK_SIZE = 6; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –¥–ª—è –¥—É–±–ª–∏–∫–∞—Ç–∞
  private readonly MAX_LINE_LENGTH = 200; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
  private readonly IGNORE_PATTERNS = [
    /^import\s+/, // –ò–º–ø–æ—Ä—Ç—ã
    /^export\s+/, // –≠–∫—Å–ø–æ—Ä—Ç—ã
    /^\s*\/\//, // –û–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    /^\s*[\*\/]/, // –ë–ª–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    /^[\s\{\}\(\)\[\]]+$/, // –¢–æ–ª—å–∫–æ —Å–∫–æ–±–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã
    /^\s*console\.(log|error|warn)/, // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    /^\s*(const|let|var)\s+\w+\s*=\s*require\s*\(/, // CommonJS –∏–º–ø–æ—Ä—Ç—ã
  ];

  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  private readonly GENERATED_FILE_PATTERNS = [
    /node_modules/,
    /dist\//,
    /build\//,
    /\.next\//,
    /\.nuxt\//,
    /\.svelte-kit\//,
    /coverage\//,
    /\.min\.js$/,
    /index-[a-zA-Z0-9_-]{8,}\.js$/, // Webpack/Vite bundles
    /chunk-[a-zA-Z0-9]+\.js$/,
    /vendor\.[a-zA-Z0-9]+\.js$/,
    /runtime\.[a-zA-Z0-9]+\.js$/,
    /polyfills\.[a-zA-Z0-9]+\.js$/,
    /\.d\.ts$/, // TypeScript –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏
  ];

  async calculateDuplication(
    files: Array<{ path: string; content: string; lines: number }>
  ): Promise<DuplicationResult> {
    console.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è ${files.length} —Ñ–∞–π–ª–æ–≤...`);

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
    const sourceFiles = files.filter(f => this.isSourceFile(f.path));
    const skippedFiles = files.length - sourceFiles.length;

    console.log(
      `üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${sourceFiles.length} –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–ø—Ä–æ–ø—É—â–µ–Ω–æ ${skippedFiles} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)`
    );

    if (sourceFiles.length === 0) {
      return this.getEmptyResult(files.length, skippedFiles);
    }

    const hashMap = new Map<string, CodeBlock[]>();
    let totalLines = 0;
    let duplicatedLines = 0;
    let uniqueBlocks = 0;

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    for (const file of sourceFiles) {
      const blocks = this.extractCodeBlocks(file.path, file.content);
      totalLines += this.countMeaningfulLines(file.content);

      for (const block of blocks) {
        const hash = block.hash;

        if (hashMap.has(hash)) {
          // –ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç
          const existingBlocks = hashMap.get(hash)!;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç–µ–π —Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞
          const isDuplicate = this.isRealDuplicate(block, existingBlocks);

          if (isDuplicate) {
            duplicatedLines += block.lines;
            existingBlocks.push(block);
          }
        } else {
          hashMap.set(hash, [block]);
          uniqueBlocks++;
        }
      }
    }

    // –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ (–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–µ –±–æ–ª—å—à–µ 100%)
    const percentage =
      totalLines > 0
        ? Math.min(100, Math.round((duplicatedLines / totalLines) * 100 * 100) / 100)
        : 0;

    const duplicateBlocks = this.extractDuplicateBlocks(hashMap);

    console.log(
      `‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: ${percentage}% –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è (${duplicatedLines}/${totalLines} —Å—Ç—Ä–æ–∫)`
    );

    return {
      percentage,
      duplicatedLines,
      totalLines,
      uniqueLines: totalLines - duplicatedLines,
      duplicateBlocks,
      analysisMetadata: {
        analyzedFiles: sourceFiles.length,
        skippedFiles,
        generatedFiles: files.filter(f => this.isGeneratedFile(f.path)).length,
      },
    };
  }

  private isSourceFile(filePath: string): boolean {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    if (this.isGeneratedFile(filePath)) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    const ext = path.extname(filePath).toLowerCase();
    const sourceExtensions = ['.js', '.ts', '.jsx', '.tsx', '.vue', '.svelte', '.mjs', '.cjs'];

    return sourceExtensions.includes(ext);
  }

  private isGeneratedFile(filePath: string): boolean {
    const normalizedPath = filePath.replace(/\\/g, '/');
    return this.GENERATED_FILE_PATTERNS.some(pattern => pattern.test(normalizedPath));
  }

  private extractCodeBlocks(filePath: string, content: string): CodeBlock[] {
    const lines = content.split('\n');
    const blocks: CodeBlock[] = [];

    for (let i = 0; i <= lines.length - this.MIN_BLOCK_SIZE; i++) {
      const blockLines = lines.slice(i, i + this.MIN_BLOCK_SIZE);

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫–∏ —Å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
      if (this.shouldIgnoreBlock(blockLines)) {
        continue;
      }

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫–∏ —Å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ (–≤–µ—Ä–æ—è—Ç–Ω–æ, –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥)
      if (blockLines.some(line => line.length > this.MAX_LINE_LENGTH)) {
        continue;
      }

      const blockContent = blockLines.join('\n');
      const normalized = this.normalizeCode(blockContent);

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–ª–∏ –ø—É—Å—Ç—ã–º–∏ –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
      if (normalized.trim().length < 20) {
        continue;
      }

      const hash = this.hashBlock(normalized);

      blocks.push({
        hash,
        content: blockContent,
        lines: this.MIN_BLOCK_SIZE,
        startLine: i + 1,
        endLine: i + this.MIN_BLOCK_SIZE,
        filePath,
        normalized,
      });
    }

    return blocks;
  }

  private shouldIgnoreBlock(lines: string[]): boolean {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–ª–æ–∫–∏, —Å–æ—Å—Ç–æ—è—â–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–∑ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    const meaningfulLines = lines.filter(line => {
      const trimmed = line.trim();

      // –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      if (trimmed.length === 0) return false;

      // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
      if (this.IGNORE_PATTERNS.some(pattern => pattern.test(line))) return false;

      return true;
    });

    // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã –∑–Ω–∞—á–∏–º—ã—Ö —Å—Ç—Ä–æ–∫, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–ª–æ–∫
    return meaningfulLines.length < lines.length / 2;
  }

  private normalizeCode(code: string): string {
    return (
      code
        // –£–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        .replace(/\/\*[\s\S]*?\*\//g, '')
        .replace(/\/\/.*$/gm, '')
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
        .replace(/\s+/g, ' ')
        // –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏
        .replace(/['"`]/g, '"')
        // –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫
        .replace(/;\s*$/gm, '')
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        .trim()
        // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–∏–π –≤ –∏–º–µ–Ω–∞—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        .toLowerCase()
    );
  }

  private hashBlock(normalizedContent: string): string {
    return crypto.createHash('md5').update(normalizedContent, 'utf8').digest('hex');
  }

  private isRealDuplicate(newBlock: CodeBlock, existingBlocks: CodeBlock[]): boolean {
    return existingBlocks.some(existing => {
      // –†–∞–∑–Ω—ã–µ —Ñ–∞–π–ª—ã - —ç—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç
      if (existing.filePath !== newBlock.filePath) {
        return true;
      }

      // –û–¥–∏–Ω —Ñ–∞–π–ª - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–ª–æ–∫–∏ –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç—Å—è
      const noOverlap =
        existing.endLine < newBlock.startLine || newBlock.endLine < existing.startLine;
      return noOverlap;
    });
  }

  private countMeaningfulLines(content: string): number {
    const lines = content.split('\n');
    return lines.filter(line => {
      const trimmed = line.trim();

      // –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      if (trimmed.length === 0) return false;

      // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      if (trimmed.startsWith('//') || trimmed.startsWith('/*') || trimmed.startsWith('*'))
        return false;

      // –¢–æ–ª—å–∫–æ —Å–∫–æ–±–∫–∏
      if (/^[\s\{\}\(\)\[\]]+$/.test(trimmed)) return false;

      return true;
    }).length;
  }

  private extractDuplicateBlocks(hashMap: Map<string, CodeBlock[]>): DuplicateBlock[] {
    const duplicateBlocks: DuplicateBlock[] = [];

    for (const [hash, blocks] of hashMap.entries()) {
      if (blocks.length > 1) {
        const duplicateBlock: DuplicateBlock = {
          hash,
          content: blocks[0].content,
          lines: blocks[0].lines,
          startLine: blocks[0].startLine,
          endLine: blocks[0].endLine,
          files: blocks.map(block => ({
            path: block.filePath,
            startLine: block.startLine,
            endLine: block.endLine,
          })),
        };

        duplicateBlocks.push(duplicateBlock);
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    return duplicateBlocks.sort((a, b) => b.files.length - a.files.length);
  }

  private getEmptyResult(totalFiles: number, skippedFiles: number): DuplicationResult {
    return {
      percentage: 0,
      duplicatedLines: 0,
      totalLines: 0,
      uniqueLines: 0,
      duplicateBlocks: [],
      analysisMetadata: {
        analyzedFiles: 0,
        skippedFiles,
        generatedFiles: totalFiles - skippedFiles,
      },
    };
  }
}
