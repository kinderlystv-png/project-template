/**
 * AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ —Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º
 */

import { BaseAnalyzer } from '../../core/analyzer.js';
import { CheckContext } from '../../core/types.js';
import * as fs from 'fs';
import * as path from 'path';

export class AIAnalyzer extends BaseAnalyzer {
  getName(): string {
    return 'ai-insights';
  }

  get metadata() {
    return {
      name: 'AI Insights Analyzer',
      version: '1.0.0',
      description: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ —Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º',
      supportedFileTypes: ['.ts', '.js', '.tsx', '.jsx'],
    };
  }

  async analyze(projectPath: string): Promise<any> {
    console.log('üß† AI –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞...');

    const results = {
      patterns: await this.detectPatterns(projectPath),
      quality: await this.predictQuality(projectPath),
      duplication: await this.analyzeDuplication(projectPath),
      complexity: await this.analyzeComplexity(projectPath),
      codeSmells: await this.detectCodeSmells(projectPath),
      refactoringOpportunities: await this.identifyRefactoringOpportunities(projectPath),
      aiRecommendations: [] as string[],
    };

    results.aiRecommendations = this.generateAIRecommendations(results);

    return {
      success: true,
      data: results,
      metadata: {
        analyzer: this.getName(),
        timestamp: new Date(),
        duration: 0,
        filesAnalyzed: await this.countFiles(projectPath),
      },
    };
  }

  /**
   * –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private async detectPatterns(projectPath: string): Promise<any[]> {
    const patterns = [];
    const files = await this.getCodeFiles(projectPath);

    for (const file of files) {
      const content = await this.readFile(file);

      // Singleton Pattern
      if (this.detectSingleton(content)) {
        patterns.push({
          name: 'Singleton',
          type: 'design-pattern',
          file,
          confidence: 85,
          occurrences: 1,
          impact: 60,
          description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω Singleton',
        });
      }

      // Factory Pattern
      if (this.detectFactory(content)) {
        patterns.push({
          name: 'Factory',
          type: 'design-pattern',
          file,
          confidence: 78,
          occurrences: 1,
          impact: 70,
          description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω Factory',
        });
      }

      // Observer Pattern
      if (this.detectObserver(content)) {
        patterns.push({
          name: 'Observer',
          type: 'design-pattern',
          file,
          confidence: 82,
          occurrences: 1,
          impact: 75,
          description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω Observer',
        });
      }

      // God Object Anti-pattern
      if (this.detectGodObject(content)) {
        patterns.push({
          name: 'God Object',
          type: 'anti-pattern',
          file,
          confidence: 90,
          occurrences: 1,
          impact: 85,
          description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–Ω—Ç–∏-–ø–∞—Ç—Ç–µ—Ä–Ω God Object - –∫–ª–∞—Å—Å —Å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–∏–º–∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—è–º–∏',
        });
      }

      // Long Method Code Smell
      if (this.detectLongMethods(content)) {
        patterns.push({
          name: 'Long Method',
          type: 'code-smell',
          file,
          confidence: 88,
          occurrences: this.countLongMethods(content),
          impact: 70,
          description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–ª–∏–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã',
        });
      }
    }

    return patterns;
  }

  /**
   * –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
   */
  private async predictQuality(projectPath: string): Promise<any> {
    const files = await this.getCodeFiles(projectPath);
    let totalComplexity = 0;
    let totalLines = 0;
    let totalMethods = 0;
    let duplicatedLines = 0;

    for (const file of files) {
      const content = await this.readFile(file);
      const lines = content.split('\n').length;
      const methods = this.countMethods(content);
      const complexity = this.calculateCyclomaticComplexity(content);
      const duplication = this.detectDuplicationInFile(content);

      totalLines += lines;
      totalMethods += methods;
      totalComplexity += complexity;
      duplicatedLines += duplication;
    }

    const avgComplexity = totalMethods > 0 ? totalComplexity / totalMethods : 0;
    const duplicationPercentage = totalLines > 0 ? (duplicatedLines / totalLines) * 100 : 0;

    // AI –º–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
    const qualityScore = this.calculateQualityScore(
      avgComplexity,
      duplicationPercentage,
      totalLines,
      totalMethods
    );
    const trend = this.predictTrend(qualityScore, avgComplexity, duplicationPercentage);

    return {
      score: Math.round(qualityScore),
      confidence: 87,
      factors: [
        {
          name: 'Complexity',
          value: avgComplexity,
          impact: avgComplexity > 10 ? -20 : 10,
          trend: avgComplexity > 10 ? 'negative' : 'positive',
        },
        {
          name: 'Duplication',
          value: duplicationPercentage,
          impact: duplicationPercentage > 15 ? -15 : 5,
          trend: duplicationPercentage > 15 ? 'negative' : 'neutral',
        },
        {
          name: 'Size',
          value: totalLines,
          impact: totalLines > 10000 ? -10 : 0,
          trend: 'neutral',
        },
      ],
      trend,
      prediction: this.generateQualityPrediction(qualityScore, trend),
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
   */
  private async analyzeDuplication(projectPath: string): Promise<any> {
    const files = await this.getCodeFiles(projectPath);
    const duplicatedBlocks = [];
    let totalDuplicatedLines = 0;

    // –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    for (let i = 0; i < files.length; i++) {
      for (let j = i + 1; j < files.length; j++) {
        const content1 = await this.readFile(files[i]);
        const content2 = await this.readFile(files[j]);

        const duplicates = this.findDuplicateBlocks(content1, content2, files[i], files[j]);
        duplicatedBlocks.push(...duplicates);
        totalDuplicatedLines += duplicates.reduce((sum, dup) => sum + dup.lines, 0);
      }
    }

    const totalLines = await this.countTotalLines(files);
    const percentage = totalLines > 0 ? (totalDuplicatedLines / totalLines) * 100 : 0;

    return {
      percentage: Math.round(percentage * 10) / 10,
      lines: totalDuplicatedLines,
      blocks: duplicatedBlocks.slice(0, 10), // –¢–æ–ø 10 –¥—É–±–ª–µ–π
      files: [...new Set(duplicatedBlocks.map(d => d.file1))],
      recommendations: this.generateDuplicationRecommendations(percentage, duplicatedBlocks),
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
   */
  private async analyzeComplexity(projectPath: string): Promise<any> {
    const files = await this.getCodeFiles(projectPath);
    const complexityData = [];
    let totalComplexity = 0;
    let maxComplexity = 0;
    let methodCount = 0;

    for (const file of files) {
      const content = await this.readFile(file);
      const methods = this.extractMethods(content);

      for (const method of methods) {
        const complexity = this.calculateMethodComplexity(method.content);
        methodCount++;
        totalComplexity += complexity;
        maxComplexity = Math.max(maxComplexity, complexity);

        if (complexity > 10) {
          complexityData.push({
            file: path.relative(projectPath, file),
            function: method.name,
            complexity,
            lines: method.lines,
            recommendation: this.getComplexityRecommendation(complexity),
          });
        }
      }
    }

    const average = methodCount > 0 ? totalComplexity / methodCount : 0;

    return {
      average: Math.round(average * 10) / 10,
      maximum: maxComplexity,
      distribution: this.calculateComplexityDistribution(complexityData),
      hotspots: complexityData.sort((a, b) => b.complexity - a.complexity).slice(0, 10),
      recommendations: this.generateComplexityRecommendations(average, maxComplexity),
    };
  }

  /**
   * –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ code smells
   */
  private async detectCodeSmells(projectPath: string): Promise<any[]> {
    const smells = [];
    const files = await this.getCodeFiles(projectPath);

    for (const file of files) {
      const content = await this.readFile(file);
      const relativePath = path.relative(projectPath, file);

      // Long Parameter List
      const longParamMethods = this.detectLongParameterList(content);
      if (longParamMethods.length > 0) {
        smells.push({
          name: 'Long Parameter List',
          severity: 'major',
          file: relativePath,
          occurrences: longParamMethods.length,
          description: `${longParamMethods.length} –º–µ—Ç–æ–¥–æ–≤ —Å –¥–ª–∏–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤`,
          impact: '–ó–∞—Ç—Ä—É–¥–Ω—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ API',
          refactoringSteps: [
            '–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –æ–±—ä–µ–∫—Ç—ã',
            '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Builder pattern',
            '–†–∞–∑–±–∏—Ç—å –º–µ—Ç–æ–¥ –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ',
          ],
        });
      }

      // Large Class
      if (this.detectLargeClass(content)) {
        smells.push({
          name: 'Large Class',
          severity: 'major',
          file: relativePath,
          occurrences: 1,
          description: '–ö–ª–∞—Å—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –º–µ—Ç–æ–¥–æ–≤ –∏–ª–∏ —Å—Ç—Ä–æ–∫',
          impact: '–ù–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏',
          refactoringSteps: [
            '–†–∞–∑–¥–µ–ª–∏—Ç—å –∫–ª–∞—Å—Å –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ',
            '–ò–∑–≤–ª–µ—á—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã',
            '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã SOLID',
          ],
        });
      }

      // Feature Envy
      const featureEnvyMethods = this.detectFeatureEnvy(content);
      if (featureEnvyMethods.length > 0) {
        smells.push({
          name: 'Feature Envy',
          severity: 'minor',
          file: relativePath,
          occurrences: featureEnvyMethods.length,
          description: '–ú–µ—Ç–æ–¥—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤ —á–∞—â–µ —Å–≤–æ–∏—Ö',
          impact: '–°–ª–∞–±–∞—è —Å–≤—è–∑–Ω–æ—Å—Ç—å, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏',
          refactoringSteps: [
            '–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –º–µ—Ç–æ–¥ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å',
            '–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏',
          ],
        });
      }
    }

    return smells;
  }

  /**
   * –í—ã—è–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
   */
  private async identifyRefactoringOpportunities(projectPath: string): Promise<any[]> {
    const opportunities = [];
    const files = await this.getCodeFiles(projectPath);

    for (const file of files) {
      const content = await this.readFile(file);
      const relativePath = path.relative(projectPath, file);

      // Extract Method opportunities
      const longMethods = this.findLongMethods(content);
      for (const method of longMethods) {
        opportunities.push({
          type: 'Extract Method',
          file: relativePath,
          target: method.name,
          reason: `–ú–µ—Ç–æ–¥ ${method.name} —Å–æ–¥–µ—Ä–∂–∏—Ç ${method.lines} —Å—Ç—Ä–æ–∫`,
          priority: method.lines > 50 ? 'high' : 'medium',
          effort: { days: Math.ceil(method.lines / 30), complexity: '–°—Ä–µ–¥–Ω—è—è' },
          benefits: ['–£–ª—É—á—à–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏', '–£–ø—Ä–æ—â–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', '–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ'],
          example: this.generateExtractMethodExample(method),
        });
      }

      // Extract Class opportunities
      if (this.shouldExtractClass(content)) {
        opportunities.push({
          type: 'Extract Class',
          file: relativePath,
          target: 'Large Class',
          reason: '–ö–ª–∞—Å—Å –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏',
          priority: 'high',
          effort: { days: 5, complexity: '–í—ã—Å–æ–∫–∞—è' },
          benefits: ['–õ—É—á—à–µ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏', '–£–ø—Ä–æ—â–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'],
          example: this.generateExtractClassExample(),
        });
      }

      // Move Method opportunities
      const misplacedMethods = this.findMisplacedMethods(content);
      for (const method of misplacedMethods) {
        opportunities.push({
          type: 'Move Method',
          file: relativePath,
          target: method.name,
          reason: '–ú–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–æ–≥–æ –∫–ª–∞—Å—Å–∞',
          priority: 'medium',
          effort: { days: 1, complexity: '–ù–∏–∑–∫–∞—è' },
          benefits: ['–õ—É—á—à–∞—è —Å–≤—è–∑–Ω–æ—Å—Ç—å', '–ë–æ–ª–µ–µ –ª–æ–≥–∏—á–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ'],
          example: this.generateMoveMethodExample(method),
        });
      }
    }

    return opportunities.slice(0, 20); // –¢–æ–ø 20 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
  }

  private generateAIRecommendations(results: any): string[] {
    const recommendations = [];

    if (results.quality.score < 70) {
      recommendations.push('üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —É–ª—É—á—à–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ (—Ç–µ–∫—É—â–∏–π –±–∞–ª–ª < 70)');
    }

    if (results.duplication.percentage > 15) {
      recommendations.push(
        `üìã –ö—Ä–∏—Ç–∏—á–Ω–æ: –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ ${results.duplication.percentage}% - –Ω–µ–æ–±—Ö–æ–¥–∏–º —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥`
      );
    }

    if (results.complexity.average > 10) {
      recommendations.push(
        `üß© –í—ã—Å–æ–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å (${results.complexity.average}) - —Ä–∞–∑–±–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã`
      );
    }

    if (results.patterns.some((p: any) => p.type === 'anti-pattern')) {
      recommendations.push('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–Ω—Ç–∏-–ø–∞—Ç—Ç–µ—Ä–Ω—ã - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥');
    }

    if (results.codeSmells.length > 5) {
      recommendations.push(
        `üëÉ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ code smells (${results.codeSmells.length}) - —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–æ–¥–∞`
      );
    }

    return recommendations;
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
  private detectSingleton(content: string): boolean {
    return /private\s+static\s+\w+.*instance/i.test(content) && /getInstance\(\)/i.test(content);
  }

  private detectFactory(content: string): boolean {
    return /create\w+\(/i.test(content) && /(factory|creator)/i.test(content);
  }

  private detectObserver(content: string): boolean {
    return /subscribe|observer|notify|addEventListener/i.test(content);
  }

  private detectGodObject(content: string): boolean {
    const methodCount = (content.match(/function\s+\w+|async\s+\w+|\w+\s*\(/g) || []).length;
    const lineCount = content.split('\n').length;
    return methodCount > 20 || lineCount > 500;
  }

  private detectLongMethods(content: string): boolean {
    const methods = this.extractMethods(content);
    return methods.some(m => m.lines > 30);
  }

  private countLongMethods(content: string): number {
    const methods = this.extractMethods(content);
    return methods.filter(m => m.lines > 30).length;
  }

  private extractMethods(content: string): any[] {
    const methods = [];
    const lines = content.split('\n');
    let currentMethod = null;
    let braceCount = 0;

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();

      // –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –º–µ—Ç–æ–¥–∞
      if (/^(async\s+)?\w+\s*\(.*\)\s*\{?/.test(line)) {
        if (currentMethod) {
          currentMethod.lines = i - currentMethod.start;
          methods.push(currentMethod);
        }

        currentMethod = {
          name: line.match(/(\w+)\s*\(/)?.[1] || 'unknown',
          start: i,
          lines: 0,
          content: line,
        };
        braceCount = (line.match(/\{/g) || []).length - (line.match(/\}/g) || []).length;
      } else if (currentMethod) {
        currentMethod.content += '\n' + line;
        braceCount += (line.match(/\{/g) || []).length - (line.match(/\}/g) || []).length;

        if (braceCount === 0) {
          currentMethod.lines = i - currentMethod.start + 1;
          methods.push(currentMethod);
          currentMethod = null;
        }
      }
    }

    return methods;
  }

  private countMethods(content: string): number {
    return this.extractMethods(content).length;
  }

  private calculateCyclomaticComplexity(content: string): number {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const conditions = (content.match(/if|while|for|case|catch|\?\s*:/g) || []).length;
    const logicalOperators = (content.match(/&&|\|\|/g) || []).length;
    return 1 + conditions + logicalOperators;
  }

  private calculateMethodComplexity(methodContent: string): number {
    return this.calculateCyclomaticComplexity(methodContent);
  }

  private calculateQualityScore(
    complexity: number,
    duplication: number,
    lines: number,
    methods: number
  ): number {
    let score = 100;

    // –®—Ç—Ä–∞—Ñ –∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    if (complexity > 15) score -= 30;
    else if (complexity > 10) score -= 20;
    else if (complexity > 5) score -= 10;

    // –®—Ç—Ä–∞—Ñ –∑–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (duplication > 20) score -= 25;
    else if (duplication > 15) score -= 15;
    else if (duplication > 10) score -= 10;

    // –®—Ç—Ä–∞—Ñ –∑–∞ —Ä–∞–∑–º–µ—Ä
    if (lines > 20000) score -= 15;
    else if (lines > 10000) score -= 10;

    return Math.max(0, score);
  }

  private predictTrend(score: number, complexity: number, duplication: number): string {
    if (complexity < 5 && duplication < 10) return 'improving';
    if (complexity > 15 || duplication > 20) return 'degrading';
    return 'stable';
  }

  private generateQualityPrediction(score: number, trend: string): string {
    if (trend === 'improving') {
      return `–ö–∞—á–µ—Å—Ç–≤–æ —É–ª—É—á—à–∞–µ—Ç—Å—è. –ü—Ä–∏ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è—Ö –º–æ–∂–µ—Ç –¥–æ—Å—Ç–∏—á—å ${score + 10} –±–∞–ª–ª–æ–≤.`;
    }
    if (trend === 'degrading') {
      return `–ö–∞—á–µ—Å—Ç–≤–æ —É—Ö—É–¥—à–∞–µ—Ç—Å—è. –ë–µ–∑ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –º–æ–∂–µ—Ç —Å–Ω–∏–∑–∏—Ç—å—Å—è –¥–æ ${score - 15} –±–∞–ª–ª–æ–≤.`;
    }
    return `–ö–∞—á–µ—Å—Ç–≤–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ –Ω–∞ —É—Ä–æ–≤–Ω–µ ${score} –±–∞–ª–ª–æ–≤.`;
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–µ—Ç–µ–∫—Ü–∏–∏
  private detectDuplicationInFile(content: string): number {
    // –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ —Ñ–∞–π–ª–∞
    const lines = content.split('\n').filter(line => line.trim().length > 0);
    const duplicates = new Set();

    for (let i = 0; i < lines.length - 1; i++) {
      for (let j = i + 1; j < lines.length; j++) {
        if (lines[i].trim() === lines[j].trim() && lines[i].trim().length > 10) {
          duplicates.add(lines[i].trim());
        }
      }
    }

    return duplicates.size;
  }

  private findDuplicateBlocks(
    content1: string,
    content2: string,
    file1: string,
    file2: string
  ): any[] {
    const duplicates = [];
    const lines1 = content1.split('\n');
    const lines2 = content2.split('\n');

    // –ü–æ–∏—Å–∫ –±–ª–æ–∫–æ–≤ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
    for (let i = 0; i < lines1.length - 5; i++) {
      const block1 = lines1
        .slice(i, i + 5)
        .join('\n')
        .trim();
      if (block1.length < 50) continue;

      for (let j = 0; j < lines2.length - 5; j++) {
        const block2 = lines2
          .slice(j, j + 5)
          .join('\n')
          .trim();

        if (block1 === block2) {
          duplicates.push({
            file1: path.basename(file1),
            file2: path.basename(file2),
            lines: 5,
            startLine1: i + 1,
            startLine2: j + 1,
            content: block1.substring(0, 100) + '...',
          });
        }
      }
    }

    return duplicates;
  }

  private async countTotalLines(files: string[]): Promise<number> {
    let total = 0;
    for (const file of files) {
      const content = await this.readFile(file);
      total += content.split('\n').length;
    }
    return total;
  }

  private generateDuplicationRecommendations(percentage: number, blocks: any[]): string[] {
    const recommendations = [];

    if (percentage > 20) {
      recommendations.push('–ö—Ä–∏—Ç–∏—á–Ω–æ: –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –Ω–∞—á–∞—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞');
    } else if (percentage > 15) {
      recommendations.push('–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è');
    } else if (percentage > 10) {
      recommendations.push('–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–æ—Å—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è');
    }

    if (blocks.length > 0) {
      recommendations.push('–ò–∑–≤–ª–µ—á—å –æ–±—â–∏–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞ –≤ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏');
      recommendations.push('–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã');
    }

    return recommendations;
  }

  private calculateComplexityDistribution(complexityData: any[]) {
    const total = complexityData.length;
    if (total === 0) return { low: 100, medium: 0, high: 0, extreme: 0 };

    const low = complexityData.filter(d => d.complexity < 5).length;
    const medium = complexityData.filter(d => d.complexity >= 5 && d.complexity < 10).length;
    const high = complexityData.filter(d => d.complexity >= 10 && d.complexity < 20).length;
    const extreme = complexityData.filter(d => d.complexity >= 20).length;

    return {
      low: Math.round((low / total) * 100),
      medium: Math.round((medium / total) * 100),
      high: Math.round((high / total) * 100),
      extreme: Math.round((extreme / total) * 100),
    };
  }

  private getComplexityRecommendation(complexity: number): string {
    if (complexity > 20) return '–ö—Ä–∏—Ç–∏—á–Ω–æ: –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –º–µ–ª–∫–∏–µ –º–µ—Ç–æ–¥—ã';
    if (complexity > 15) return '–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç–æ–¥–∞';
    if (complexity > 10) return '–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —É–ø—Ä–æ—â–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏';
    return '–ü—Ä–∏–µ–º–ª–µ–º–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å';
  }

  private generateComplexityRecommendations(average: number, maximum: number): string[] {
    const recommendations = [];

    if (maximum > 20) {
      recommendations.push('–ö—Ä–∏—Ç–∏—á–Ω–æ: –µ—Å—Ç—å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ —Å–ª–æ–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã (>20)');
    }
    if (average > 10) {
      recommendations.push('–°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è - –æ–±—â–∏–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥');
    }
    if (average > 5) {
      recommendations.push('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ 10');
    }

    recommendations.push('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏');
    recommendations.push('–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ CI/CD');

    return recommendations;
  }

  // –ú–µ—Ç–æ–¥—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ code smells
  private detectLongParameterList(content: string): any[] {
    const methods = [];
    const methodRegex = /(\w+)\s*\([^)]{50,}\)/g;
    let match;

    while ((match = methodRegex.exec(content)) !== null) {
      methods.push({
        name: match[1],
        parameters: match[0],
      });
    }

    return methods;
  }

  private detectLargeClass(content: string): boolean {
    const lineCount = content.split('\n').length;
    const methodCount = this.countMethods(content);
    return lineCount > 300 || methodCount > 15;
  }

  private detectFeatureEnvy(content: string): any[] {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è Feature Envy
    const methods = this.extractMethods(content);
    return methods.filter(method => {
      const otherClassCalls = (method.content.match(/\w+\.\w+/g) || []).length;
      const thisUsage = (method.content.match(/this\./g) || []).length;
      return otherClassCalls > thisUsage && otherClassCalls > 3;
    });
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
  private findLongMethods(content: string): any[] {
    return this.extractMethods(content).filter(m => m.lines > 20);
  }

  private shouldExtractClass(content: string): boolean {
    return this.detectLargeClass(content);
  }

  private findMisplacedMethods(content: string): any[] {
    return this.detectFeatureEnvy(content);
  }

  private generateExtractMethodExample(method: any): string {
    return `// –ë—ã–ª–æ:
${method.name}() {
  // ${method.lines} —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞
}

// –°—Ç–∞–ª–æ:
${method.name}() {
  this.validateInput();
  this.processData();
  this.generateResult();
}`;
  }

  private generateExtractClassExample(): string {
    return `// –ë—ã–ª–æ:
class LargeClass {
  // –º–Ω–æ–≥–æ –º–µ—Ç–æ–¥–æ–≤ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–µ–π
}

// –°—Ç–∞–ª–æ:
class CoreClass {
  // –æ—Å–Ω–æ–≤–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
}
class HelperClass {
  // –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
}`;
  }

  private generateMoveMethodExample(method: any): string {
    return `// –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –º–µ—Ç–æ–¥ ${method.name} –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å`;
  }

  // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private async getCodeFiles(projectPath: string): Promise<string[]> {
    const files: string[] = [];
    const extensions = ['.ts', '.js', '.tsx', '.jsx'];

    const scanDir = async (dir: string) => {
      try {
        const items = await fs.promises.readdir(dir);
        for (const item of items) {
          const fullPath = path.join(dir, item);
          const stat = await fs.promises.stat(fullPath);

          if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {
            await scanDir(fullPath);
          } else if (stat.isFile() && extensions.some(ext => item.endsWith(ext))) {
            files.push(fullPath);
          }
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
      }
    };

    await scanDir(projectPath);
    return files;
  }

  private async readFile(filePath: string): Promise<string> {
    try {
      return await fs.promises.readFile(filePath, 'utf-8');
    } catch (error) {
      return '';
    }
  }

  private async countFiles(projectPath: string): Promise<number> {
    const files = await this.getCodeFiles(projectPath);
    return files.length;
  }
}
