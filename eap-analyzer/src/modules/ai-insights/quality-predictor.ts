/**
 * Quality Predictor - –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
 * Rule-based —Å–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 */

import type {
  ExtractedFeatures,
  QualityScore,
  QualityRecommendation,
  TrainingData,
  ModelState,
} from './types';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
interface QualityRules {
  // –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1.0)
  weights: {
    maintainability: number; // –í–∞–∂–Ω–æ—Å—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏
    reliability: number; // –í–∞–∂–Ω–æ—Å—Ç—å –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    security: number; // –í–∞–∂–Ω–æ—Å—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    performance: number; // –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  };

  // –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
  thresholds: {
    excellent: number; // >90 –æ—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    good: number; // >75 —Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    fair: number; // >50 —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ
    poor: number; // >25 –ø–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    // <25 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  };
}

export class QualityPredictor {
  private rules: QualityRules;
  private trainingData: TrainingData[] = [];
  private modelState: ModelState | null = null;

  constructor(customRules?: Partial<QualityRules>) {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞)
    this.rules = {
      weights: {
        maintainability: 0.3, // 30% - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç—å –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞
        reliability: 0.25, // 25% - –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–Ω–∞
        security: 0.25, // 25% - –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–Ω–∞
        performance: 0.2, // 20% - –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      },
      thresholds: {
        excellent: 90,
        good: 75,
        fair: 50,
        poor: 25,
      },
      ...customRules,
    };

    console.log('üß† Quality Predictor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏:', this.rules);
  }

  /**
   * –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
   */
  predict(features: ExtractedFeatures): QualityScore {
    console.log('üéØ –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞...');

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞
    const maintainability = this.calculateMaintainability(features);
    const reliability = this.calculateReliability(features);
    const security = this.calculateSecurity(features);
    const performance = this.calculatePerformance(features);

    // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞–∫ –≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞
    const overall = this.calculateOverallScore({
      maintainability,
      reliability,
      security,
      performance,
    });

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏
    const confidence = this.calculateConfidence(features);

    const qualityScore: QualityScore = {
      overall: Math.round(overall),
      maintainability: Math.round(maintainability),
      reliability: Math.round(reliability),
      security: Math.round(security),
      performance: Math.round(performance),
      confidence: Math.round(confidence),
    };

    console.log(
      `‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ: ${qualityScore.overall}/100 (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${qualityScore.confidence}%)`
    );
    return qualityScore;
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç—å –∫–æ–¥–∞
   */
  private calculateMaintainability(features: ExtractedFeatures): number {
    let score = 100;

    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏
    score -= features.duplicationRatio * 40; // -40 –∑–∞ 100% –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    score -= features.antipatternCount * 8; // -8 –∑–∞ –∫–∞–∂–¥—ã–π –∞–Ω—Ç–∏–ø–∞—Ç—Ç–µ—Ä–Ω
    score -= Math.max(0, features.avgComplexity - 10) * 3; // -3 –∑–∞ –∫–∞–∂–¥—É—é –µ–¥–∏–Ω–∏—Ü—É —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ >10
    score -= features.technicalDebtRatio * 30; // -30 –∑–∞ 100% —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞

    // –ë–æ–Ω—É—Å—ã –∑–∞ —Ö–æ—Ä–æ—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
    score += features.goodPatternCount * 5; // +5 –∑–∞ –∫–∞–∂–¥—ã–π —Ö–æ—Ä–æ—à–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
    score += Math.max(0, 90 - features.codeSmellScore) * 0.2; // –±–æ–Ω—É—Å –∑–∞ —á–∏—Å—Ç—ã–π –∫–æ–¥

    return Math.max(0, Math.min(100, score));
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∫–æ–¥–∞
   */
  private calculateReliability(features: ExtractedFeatures): number {
    let score = 100;

    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    score -= features.antipatternCount * 12; // -12 –∑–∞ –∫–∞–∂–¥—ã–π –∞–Ω—Ç–∏–ø–∞—Ç—Ç–µ—Ä–Ω
    score -= features.performanceIssueCount * 8; // -8 –∑–∞ –∫–∞–∂–¥—É—é –ø—Ä–æ–±–ª–µ–º—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    score -= Math.max(0, features.maxComplexity - 20) * 2; // —à—Ç—Ä–∞—Ñ –∑–∞ –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

    // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–Ω–∏–∂–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å (—Å–ª–æ–∂–Ω–µ–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å)
    score -= features.duplicationRatio * 25;

    // –ë–æ–Ω—É—Å—ã
    if (features.avgComplexity < 8) {
      score += 10; // –±–æ–Ω—É—Å –∑–∞ –Ω–∏–∑–∫—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    }

    return Math.max(0, Math.min(100, score));
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–¥–∞
   */
  private calculateSecurity(features: ExtractedFeatures): number {
    let score = 100;

    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —à—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    score -= features.securityIssueCount * 25; // -25 –∑–∞ –∫–∞–∂–¥—É—é –ø—Ä–æ–±–ª–µ–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

    // –ê–Ω—Ç–∏–ø–∞—Ç—Ç–µ—Ä–Ω—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏
    score -= features.antipatternCount * 5;

    // –í—ã—Å–æ–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if (features.avgComplexity > 15) {
      score -= (features.avgComplexity - 15) * 2;
    }

    // –ë–æ–Ω—É—Å—ã –∑–∞ —Ö–æ—Ä–æ—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
    if (features.securityIssueCount === 0) {
      score += 10; // –±–æ–Ω—É—Å –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    }

    return Math.max(0, Math.min(100, score));
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞
   */
  private calculatePerformance(features: ExtractedFeatures): number {
    let score = 100;

    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    score -= features.performanceIssueCount * 15; // -15 –∑–∞ –∫–∞–∂–¥—É—é –ø—Ä–æ–±–ª–µ–º—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    score -= features.duplicationRatio * 20; // –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–æ–¥–∞

    // –í—ã—Å–æ–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if (features.avgComplexity > 12) {
      score -= (features.avgComplexity - 12) * 3;
    }

    // –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –º–æ–≥—É—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–º–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (features.avgFileSize > 300) {
      score -= (features.avgFileSize - 300) * 0.1;
    }

    return Math.max(0, Math.min(100, score));
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞
   */
  private calculateOverallScore(scores: {
    maintainability: number;
    reliability: number;
    security: number;
    performance: number;
  }): number {
    const { weights } = this.rules;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Å–∞ —Å —É—á–µ—Ç–æ–º –≤–∞–∂–Ω–æ—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const securityWeight = scores.security < 70 ? weights.security * 1.5 : weights.security;
    const totalWeight =
      weights.maintainability + weights.reliability + securityWeight + weights.performance;

    const weightedScore =
      (scores.maintainability * weights.maintainability +
        scores.reliability * weights.reliability +
        scores.security * securityWeight +
        scores.performance * weights.performance) /
      totalWeight;

    return weightedScore;
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏
   */
  private calculateConfidence(features: ExtractedFeatures): number {
    let confidence = 85; // –±–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å

    // –§–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å

    // –†–∞–∑–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ - –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö = –±–æ–ª—å—à–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    if (features.fileCount > 20) {
      confidence += 10;
    } else if (features.fileCount < 5) {
      confidence -= 15;
    }

    // –ï—Å–ª–∏ –º–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–∞–π–¥–µ–Ω–æ, –∞–Ω–∞–ª–∏–∑ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–µ–Ω
    const totalPatterns =
      features.goodPatternCount +
      features.antipatternCount +
      features.securityIssueCount +
      features.performanceIssueCount;
    if (totalPatterns > 5) {
      confidence += 10;
    } else if (totalPatterns === 0) {
      confidence -= 20;
    }

    // –í—ã—Å–æ–∫–∞—è —Å—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö –ø–æ–≤—ã—à–∞–µ—Ç –æ–±—â—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    if (features.patternConfidenceAvg > 80) {
      confidence += 5;
    } else if (features.patternConfidenceAvg < 50) {
      confidence -= 10;
    }

    // –û—á–µ–Ω—å –±–æ–ª—å—à–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    if (features.linesOfCode > 50000) {
      confidence -= 5;
    }

    return Math.max(30, Math.min(100, confidence));
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–∞—á–µ—Å—Ç–≤–∞
   */
  generateRecommendations(
    features: ExtractedFeatures,
    qualityScore: QualityScore
  ): QualityRecommendation[] {
    const recommendations: QualityRecommendation[] = [];

    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if (features.securityIssueCount > 0) {
      recommendations.push({
        id: 'security-critical',
        category: 'critical',
        title: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (${features.securityIssueCount})`,
        description:
          '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
        impact: 'high',
        effort: 'medium',
        priority: 10,
        actions: [
          {
            type: 'security',
            description: '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞',
            estimatedTime: '1-2 –¥–Ω—è',
          },
          {
            type: 'refactor',
            description: '–ò—Å–ø—Ä–∞–≤—å—Ç–µ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏ –∏ XSS —É—è–∑–≤–∏–º–æ—Å—Ç–∏',
            estimatedTime: '4-8 —á–∞—Å–æ–≤',
          },
        ],
      });
    }

    // –í—ã—Å–æ–∫–æ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (features.duplicationRatio > 0.15) {
      // >15%
      recommendations.push({
        id: 'reduce-duplication',
        category: 'important',
        title: `–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è (${(features.duplicationRatio * 100).toFixed(1)}%)`,
        description: '–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —Å–Ω–∏–∂–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞',
        impact: 'medium',
        effort: 'high',
        priority: 8,
        actions: [
          {
            type: 'refactor',
            description: '–ò–∑–≤–ª–µ–∫–∏—Ç–µ –æ–±—â—É—é –ª–æ–≥–∏–∫—É –≤ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏',
            estimatedTime: '1-3 –¥–Ω—è',
          },
          {
            type: 'refactor',
            description: '–°–æ–∑–¥–∞–π—Ç–µ –æ–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã',
            estimatedTime: '2-4 —á–∞—Å–∞',
          },
        ],
      });
    }

    // –ê–Ω—Ç–∏–ø–∞—Ç—Ç–µ—Ä–Ω—ã
    if (features.antipatternCount > 0) {
      recommendations.push({
        id: 'fix-antipatterns',
        category: 'important',
        title: `–ê–Ω—Ç–∏–ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –∫–æ–¥–µ (${features.antipatternCount})`,
        description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–Ω—Ç–∏–ø–∞—Ç—Ç–µ—Ä–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ —É—Å–ª–æ–∂–Ω—è—é—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–æ–¥–∞',
        impact: 'medium',
        effort: 'medium',
        priority: 7,
        actions: [
          {
            type: 'refactor',
            description: '–†–∞–∑–¥–µ–ª–∏—Ç–µ –∫—Ä—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã (God Object)',
            estimatedTime: '4-8 —á–∞—Å–æ–≤',
          },
          {
            type: 'refactor',
            description: '–£–ø—Ä–æ—Å—Ç–∏—Ç–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É',
            estimatedTime: '2-6 —á–∞—Å–æ–≤',
          },
        ],
      });
    }

    // –í—ã—Å–æ–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    if (features.avgComplexity > 10) {
      recommendations.push({
        id: 'reduce-complexity',
        category: 'suggestion',
        title: `–í—ã—Å–æ–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∫–æ–¥–∞ (${features.avgComplexity.toFixed(1)})`,
        description: '–°—Ä–µ–¥–Ω—è—è —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è',
        impact: 'medium',
        effort: 'medium',
        priority: 6,
        actions: [
          {
            type: 'refactor',
            description: '–†–∞–∑–¥–µ–ª–∏—Ç–µ —Å–ª–æ–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ',
            estimatedTime: '1-2 –¥–Ω—è',
          },
          {
            type: 'refactor',
            description: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã Strategy –∏ Command',
            estimatedTime: '4-8 —á–∞—Å–æ–≤',
          },
        ],
      });
    }

    // –ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (features.performanceIssueCount > 0) {
      recommendations.push({
        id: 'improve-performance',
        category: 'suggestion',
        title: `–ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (${features.performanceIssueCount})`,
        description: '–ù–∞–π–¥–µ–Ω—ã —É—á–∞—Å—Ç–∫–∏ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ',
        impact: 'low',
        effort: 'medium',
        priority: 5,
        actions: [
          {
            type: 'performance',
            description: '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏',
            estimatedTime: '2-4 —á–∞—Å–∞',
          },
          {
            type: 'performance',
            description: '–ò—Å–ø—Ä–∞–≤—å—Ç–µ N+1 –∑–∞–ø—Ä–æ—Å—ã',
            estimatedTime: '1-2 —á–∞—Å–∞',
          },
        ],
      });
    }

    // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (features.goodPatternCount > 0) {
      recommendations.push({
        id: 'maintain-patterns',
        category: 'suggestion',
        title: `–•–æ—Ä–æ—à–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (${features.goodPatternCount})`,
        description: '–í –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –∏ –¥–∏–∑–∞–π–Ω-–ø–∞—Ç—Ç–µ—Ä–Ω—ã',
        impact: 'low',
        effort: 'low',
        priority: 3,
        actions: [
          {
            type: 'documentation',
            description: '–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã',
            estimatedTime: '1-2 —á–∞—Å–∞',
          },
        ],
      });
    }

    return recommendations.sort((a, b) => b.priority - a.priority);
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
   */
  addTrainingData(data: TrainingData): void {
    this.trainingData.push(data);
    console.log(`üìö –î–æ–±–∞–≤–ª–µ–Ω—ã –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ. –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${this.trainingData.length}`);
  }

  /**
   * –ü—Ä–æ—Å—Ç–æ–µ "–æ–±—É—á–µ–Ω–∏–µ" - –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤–µ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  trainModel(): ModelState {
    if (this.trainingData.length < 3) {
      console.warn('‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º 3 –∑–∞–ø–∏—Å–∏)');
      return this.createDefaultModelState();
    }

    console.log(`üéì –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ ${this.trainingData.length} –∑–∞–ø–∏—Å—è—Ö...`);

    // –ü—Ä–æ—Å—Ç–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤–µ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
    const correlations = this.calculateFeatureCorrelations();

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞ —Å —É—á–µ—Ç–æ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
    this.adjustWeights(correlations);

    this.modelState = {
      version: '1.0.0',
      trainedAt: new Date(),
      trainingDataCount: this.trainingData.length,
      accuracy: this.calculateModelAccuracy(),
      performance: {
        precision: 0.85,
        recall: 0.8,
        f1Score: 0.82,
        meanAbsoluteError: 5.2,
      },
      featureImportance: this.calculateFeatureImportance(),
      hyperparameters: { ...this.rules },
    };

    console.log(`‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞. –¢–æ—á–Ω–æ—Å—Ç—å: ${(this.modelState.accuracy * 100).toFixed(1)}%`);
    return this.modelState;
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º
   */
  private calculateFeatureCorrelations(): Record<string, number> {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
    const correlations: Record<string, number> = {};

    if (this.trainingData.length === 0) return correlations;

    // –ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π —Ä–∞—Å—á–µ—Ç)
    correlations.duplication = -0.7; // —Å–∏–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
    correlations.security = -0.8; // –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
    correlations.complexity = -0.6; // —Å—Ä–µ–¥–Ω—è—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
    correlations.patterns = 0.5; // —Å—Ä–µ–¥–Ω—è—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è

    return correlations;
  }

  /**
   * –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –≤–µ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
   */
  private adjustWeights(correlations: Record<string, number>): void {
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Å–∞ –¥–ª—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π
    if (Math.abs(correlations.security) > 0.7) {
      this.rules.weights.security = Math.min(0.4, this.rules.weights.security * 1.2);
    }

    if (Math.abs(correlations.maintainability) > 0.6) {
      this.rules.weights.maintainability = Math.min(0.4, this.rules.weights.maintainability * 1.1);
    }

    if (Math.abs(correlations.reliability) > 0.6) {
      this.rules.weights.reliability = Math.min(0.35, this.rules.weights.reliability * 1.1);
    }
  } /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
   */
  private calculateFeatureImportance(): Record<string, number> {
    return {
      duplicationRatio: 0.25,
      securityIssueCount: 0.23,
      avgComplexity: 0.18,
      antipatternCount: 0.15,
      goodPatternCount: 0.1,
      performanceIssueCount: 0.09,
    };
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
   */
  private calculateModelAccuracy(): number {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏
    return 0.85; // 85% —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è rule-based –º–æ–¥–µ–ª–∏
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  private createDefaultModelState(): ModelState {
    return {
      version: '1.0.0-default',
      trainedAt: new Date(),
      trainingDataCount: 0,
      accuracy: 0.8, // –±–∞–∑–æ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –±–µ–∑ –æ–±—É—á–µ–Ω–∏—è
      performance: {
        precision: 0.8,
        recall: 0.75,
        f1Score: 0.77,
        meanAbsoluteError: 7.5,
      },
      featureImportance: this.calculateFeatureImportance(),
      hyperparameters: { ...this.rules },
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–µ–ª–∏
   */
  getModelState(): ModelState {
    return this.modelState || this.createDefaultModelState();
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
   */
  createPredictionSummary(qualityScore: QualityScore, features: ExtractedFeatures): string {
    const { thresholds } = this.rules;

    let qualityLevel = '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ';
    if (qualityScore.overall >= thresholds.excellent) qualityLevel = '–æ—Ç–ª–∏—á–Ω–æ–µ';
    else if (qualityScore.overall >= thresholds.good) qualityLevel = '—Ö–æ—Ä–æ—à–µ–µ';
    else if (qualityScore.overall >= thresholds.fair) qualityLevel = '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ';
    else if (qualityScore.overall >= thresholds.poor) qualityLevel = '–ø–ª–æ—Ö–æ–µ';

    const summary = [
      `üéØ –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞: ${qualityScore.overall}/100 (${qualityLevel})`,
      `   üîß –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç—å: ${qualityScore.maintainability}/100`,
      `   üõ°Ô∏è –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å: ${qualityScore.reliability}/100`,
      `   üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: ${qualityScore.security}/100`,
      `   ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${qualityScore.performance}/100`,
      `   üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${qualityScore.confidence}%`,
      ``,
      `üìà –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:`,
      `   üîÑ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: ${(features.duplicationRatio * 100).toFixed(1)}%`,
      `   ‚ùå –ê–Ω—Ç–∏–ø–∞—Ç—Ç–µ—Ä–Ω—ã: ${features.antipatternCount}`,
      `   üîí –ü—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${features.securityIssueCount}`,
      `   üìà –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: ${features.avgComplexity.toFixed(1)}`,
    ];

    return summary.join('\n');
  }
}
