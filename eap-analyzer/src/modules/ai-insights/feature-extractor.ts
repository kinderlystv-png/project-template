/**
 * Feature Extractor –¥–ª—è AI Quality Predictor
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
 */

import type { CodeMetrics, ExtractedFeatures, DuplicationResult, ComplexityResult } from './types';
import type { CodePattern, PatternAnalysisResult } from './pattern-recognizer';

export class FeatureExtractor {
  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤
   */
  extractFeatures(metrics: CodeMetrics): ExtractedFeatures {
    console.log('üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è ML –∞–Ω–∞–ª–∏–∑–∞...');

    const duplicationFeatures = this.extractDuplicationFeatures(metrics.duplication);
    const patternFeatures = {
      goodPatternCount: metrics.patterns.summary.goodPatterns,
      antipatternCount: metrics.patterns.antipatternCount,
      securityIssueCount: metrics.patterns.securityConcerns.length,
      performanceIssueCount: metrics.patterns.performanceIssues.length,
      patternConfidenceAvg: this.calculatePatternConfidenceAvg(metrics.patterns),
    };
    const complexityFeatures = this.extractComplexityFeatures(metrics.complexity);
    const sizeFeatures = this.extractSizeFeatures(metrics);

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const baseFeatures = {
      // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
      duplicationRatio: duplicationFeatures.duplicationRatio || 0,
      duplicateBlockCount: duplicationFeatures.duplicateBlockCount || 0,
      avgDuplicateSize: duplicationFeatures.avgDuplicateSize || 0,

      // –ü–∞—Ç—Ç–µ—Ä–Ω—ã
      goodPatternCount: patternFeatures.goodPatternCount || 0,
      antipatternCount: patternFeatures.antipatternCount || 0,
      securityIssueCount: patternFeatures.securityIssueCount || 0,
      performanceIssueCount: patternFeatures.performanceIssueCount || 0,
      patternConfidenceAvg: patternFeatures.patternConfidenceAvg || 0,

      // –°–ª–æ–∂–Ω–æ—Å—Ç—å
      avgComplexity: complexityFeatures.avgComplexity || 0,
      maxComplexity: complexityFeatures.maxComplexity || 0,
      complexityVariance: complexityFeatures.complexityVariance || 0,

      // –†–∞–∑–º–µ—Ä
      fileCount: sizeFeatures.fileCount || 0,
      linesOfCode: sizeFeatures.linesOfCode || 0,
      avgFileSize: sizeFeatures.avgFileSize || 0,
    };

    // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    const computedFeatures = this.computeAggregatedFeatures(baseFeatures);

    const features: ExtractedFeatures = {
      ...baseFeatures,
      codeSmellScore: computedFeatures.codeSmellScore || 0,
      maintainabilityIndex: computedFeatures.maintainabilityIndex || 0,
      technicalDebtRatio: computedFeatures.technicalDebtRatio || 0,
    };

    console.log(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ ${Object.keys(features).length} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤`);
    return features;
  } /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
   */
  private extractDuplicationFeatures(duplication: DuplicationResult): Partial<ExtractedFeatures> {
    const avgDuplicateSize =
      duplication.duplicateBlocks.length > 0
        ? duplication.duplicateBlocks.reduce((sum: number, block: any) => sum + block.lines, 0) /
          duplication.duplicateBlocks.length
        : 0;

    return {
      duplicationRatio: duplication.percentage / 100,
      duplicateBlockCount: duplication.duplicateBlocks.length,
      avgDuplicateSize,
    };
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
   */
  private extractPatternFeatures(patterns: PatternAnalysisResult): Partial<ExtractedFeatures> {
    const allPatterns = patterns.detectedPatterns;

    const goodPatterns = allPatterns.filter((p: CodePattern) =>
      ['architectural', 'design'].includes(p.type)
    );

    const antipatterns = allPatterns.filter((p: CodePattern) => p.type === 'antipattern');
    const securityIssues = allPatterns.filter((p: CodePattern) => p.type === 'security');
    const performanceIssues = allPatterns.filter((p: CodePattern) => p.type === 'performance');

    const avgConfidence =
      allPatterns.length > 0
        ? allPatterns.reduce((sum: number, p: CodePattern) => sum + p.confidence, 0) /
          allPatterns.length
        : 0;

    return {
      goodPatternCount: goodPatterns.length,
      antipatternCount: antipatterns.length,
      securityIssueCount: securityIssues.length,
      performanceIssueCount: performanceIssues.length,
      patternConfidenceAvg: avgConfidence,
    };
  } /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞
   */
  private extractComplexityFeatures(complexity?: ComplexityResult): Partial<ExtractedFeatures> {
    if (!complexity) {
      return {
        avgComplexity: 0,
        maxComplexity: 0,
        complexityVariance: 0,
      };
    }

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const allComplexities: number[] = [];
    complexity.files.forEach(file => {
      file.functions.forEach(func => {
        allComplexities.push(func.complexity);
      });
    });

    const variance = allComplexities.length > 1 ? this.calculateVariance(allComplexities) : 0;

    return {
      avgComplexity: complexity.average,
      maxComplexity: complexity.maximum,
      complexityVariance: variance,
    };
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
   */
  private extractSizeFeatures(metrics: CodeMetrics): Partial<ExtractedFeatures> {
    const avgFileSize = metrics.fileCount > 0 ? metrics.linesOfCode / metrics.fileCount : 0;

    return {
      fileCount: metrics.fileCount,
      linesOfCode: metrics.linesOfCode,
      avgFileSize,
    };
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞
   */
  private computeAggregatedFeatures(
    baseFeatures: Partial<ExtractedFeatures>
  ): Partial<ExtractedFeatures> {
    // –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å "–∑–∞–ø–∞—Ö–∞" –∫–æ–¥–∞ (0-100, –≥–¥–µ 0 = –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ)
    const codeSmellScore = this.calculateCodeSmellScore(baseFeatures);

    // –ò–Ω–¥–µ–∫—Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ (—Ñ–æ—Ä–º—É–ª–∞ Microsoft)
    const maintainabilityIndex = this.calculateMaintainabilityIndex(baseFeatures);

    // –û—Ç–Ω–æ—à–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞
    const technicalDebtRatio = this.calculateTechnicalDebtRatio(baseFeatures);

    return {
      codeSmellScore,
      maintainabilityIndex,
      technicalDebtRatio,
    };
  } /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å "–∑–∞–ø–∞—Ö–∞" –∫–æ–¥–∞
   */
  private calculateCodeSmellScore(features: Partial<ExtractedFeatures>): number {
    let score = 100; // –ù–∞—á–∏–Ω–∞–µ–º —Å –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç–∞

    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–æ–±–ª–µ–º—ã
    if (features.duplicationRatio) {
      score -= features.duplicationRatio * 30; // –¥–æ -30 –∑–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    }

    if (features.antipatternCount) {
      score -= features.antipatternCount * 5; // -5 –∑–∞ –∫–∞–∂–¥—ã–π –∞–Ω—Ç–∏–ø–∞—Ç—Ç–µ—Ä–Ω
    }

    if (features.securityIssueCount) {
      score -= features.securityIssueCount * 15; // -15 –∑–∞ –∫–∞–∂–¥—É—é –ø—Ä–æ–±–ª–µ–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    }

    if (features.performanceIssueCount) {
      score -= features.performanceIssueCount * 8; // -8 –∑–∞ –∫–∞–∂–¥—É—é –ø—Ä–æ–±–ª–µ–º—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    }

    if (features.avgComplexity && features.avgComplexity > 10) {
      score -= (features.avgComplexity - 10) * 2; // —à—Ç—Ä–∞—Ñ –∑–∞ –≤—ã—Å–æ–∫—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    }

    // –ë–æ–Ω—É—Å—ã –∑–∞ —Ö–æ—Ä–æ—à–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    if (features.goodPatternCount) {
      score += features.goodPatternCount * 3; // +3 –∑–∞ –∫–∞–∂–¥—ã–π —Ö–æ—Ä–æ—à–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
    }

    return Math.max(0, Math.min(100, score));
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ Microsoft)
   */
  private calculateMaintainabilityIndex(features: Partial<ExtractedFeatures>): number {
    const avgComplexity = features.avgComplexity || 1;
    const linesOfCode = features.linesOfCode || 1;
    const duplications = features.duplicationRatio || 0;

    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –∏–Ω–¥–µ–∫—Å–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏
    let index =
      171 -
      5.2 * Math.log(avgComplexity) -
      0.23 * Math.log(linesOfCode) -
      16.2 * Math.log(avgComplexity);

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    index -= duplications * 20;

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –∞–Ω—Ç–∏–ø–∞—Ç—Ç–µ—Ä–Ω—ã
    if (features.antipatternCount) {
      index -= features.antipatternCount * 5;
    }

    return Math.max(0, Math.min(100, index));
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞
   */
  private calculateTechnicalDebtRatio(features: Partial<ExtractedFeatures>): number {
    let debtPoints = 0;
    let totalPoints = 100;

    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    if (features.duplicationRatio) {
      debtPoints += features.duplicationRatio * 25;
    }

    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥ –æ—Ç –∞–Ω—Ç–∏–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    if (features.antipatternCount) {
      debtPoints += features.antipatternCount * 3;
    }

    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥ –æ—Ç –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if (features.securityIssueCount) {
      debtPoints += features.securityIssueCount * 8;
    }

    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if (features.avgComplexity && features.avgComplexity > 10) {
      debtPoints += (features.avgComplexity - 10) * 1.5;
    }

    return Math.min(1, debtPoints / totalPoints);
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –¥–∏—Å–ø–µ—Ä—Å–∏—é –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª
   */
  private calculateVariance(numbers: number[]): number {
    if (numbers.length === 0) return 0;

    const mean = numbers.reduce((sum, n) => sum + n, 0) / numbers.length;
    const squaredDiffs = numbers.map(n => Math.pow(n - mean, 2));

    return squaredDiffs.reduce((sum, diff) => sum + diff, 0) / numbers.length;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
   */
  createFeatureSummary(features: ExtractedFeatures): string {
    const summary = [
      `üìä –ü—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:`,
      `   üìÅ –§–∞–π–ª–æ–≤: ${features.fileCount}`,
      `   üìè –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: ${features.linesOfCode}`,
      `   üîÑ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: ${(features.duplicationRatio * 100).toFixed(1)}%`,
      `   üìà –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: ${features.avgComplexity.toFixed(1)}`,
      `   ‚úÖ –•–æ—Ä–æ—à–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: ${features.goodPatternCount}`,
      `   ‚ùå –ê–Ω—Ç–∏–ø–∞—Ç—Ç–µ—Ä–Ω—ã: ${features.antipatternCount}`,
      `   üîí –ü—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${features.securityIssueCount}`,
      `   ‚ö° –ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${features.performanceIssueCount}`,
      ``,
      `üìà –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:`,
      `   üßº –ß–∏—Å—Ç–æ—Ç–∞ –∫–æ–¥–∞: ${features.codeSmellScore.toFixed(1)}/100`,
      `   üîß –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç—å: ${features.maintainabilityIndex.toFixed(1)}/100`,
      `   üí∏ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥: ${(features.technicalDebtRatio * 100).toFixed(1)}%`,
    ];

    return summary.join('\n');
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è ML –º–æ–¥–µ–ª–∏ (–≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è 0-1)
   */
  normalizeFeatures(features: ExtractedFeatures): Record<string, number> {
    return {
      duplicationRatio: features.duplicationRatio, // —É–∂–µ 0-1
      duplicateBlockCount: Math.min(1, features.duplicateBlockCount / 50), // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–æ 50 –±–ª–æ–∫–æ–≤
      avgDuplicateSize: Math.min(1, features.avgDuplicateSize / 100), // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–æ 100 —Å—Ç—Ä–æ–∫

      goodPatternCount: Math.min(1, features.goodPatternCount / 10), // –¥–æ 10 –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
      antipatternCount: Math.min(1, features.antipatternCount / 10),
      securityIssueCount: Math.min(1, features.securityIssueCount / 5), // –¥–æ 5 –ø—Ä–æ–±–ª–µ–º
      performanceIssueCount: Math.min(1, features.performanceIssueCount / 10),
      patternConfidenceAvg: features.patternConfidenceAvg / 100, // —É–∂–µ –ø—Ä–æ—Ü–µ–Ω—Ç

      avgComplexity: Math.min(1, features.avgComplexity / 50), // –¥–æ 50 —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
      maxComplexity: Math.min(1, features.maxComplexity / 100),
      complexityVariance: Math.min(1, features.complexityVariance / 100),

      fileCount: Math.min(1, features.fileCount / 1000), // –¥–æ 1000 —Ñ–∞–π–ª–æ–≤
      linesOfCode: Math.min(1, features.linesOfCode / 100000), // –¥–æ 100k —Å—Ç—Ä–æ–∫
      avgFileSize: Math.min(1, features.avgFileSize / 500), // –¥–æ 500 —Å—Ç—Ä–æ–∫ –Ω–∞ —Ñ–∞–π–ª

      codeSmellScore: features.codeSmellScore / 100, // —É–∂–µ 0-100
      maintainabilityIndex: features.maintainabilityIndex / 100,
      technicalDebtRatio: features.technicalDebtRatio, // —É–∂–µ 0-1
    };
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
   */
  private calculatePatternConfidenceAvg(patterns: any): number {
    if (!patterns || !patterns.detectedPatterns || patterns.detectedPatterns.length === 0) {
      return 0;
    }

    const totalConfidence = patterns.detectedPatterns.reduce((sum: number, pattern: any) => {
      return sum + (pattern.confidence || 0);
    }, 0);

    return totalConfidence / patterns.detectedPatterns.length;
  }
}
