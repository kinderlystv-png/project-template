/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç RecommendationEngine
 */

// –ò–º–ø–æ—Ä—Ç —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
const { RecommendationEngine } = require('./recommendations/RecommendationEngine.js');

async function testRecommendationEngine() {
  console.log('üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç RecommendationEngine...');

  try {
    // –¢–µ—Å—Ç —Å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const testContext = {
      type: 'dependency-vulnerability',
      severity: 'high',
      details: {
        packageName: 'lodash',
        currentVersion: '4.17.11',
        latestVersion: '4.17.21',
        vulnerability: 'CVE-2020-8203',
      },
    };

    console.log('üìã –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è:', testContext);

    const recommendation = RecommendationEngine.generateRecommendation(testContext);

    if (recommendation) {
      console.log('‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞:');
      console.log(`   üìå –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${recommendation.title}`);
      console.log(`   üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${recommendation.category}`);
      console.log(`   ‚ö†Ô∏è  –í–∞–∂–Ω–æ—Å—Ç—å: ${recommendation.severity}`);
      console.log(`   ‚è±Ô∏è  –í—Ä–µ–º—è: ${recommendation.estimatedTime}`);
      console.log(`   üîß –®–∞–≥–æ–≤: ${recommendation.fixTemplate.steps.length}`);

      if (recommendation.fixTemplate.steps.length > 0) {
        console.log(`   üìù –ü–µ—Ä–≤—ã–π —à–∞–≥: ${recommendation.fixTemplate.steps[0]}`);
      }

      console.log('\nüéâ SUCCESS: RecommendationEngine —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
      return true;
    } else {
      console.log('‚ùå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞');
      return false;
    }
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testRecommendationEngine()
  .then(success => {
    console.log('\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:', success ? 'SUCCESS' : 'FAILED');
    process.exit(success ? 0 : 1);
  })
  .catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
