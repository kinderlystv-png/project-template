#!/usr/bin/env node

import { program } from 'commander';
import { AIEnhancedAnalyzer } from './index.js';
import { AIReportGenerator } from './report-generator.js';
import * as path from 'path';

type ReportFormat = 'console' | 'json' | 'html' | 'markdown';

program.name('eap-ai').description('EAP Analyzer —Å –ò–ò —É–ª—É—á—à–µ–Ω–∏—è–º–∏').version('3.2.0');

program
  .command('analyze')
  .description('–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ —Å –ò–ò —É–ª—É—á—à–µ–Ω–∏—è–º–∏')
  .requiredOption('-p, --project <path>', '–ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
  .option('-f, --format <format>', '–§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞ (console, json, html, markdown)', 'console')
  .option('-o, --output <file>', '–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞')
  .action(async options => {
    try {
      const projectPath = path.resolve(options.project);
      const format = options.format as ReportFormat;

      console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç: ${projectPath}`);
      console.log(`üìä –§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞: ${format}`);

      const analyzer = new AIEnhancedAnalyzer();
      const result = await analyzer.analyzeProject(projectPath);

      const generator = new AIReportGenerator();
      const report = await generator.generateReport(result, { format });

      if (options.output && format !== 'console') {
        const fs = await import('fs/promises');
        await fs.writeFile(options.output, report);
        console.log(`‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${options.output}`);
      } else {
        console.log(report);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
      process.exit(1);
    }
  });

program.parse();
