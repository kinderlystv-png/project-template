import { GoldenStandardAnalyzer } from '../analyzer.js';
import {
  AIInsightsEngine,
  AIAnalysisResult,
  ExtractedFeatures,
  QualityPrediction,
  PatternAnalysis,
  DuplicationAnalysis,
  ComplexityAnalysis,
  AISummary,
} from '../modules/ai-insights/ai-insights-engine.js';
import { SimpleAnalysisResult } from '../analyzer.js';

export interface IntegratedAnalysisResult extends SimpleAnalysisResult {
  aiInsights?: AIAnalysisResult;
  structuralAnalysis?: {
    duplication: any;
    complexity: any;
    fileClassification: any;
  };
}

export class AIEnhancedAnalyzer {
  private baseAnalyzer: GoldenStandardAnalyzer;
  private aiEngine: AIInsightsEngine;

  constructor() {
    this.baseAnalyzer = new GoldenStandardAnalyzer();
    this.aiEngine = new AIInsightsEngine();
  }

  async analyzeProject(projectPath: string, options: any = {}): Promise<IntegratedAnalysisResult> {
    console.log(`üß† –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: ${projectPath}`);

    try {
      const baseResult = await this.baseAnalyzer.analyzeProject(projectPath);
      const structuralAnalysis = await this.baseAnalyzer.performStructuralAnalysis(projectPath);
      const aiResult = await this.aiEngine.analyze(projectPath, options);

      const integratedResult: IntegratedAnalysisResult = {
        ...baseResult,
        aiInsights: aiResult,
        structuralAnalysis,
      };

      return integratedResult;
    } catch (error) {
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: ${error instanceof Error ? error.message : String(error)}`
      );
      const baseResult = await this.baseAnalyzer.analyzeProject(projectPath);
      return baseResult;
    }
  }

  generateEnhancedSummary(result: IntegratedAnalysisResult): string {
    const lines: string[] = [];
    lines.push('ü§ñ === –†–ê–°–®–ò–†–ï–ù–ù–´–ô –û–¢–ß–ï–¢ EAP + AI ===');
    lines.push('');
    lines.push('üìä –ë–ê–ó–û–í–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê:');
    lines.push(`   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${result.fileCount}`);
    lines.push('');

    if (result.aiInsights) {
      lines.push('üß† AI –ê–ù–ê–õ–ò–¢–ò–ö–ê:');
      lines.push(`   –û–±—â–∞—è AI –æ—Ü–µ–Ω–∫–∞: ${result.aiInsights.summary.overallQuality}/100`);
      lines.push(
        `   –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: ${(result.aiInsights.qualityPrediction.confidence * 100).toFixed(1)}%`
      );
      lines.push('');
    }

    lines.push('================================');
    return lines.join('\n');
  }
}

export {
  AIAnalysisResult,
  ExtractedFeatures,
  QualityPrediction,
  PatternAnalysis,
  DuplicationAnalysis,
  ComplexityAnalysis,
  AISummary,
};

export default AIEnhancedAnalyzer;
