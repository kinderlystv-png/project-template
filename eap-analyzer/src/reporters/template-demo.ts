/**
 * –¢–µ—Å—Ç–æ–≤—ã–π –¥–µ–º–æ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ TemplateManager
 */

import { initializeTemplateLibrary, TemplateFormat, TemplateCategory } from './templates/index';

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–º–æ-—Ñ—É–Ω–∫—Ü–∏—è
 */
export async function templateLibraryDemo(): Promise<void> {
  console.log('üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ EAP v4.0');
  console.log('='.repeat(50));

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É
    console.log('1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤...');
    const manager = await initializeTemplateLibrary();
    console.log('‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\n2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤:');
    const stats = manager.getManagerStats();
    console.log(`   üìä –í—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤: ${stats.registry.totalTemplates}`);
    console.log(`   üìÑ –í—Å–µ–≥–æ —Å–µ–∫—Ü–∏–π: ${stats.registry.totalSections}`);
    console.log(`   üíæ –†–∞–∑–º–µ—Ä –∫—ç—à–∞: ${stats.registry.cacheSize}`);

    console.log('\n   –ü–æ —Ñ–æ—Ä–º–∞—Ç–∞–º:');
    Object.entries(stats.registry.byFormat).forEach(([format, count]) => {
      console.log(`   - ${format}: ${count} —à–∞–±–ª–æ–Ω–æ–≤`);
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    console.log('\n3. –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:');

    // Markdown —à–∞–±–ª–æ–Ω—ã
    const markdownTemplates = manager.getAvailableTemplates(TemplateFormat.MARKDOWN);
    console.log(`\n   üìù Markdown (${markdownTemplates.length}):`);
    markdownTemplates.forEach(template => {
      console.log(`   - ${template.metadata.id}: ${template.metadata.name}`);
      console.log(`     ${template.metadata.description}`);
    });

    // JSON —à–∞–±–ª–æ–Ω—ã
    const jsonTemplates = manager.getAvailableTemplates(TemplateFormat.JSON);
    console.log(`\n   üîß JSON (${jsonTemplates.length}):`);
    jsonTemplates.forEach(template => {
      console.log(`   - ${template.metadata.id}: ${template.metadata.name}`);
      console.log(`     ${template.metadata.description}`);
    });

    // HTML —à–∞–±–ª–æ–Ω—ã
    const htmlTemplates = manager.getAvailableTemplates(TemplateFormat.HTML);
    console.log(`\n   üåê HTML (${htmlTemplates.length}):`);
    htmlTemplates.forEach(template => {
      console.log(`   - ${template.metadata.id}: ${template.metadata.name}`);
      console.log(`     ${template.metadata.description}`);
    });

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    console.log('\n4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:');

    // –ö—Ä–∞—Ç–∫–∏–π Markdown –æ—Ç—á–µ—Ç
    console.log('\n   üìù Markdown Summary Report:');
    const markdownPreview = await manager.previewTemplate('markdown-summary-report');
    if (markdownPreview.success) {
      console.log('   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!');
      console.log(`   ‚è±Ô∏è –í—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞: ${markdownPreview.renderTime}ms`);
      console.log('   –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:');
      console.log('   ' + markdownPreview.content!.substring(0, 200) + '...');
    } else {
      console.log('   ‚ùå –û—à–∏–±–∫–∞:', markdownPreview.error);
    }

    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π JSON –æ—Ç—á–µ—Ç
    console.log('\n   üîß JSON Minimal Report:');
    const jsonPreview = await manager.previewTemplate('json-minimal-report');
    if (jsonPreview.success) {
      console.log('   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!');
      console.log(`   ‚è±Ô∏è –í—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞: ${jsonPreview.renderTime}ms`);
      console.log('   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:');
      try {
        const formatted = JSON.stringify(JSON.parse(jsonPreview.content!), null, 2);
        console.log(
          '   ' +
            formatted
              .split('\n')
              .map(line => '   ' + line)
              .join('\n')
        );
      } catch {
        console.log('   ' + jsonPreview.content);
      }
    } else {
      console.log('   ‚ùå –û—à–∏–±–∫–∞:', jsonPreview.error);
    }

    // –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤
    console.log('\n5. –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤:');

    // –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const standardTemplates = manager.getTemplatesByCategory(TemplateCategory.STANDARD);
    console.log(`\n   üéØ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã (${standardTemplates.length}):`);
    standardTemplates.forEach(template => {
      console.log(`   - ${template.metadata.name} (${template.metadata.format})`);
    });

    // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º
    const searchResult = manager.searchTemplates({
      tags: ['summary', 'brief'],
      includeCustom: false,
    });
    console.log(
      `\n   üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º 'summary', 'brief': ${searchResult.totalCount} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`
    );
    searchResult.templates.forEach(template => {
      console.log(`   - ${template.metadata.name}: ${template.metadata.tags?.join(', ')}`);
    });

    // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —à–∞–±–ª–æ–Ω—ã
    console.log('\n6. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —à–∞–±–ª–æ–Ω—ã:');
    const recommended = manager.getRecommendedTemplates(TemplateFormat.MARKDOWN);
    console.log(`\n   üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ Markdown —à–∞–±–ª–æ–Ω—ã (${recommended.length}):`);
    recommended.forEach((template, index) => {
      console.log(`   ${index + 1}. ${template.metadata.name}`);
      console.log(`      –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${template.metadata.complexity}`);
      console.log(`      –¢–µ–≥–∏: ${template.metadata.tags?.join(', ') || '–Ω–µ—Ç'}`);
    });

    console.log('\n‚úÖ –î–µ–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    console.log('='.repeat(50));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ:', error);
    throw error;
  }
}

/**
 * –ó–∞–ø—É—Å–∫ –¥–µ–º–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
 */
if (require.main === module) {
  templateLibraryDemo().catch(console.error);
}
