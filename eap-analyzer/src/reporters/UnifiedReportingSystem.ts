/**
 * Unified Reporting System
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ä–µ–ø–æ—Ä—Ç–µ—Ä–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
 */

import { Project } from '../types/Project';
import { ReporterFactory } from './ReporterFactory';
import { ExecutiveSummaryReporter } from './specialized/ExecutiveSummaryReporter';
import { TechnicalDebtReporter } from './specialized/TechnicalDebtReporter';
import { RoadmapReporter } from './specialized/RoadmapReporter';
import { IReporter, ReportData, ReportResult, ReporterConfig, ReportFormat } from './interfaces';

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤
 */
export interface UnifiedReportingConfig {
  formats?: ReportFormat[];
  outputDir?: string;
  includeExecutiveSummary?: boolean;
  includeTechnicalDebt?: boolean;
  includeRoadmap?: boolean;
  customReporters?: IReporter[];
  reportingOptions?: {
    [key: string]: any;
  };
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
 */
export interface UnifiedReportResult {
  reports: Map<string, ReportResult>;
  summary: {
    totalReports: number;
    generatedAt: Date;
    formats: ReportFormat[];
    outputPaths: string[];
    errors: string[];
  };
  metadata: Record<string, any>;
}

/**
 * –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ EAP v4.0
 */
export class UnifiedReportingSystem {
  private config: UnifiedReportingConfig;
  private reporters: Map<string, IReporter> = new Map();
  private specializedReporters: Map<string, IReporter> = new Map();

  constructor(config: UnifiedReportingConfig = {}) {
    this.config = {
      formats: [ReportFormat.MARKDOWN, ReportFormat.JSON, ReportFormat.HTML],
      outputDir: 'reports',
      includeExecutiveSummary: true,
      includeTechnicalDebt: true,
      includeRoadmap: true,
      ...config,
    };

    this.initializeReporters();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ—Ä—Ç–µ—Ä—ã
   */
  private initializeReporters(): void {
    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ–ø–æ—Ä—Ç–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    for (const format of this.config.formats!) {
      try {
        const reporter = ReporterFactory.createReporter(format, {
          outputDir: this.config.outputDir,
          verbose: true,
        });
        this.reporters.set(format, reporter);
      } catch (error) {
        console.warn(`Failed to create reporter for format ${format}:`, error);
      }
    }

    // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ—Ä—Ç–µ—Ä—ã
    if (this.config.includeExecutiveSummary) {
      this.specializedReporters.set(
        'executive-summary',
        new ExecutiveSummaryReporter({ outputDir: this.config.outputDir })
      );
    }

    if (this.config.includeTechnicalDebt) {
      this.specializedReporters.set(
        'technical-debt',
        new TechnicalDebtReporter({ outputDir: this.config.outputDir })
      );
    }

    if (this.config.includeRoadmap) {
      this.specializedReporters.set(
        'roadmap',
        new RoadmapReporter({ outputDir: this.config.outputDir })
      );
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–µ–ø–æ—Ä—Ç–µ—Ä—ã
    if (this.config.customReporters) {
      for (let i = 0; i < this.config.customReporters.length; i++) {
        const reporter = this.config.customReporters[i];
        this.specializedReporters.set(`custom-${i}`, reporter);
      }
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ—Ç—á–µ—Ç—ã
   * @param project - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø—Ä–æ–µ–∫—Ç
   * @param data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
   */
  async generateAllReports(project: Project, data: ReportData): Promise<UnifiedReportResult> {
    console.log('üöÄ Starting unified report generation...');

    const reports = new Map<string, ReportResult>();
    const errors: string[] = [];
    const outputPaths: string[] = [];

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
    await this.generateStandardReports(project, data, reports, errors, outputPaths);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
    await this.generateSpecializedReports(project, data, reports, errors, outputPaths);

    const result: UnifiedReportResult = {
      reports,
      summary: {
        totalReports: reports.size,
        generatedAt: new Date(),
        formats: this.config.formats!,
        outputPaths,
        errors,
      },
      metadata: {
        projectName: data.projectName,
        reportingSystemVersion: '4.0.0',
        configUsed: this.config,
      },
    };

    console.log(`‚úÖ Generated ${reports.size} reports successfully`);
    if (errors.length > 0) {
      console.warn(`‚ö†Ô∏è Encountered ${errors.length} errors during generation`);
    }

    return result;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç—á–µ—Ç—ã (Markdown, JSON, HTML)
   */
  private async generateStandardReports(
    project: Project,
    data: ReportData,
    reports: Map<string, ReportResult>,
    errors: string[],
    outputPaths: string[]
  ): Promise<void> {
    for (const [format, reporter] of this.reporters) {
      try {
        console.log(`üìù Generating ${format} report...`);

        const reportResult = await reporter.generateReport(project, data);
        const savedPath = await reporter.saveReport(reportResult);

        reports.set(`standard-${format}`, reportResult);
        outputPaths.push(savedPath);

        console.log(`‚úÖ ${format} report saved to: ${savedPath}`);
      } catch (error) {
        const errorMsg = `Failed to generate ${format} report: ${error}`;
        errors.push(errorMsg);
        console.error(`‚ùå ${errorMsg}`);
      }
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
   */
  private async generateSpecializedReports(
    project: Project,
    data: ReportData,
    reports: Map<string, ReportResult>,
    errors: string[],
    outputPaths: string[]
  ): Promise<void> {
    for (const [name, reporter] of this.specializedReporters) {
      try {
        console.log(`üìä Generating ${name} report...`);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ—Ä—Ç–µ—Ä—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        this.configureSpecializedReporter(name, reporter);

        const reportResult = await reporter.generateReport(project, data);
        const savedPath = await reporter.saveReport(reportResult);

        reports.set(name, reportResult);
        outputPaths.push(savedPath);

        console.log(`‚úÖ ${name} report saved to: ${savedPath}`);
      } catch (error) {
        const errorMsg = `Failed to generate ${name} report: ${error}`;
        errors.push(errorMsg);
        console.error(`‚ùå ${errorMsg}`);
      }
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ—Ä—Ç–µ—Ä—ã
   */
  private configureSpecializedReporter(name: string, reporter: IReporter): void {
    const options = this.config.reportingOptions?.[name];
    if (!options) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ —Ä–µ–ø–æ—Ä—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    if ('configure' in reporter && typeof reporter.configure === 'function') {
      (reporter as any).configure(options);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
   * @param reportType - –¢–∏–ø –æ—Ç—á–µ—Ç–∞ ('executive-summary', 'technical-debt', 'roadmap', –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç)
   * @param project - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø—Ä–æ–µ–∫—Ç
   * @param data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
   */
  async generateReport(
    reportType: string,
    project: Project,
    data: ReportData
  ): Promise<ReportResult> {
    console.log(`üìù Generating ${reportType} report...`);

    let reporter: IReporter | undefined;

    // –ò—â–µ–º —Å—Ä–µ–¥–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–ø–æ—Ä—Ç–µ—Ä–æ–≤
    if (this.specializedReporters.has(reportType)) {
      reporter = this.specializedReporters.get(reportType);
    }
    // –ò—â–µ–º —Å—Ä–µ–¥–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ä–µ–ø–æ—Ä—Ç–µ—Ä–æ–≤
    else if (this.reporters.has(reportType)) {
      reporter = this.reporters.get(reportType);
    }
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç–µ—Ä –ø–æ —Ñ–æ—Ä–º–∞—Ç—É
    else {
      try {
        const format = reportType as ReportFormat;
        reporter = ReporterFactory.createReporter(format, {
          outputDir: this.config.outputDir,
        });
      } catch (error) {
        throw new Error(`Unknown report type: ${reportType}`);
      }
    }

    if (!reporter) {
      throw new Error(`Reporter not found for type: ${reportType}`);
    }

    return await reporter.generateReport(project, data);
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –æ—Ç—á–µ—Ç—ã
   * @param unifiedResult - –†–µ–∑—É–ª—å—Ç–∞—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  async saveAllReports(unifiedResult: UnifiedReportResult): Promise<string[]> {
    const savedPaths: string[] = [];

    for (const [name, reportResult] of unifiedResult.reports) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–µ–ø–æ—Ä—Ç–µ—Ä
        let reporter: IReporter | undefined;

        if (this.specializedReporters.has(name)) {
          reporter = this.specializedReporters.get(name);
        } else {
          const format = name.replace('standard-', '') as ReportFormat;
          reporter = this.reporters.get(format);
        }

        if (reporter) {
          const savedPath = await reporter.saveReport(reportResult);
          savedPaths.push(savedPath);
        }
      } catch (error) {
        console.error(`Failed to save report ${name}:`, error);
      }
    }

    return savedPaths;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ –≤—Å–µ–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
   * @param unifiedResult - –†–µ–∑—É–ª—å—Ç–∞—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  async generateSummaryReport(unifiedResult: UnifiedReportResult): Promise<ReportResult> {
    const content = this.buildSummaryContent(unifiedResult);

    return {
      content,
      format: ReportFormat.MARKDOWN,
      timestamp: new Date(),
      metadata: {
        reportType: 'unified-summary',
        totalReports: unifiedResult.summary.totalReports,
        ...unifiedResult.metadata,
      },
    };
  }

  /**
   * –°—Ç—Ä–æ–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
   */
  private buildSummaryContent(unifiedResult: UnifiedReportResult): string {
    const { summary, metadata } = unifiedResult;

    return `# EAP Analysis - Report Summary

**Project:** ${metadata.projectName}
**Generated:** ${summary.generatedAt.toLocaleString()}
**System Version:** ${metadata.reportingSystemVersion}

## üìä Generation Summary

- **Total Reports:** ${summary.totalReports}
- **Formats Generated:** ${summary.formats.join(', ')}
- **Output Files:** ${summary.outputPaths.length}
- **Errors:** ${summary.errors.length}

## üìÅ Generated Reports

${this.buildReportsList(unifiedResult)}

## üìà Report Highlights

${this.buildReportHighlights(unifiedResult)}

${summary.errors.length > 0 ? this.buildErrorsSection(summary.errors) : ''}

---

*All reports are available in the specified output directory and provide comprehensive analysis of your project.*`;
  }

  /**
   * –°—Ç—Ä–æ–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
   */
  private buildReportsList(unifiedResult: UnifiedReportResult): string {
    const reportsList = [];

    for (const [name, report] of unifiedResult.reports) {
      const formatIcon = this.getFormatIcon(report.format);
      const timestamp = report.timestamp.toLocaleString();

      reportsList.push(
        `- ${formatIcon} **${name}** (${report.format}) - Generated at ${timestamp}`
      );
    }

    return reportsList.join('\n');
  }

  /**
   * –°—Ç—Ä–æ–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –æ—Ç—á–µ—Ç–æ–≤
   */
  private buildReportHighlights(unifiedResult: UnifiedReportResult): string {
    const highlights = [];

    // –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –æ—Ç—á–µ—Ç–æ–≤
    for (const [name, report] of unifiedResult.reports) {
      if (name.includes('executive-summary')) {
        highlights.push(
          'üìã **Executive Summary** - High-level business overview and strategic recommendations'
        );
      } else if (name.includes('technical-debt')) {
        highlights.push(
          'üîß **Technical Debt Analysis** - Detailed breakdown of technical debt and refactoring plan'
        );
      } else if (name.includes('roadmap')) {
        highlights.push(
          'üó∫Ô∏è **Development Roadmap** - Strategic planning and implementation timeline'
        );
      } else if (name.includes('standard')) {
        const format = report.format;
        highlights.push(
          `üìÑ **${format.toUpperCase()} Report** - Comprehensive analysis in ${format} format`
        );
      }
    }

    return highlights.length > 0 ? highlights.join('\n') : 'No specific highlights available.';
  }

  /**
   * –°—Ç—Ä–æ–∏—Ç —Å–µ–∫—Ü–∏—é –æ—à–∏–±–æ–∫
   */
  private buildErrorsSection(errors: string[]): string {
    return `
## ‚ö†Ô∏è Generation Errors

The following errors occurred during report generation:

${errors.map(error => `- ${error}`).join('\n')}

*Please review these errors and ensure all required dependencies are available.*`;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞
   */
  private getFormatIcon(format: ReportFormat): string {
    switch (format) {
      case ReportFormat.MARKDOWN:
        return 'üìù';
      case ReportFormat.JSON:
        return 'üìä';
      case ReportFormat.HTML:
        return 'üåê';
      case ReportFormat.PLAIN_TEXT:
        return 'üìÑ';
      default:
        return 'üìã';
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–ø–æ—Ä—Ç–µ—Ä–æ–≤
   */
  getAvailableReporters(): string[] {
    const reporters = [];

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ–ø–æ—Ä—Ç–µ—Ä—ã
    for (const format of this.reporters.keys()) {
      reporters.push(`standard-${format}`);
    }

    // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ—Ä—Ç–µ—Ä—ã
    for (const name of this.specializedReporters.keys()) {
      reporters.push(name);
    }

    return reporters;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
   */
  validateSystem(): { isReady: boolean; issues: string[] } {
    const issues: string[] = [];

    if (this.reporters.size === 0) {
      issues.push('No standard reporters initialized');
    }

    if (!this.config.outputDir) {
      issues.push('Output directory not configured');
    }

    if (!this.config.formats || this.config.formats.length === 0) {
      issues.push('No output formats specified');
    }

    return {
      isReady: issues.length === 0,
      issues,
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã
   */
  updateConfig(newConfig: Partial<UnifiedReportingConfig>): void {
    this.config = { ...this.config, ...newConfig };

    // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø–æ—Ä—Ç–µ—Ä—ã –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (
      newConfig.formats ||
      newConfig.includeExecutiveSummary !== undefined ||
      newConfig.includeTechnicalDebt !== undefined ||
      newConfig.includeRoadmap !== undefined
    ) {
      this.reporters.clear();
      this.specializedReporters.clear();
      this.initializeReporters();
    }
  }
}
