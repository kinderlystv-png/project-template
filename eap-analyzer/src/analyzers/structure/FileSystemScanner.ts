/**
 * FileSystemScanner - –ú–æ–¥—É–ª—å –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
 *
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
 * —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */

import * as glob from 'glob';
import { stat } from 'fs/promises';
import { relative, extname, dirname } from 'path';

export interface ScanOptions {
  includePatterns?: string[];
  excludePatterns?: string[];
  maxFiles?: number;
  maxDepth?: number;
  followSymlinks?: boolean;
}

export interface ScannedFile {
  absolutePath: string;
  relativePath: string;
  size: number;
  extension: string;
  isDirectory: boolean;
  depth: number;
  modifiedTime: Date;
}

/**
 * –í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫–∞–Ω–µ—Ä —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
export class FileSystemScanner {
  private static readonly DEFAULT_INCLUDE_PATTERNS = [
    '**/*.{js,jsx,ts,tsx,vue,svelte}', // Frontend frameworks
    '**/*.{css,scss,sass,less,styl}', // Styles
    '**/*.{html,htm,xml}', // Markup
    '**/*.{json,yaml,yml,toml,ini}', // Configuration
    '**/*.{md,mdx,txt,rst}', // Documentation
    '**/*.{py,java,cs,cpp,c,rs,go,rb}', // Backend languages
    '**/*.{php,perl,lua,dart,kt}', // Additional languages
  ];

  private static readonly DEFAULT_EXCLUDE_PATTERNS = [
    '**/node_modules/**',
    '**/.git/**',
    '**/dist/**',
    '**/build/**',
    '**/coverage/**',
    '**/.next/**',
    '**/.nuxt/**',
    '**/.svelte-kit/**',
    '**/target/**',
    '**/bin/**',
    '**/obj/**',
    '**/*.min.js',
    '**/*.min.css',
    '**/vendor/**',
    '**/__pycache__/**',
    '**/.pytest_cache/**',
    '**/test-results/**',
    '**/playwright-report/**',
  ];

  /**
   * –°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
   */
  static async scanProject(projectPath: string, options: ScanOptions = {}): Promise<ScannedFile[]> {
    const {
      includePatterns = FileSystemScanner.DEFAULT_INCLUDE_PATTERNS,
      excludePatterns = FileSystemScanner.DEFAULT_EXCLUDE_PATTERNS,
      maxFiles = 10000,
      maxDepth = 20,
      followSymlinks = false,
    } = options;

    console.log(`üìÅ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: ${projectPath}`);
    console.log(`üéØ –®–∞–±–ª–æ–Ω—ã –≤–∫–ª—é—á–µ–Ω–∏—è: ${includePatterns.length}`);
    console.log(`üö´ –®–∞–±–ª–æ–Ω—ã –∏—Å–∫–ª—é—á–µ–Ω–∏—è: ${excludePatterns.length}`);

    const allFiles: string[] = [];

    // –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ –∫–∞–∂–¥–æ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É –≤–∫–ª—é—á–µ–Ω–∏—è
    for (let i = 0; i < includePatterns.length; i++) {
      const pattern = includePatterns[i];

      try {
        const files = await glob.glob(pattern, {
          cwd: projectPath,
          ignore: excludePatterns,
          absolute: true,
          maxDepth,
        });

        allFiles.push(...files);

        if (i % 2 === 0) {
          console.log(
            `üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${i + 1}/${includePatterns.length} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤, –Ω–∞–π–¥–µ–Ω–æ ${allFiles.length} —Ñ–∞–π–ª–æ–≤`
          );
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ ${pattern}:`, error);
      }
    }

    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const uniqueFiles = [...new Set(allFiles)].slice(0, maxFiles);
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${uniqueFiles.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤`);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    return await FileSystemScanner.analyzeFiles(uniqueFiles, projectPath);
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
   */
  private static async analyzeFiles(
    filePaths: string[],
    projectPath: string
  ): Promise<ScannedFile[]> {
    const scannedFiles: ScannedFile[] = [];
    const batchSize = 50; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ—Ä—Ü–∏—è–º–∏

    for (let i = 0; i < filePaths.length; i += batchSize) {
      const batch = filePaths.slice(i, i + batchSize);

      const batchResults = await Promise.allSettled(
        batch.map(filePath => FileSystemScanner.analyzeFile(filePath, projectPath))
      );

      for (const result of batchResults) {
        if (result.status === 'fulfilled' && result.value) {
          scannedFiles.push(result.value);
        } else if (result.status === 'rejected') {
          console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞:`, result.reason);
        }
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
      if (filePaths.length > 200 && i % 200 === 0) {
        console.log(
          `üìà –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${Math.min(i + batchSize, filePaths.length)}/${filePaths.length} —Ñ–∞–π–ª–æ–≤`
        );
      }
    }

    console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: ${scannedFiles.length} —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ`);
    return scannedFiles;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
   */
  private static async analyzeFile(
    filePath: string,
    projectPath: string
  ): Promise<ScannedFile | null> {
    try {
      const stats = await stat(filePath);
      const relativePath = relative(projectPath, filePath);
      const pathParts = relativePath.split(/[/\\]/);

      return {
        absolutePath: filePath,
        relativePath,
        size: stats.size,
        extension: extname(filePath).toLowerCase(),
        isDirectory: stats.isDirectory(),
        depth: pathParts.length - 1,
        modifiedTime: stats.mtime,
      };
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, error);
      return null;
    }
  }

  /**
   * –§–∏–ª—å—Ç—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
   */
  static filterFiles(
    files: ScannedFile[],
    criteria: {
      minSize?: number;
      maxSize?: number;
      extensions?: string[];
      excludeExtensions?: string[];
      maxDepth?: number;
      modifiedAfter?: Date;
    }
  ): ScannedFile[] {
    return files.filter(file => {
      // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–º–µ—Ä—É
      if (criteria.minSize !== undefined && file.size < criteria.minSize) return false;
      if (criteria.maxSize !== undefined && file.size > criteria.maxSize) return false;

      // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
      if (criteria.extensions && !criteria.extensions.includes(file.extension)) return false;
      if (criteria.excludeExtensions && criteria.excludeExtensions.includes(file.extension))
        return false;

      // –§–∏–ª—å—Ç—Ä –ø–æ –≥–ª—É–±–∏–Ω–µ
      if (criteria.maxDepth !== undefined && file.depth > criteria.maxDepth) return false;

      // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      if (criteria.modifiedAfter && file.modifiedTime < criteria.modifiedAfter) return false;

      return true;
    });
  }

  /**
   * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
   */
  static groupByDirectory(files: ScannedFile[]): Map<string, ScannedFile[]> {
    const grouped = new Map<string, ScannedFile[]>();

    for (const file of files) {
      const directory = dirname(file.relativePath);
      const existing = grouped.get(directory) || [];
      existing.push(file);
      grouped.set(directory, existing);
    }

    return grouped;
  }

  /**
   * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
   */
  static groupByExtension(files: ScannedFile[]): Map<string, ScannedFile[]> {
    const grouped = new Map<string, ScannedFile[]>();

    for (const file of files) {
      const extension = file.extension || 'no-extension';
      const existing = grouped.get(extension) || [];
      existing.push(file);
      grouped.set(extension, existing);
    }

    return grouped;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  static getScanStatistics(files: ScannedFile[]): {
    totalFiles: number;
    totalSize: number;
    averageSize: number;
    extensionCounts: Record<string, number>;
    directoryCounts: Record<string, number>;
    depthDistribution: Record<number, number>;
    largestFiles: ScannedFile[];
    oldestFiles: ScannedFile[];
    newestFiles: ScannedFile[];
  } {
    const totalFiles = files.length;
    const totalSize = files.reduce((sum, file) => sum + file.size, 0);
    const averageSize = totalFiles > 0 ? totalSize / totalFiles : 0;

    // –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
    const extensionCounts: Record<string, number> = {};
    for (const file of files) {
      const ext = file.extension || 'no-extension';
      extensionCounts[ext] = (extensionCounts[ext] || 0) + 1;
    }

    // –ü–æ–¥—Å—á–µ—Ç –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
    const directoryCounts: Record<string, number> = {};
    for (const file of files) {
      const dir = dirname(file.relativePath);
      directoryCounts[dir] = (directoryCounts[dir] || 0) + 1;
    }

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥–ª—É–±–∏–Ω–µ
    const depthDistribution: Record<number, number> = {};
    for (const file of files) {
      depthDistribution[file.depth] = (depthDistribution[file.depth] || 0) + 1;
    }

    // –°–∞–º—ã–µ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã
    const largestFiles = [...files].sort((a, b) => b.size - a.size).slice(0, 10);

    // –°–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
    const oldestFiles = [...files]
      .sort((a, b) => a.modifiedTime.getTime() - b.modifiedTime.getTime())
      .slice(0, 10);

    // –°–∞–º—ã–µ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    const newestFiles = [...files]
      .sort((a, b) => b.modifiedTime.getTime() - a.modifiedTime.getTime())
      .slice(0, 10);

    return {
      totalFiles,
      totalSize,
      averageSize,
      extensionCounts,
      directoryCounts,
      depthDistribution,
      largestFiles,
      oldestFiles,
      newestFiles,
    };
  }
}

export default FileSystemScanner;
