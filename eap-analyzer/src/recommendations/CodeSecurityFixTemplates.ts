/**
 * CodeSecurityFixTemplates - –®–∞–±–ª–æ–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞
 * 
 * Phase 5.2.1: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ fix templates –¥–ª—è code security issues
 */

import { SecurityRecommendation, IssueContext } from './RecommendationEngine.js';

export class CodeSecurityFixTemplates {
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç fix –¥–ª—è hardcoded secrets
   */
  static generateSecretFix(secretData: {
    type: string;
    file: string;
    line: number;
    secretPattern: string;
    context: string;
  }): SecurityRecommendation {
    const { type, file, line, secretPattern } = secretData;

    return {
      id: `secret-${type}`,
      title: `Hardcoded Secret: ${type}`,
      description: `–ù–∞–π–¥–µ–Ω –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç –≤ ${file}:${line}`,
      severity: 'critical',
      category: 'code',
      fixTemplate: {
        steps: [
          'üö® –ù–ï–ú–ï–î–õ–ï–ù–ù–û —É–¥–∞–ª–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç –∏–∑ –∫–æ–¥–∞',
          'üîë –†–æ—Ç–∏—Ä—É–π—Ç–µ —Å–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç',
          'üìÅ –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –¥–ª—è —Å–µ–∫—Ä–µ—Ç–æ–≤',
          'üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è',
          '‚úÖ –î–æ–±–∞–≤—å—Ç–µ .env –≤ .gitignore'
        ],
        beforeCode: this.getSecretBeforeExample(type, secretPattern),
        afterCode: this.getSecretAfterExample(type),
        commands: [
          'echo ".env" >> .gitignore',
          `echo "${type.toUpperCase()}_SECRET=your_new_secret_here" >> .env`,
          'git add .gitignore',
          'git commit -m "Add .env to gitignore"',
          '# –í–ê–ñ–ù–û: –†–æ—Ç–∏—Ä—É–π—Ç–µ —Å—Ç–∞—Ä—ã–π —Å–µ–∫—Ä–µ—Ç –≤ —Å–µ—Ä–≤–∏—Å–µ!'
        ],
        codeExample: this.getSecretImplementationExample(type)
      },
      documentation: {
        links: [
          'https://12factor.net/config',
          'https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_credentials',
          'https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html'
        ],
        explanation: '–°–µ–∫—Ä–µ—Ç—ã –≤ –∫–æ–¥–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º –∫—Ç–æ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é –∏ Git –∏—Å—Ç–æ—Ä–∏–∏'
      },
      estimatedTime: '45-60 –º–∏–Ω—É—Ç (–≤–∫–ª—é—á–∞—è —Ä–æ—Ç–∞—Ü–∏—é —Å–µ–∫—Ä–µ—Ç–∞)',
      difficulty: 'easy'
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç fix –¥–ª—è –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
   */
  static generateUnsafeFunctionFix(functionData: {
    functionName: string;
    file: string;
    line: number;
    context: string;
    risk: string;
  }): SecurityRecommendation {
    const { functionName, file, line, risk } = functionData;

    return {
      id: `unsafe-${functionName}`,
      title: `–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: ${functionName}`,
      description: `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ${functionName} –≤ ${file}:${line}`,
      severity: this.getUnsafeFunctionSeverity(functionName),
      category: 'code',
      fixTemplate: {
        steps: [
          '–ò–∑—É—á–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏',
          '–í—ã–±–µ—Ä–∏—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É',
          '–î–æ–±–∞–≤—å—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
          '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–æ–≤—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é',
          '–£–¥–∞–ª–∏—Ç–µ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é'
        ],
        beforeCode: this.getUnsafeFunctionBefore(functionName),
        afterCode: this.getUnsafeFunctionAfter(functionName),
        codeExample: this.getUnsafeFunctionExplanation(functionName)
      },
      documentation: {
        links: [
          'https://owasp.org/www-community/vulnerabilities/',
          'https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html',
          'https://developer.mozilla.org/en-US/docs/Web/Security'
        ],
        explanation: `${functionName}: ${risk}`
      },
      estimatedTime: this.getUnsafeFunctionFixTime(functionName),
      difficulty: this.getUnsafeFunctionDifficulty(functionName)
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç fix –¥–ª—è SQL injection
   */
  static generateSQLInjectionFix(sqlData: {
    query: string;
    file: string;
    line: number;
    type: 'concatenation' | 'template' | 'dynamic';
  }): SecurityRecommendation {
    const { query, file, line, type } = sqlData;

    return {
      id: 'sql-injection',
      title: 'SQL Injection —É—è–∑–≤–∏–º–æ—Å—Ç—å',
      description: `–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è SQL injection –≤ ${file}:${line}`,
      severity: 'critical',
      category: 'code',
      fixTemplate: {
        steps: [
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã',
          '–í–∞–ª–∏–¥–∏—Ä—É–π—Ç–µ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –≤—Ö–æ–¥—ã',
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ORM –∏–ª–∏ query builder',
          '–ü—Ä–∏–º–µ–Ω–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π –¥–ª—è –ë–î',
          '–¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ SQL injection'
        ],
        beforeCode: this.getSQLInjectionBefore(type, query),
        afterCode: this.getSQLInjectionAfter(type),
        codeExample: `// SQL Injection –ø—Ä–æ–≤–µ—Ä–∫–∞:
// 1. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –≤ SQL
// 2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ prepared statements
// 3. –í–∞–ª–∏–¥–∏—Ä—É–π—Ç–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
// 4. –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–π—Ç–µ –≤—Ö–æ–¥—ã`
      },
      documentation: {
        links: [
          'https://owasp.org/www-community/attacks/SQL_Injection',
          'https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html',
          'https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html'
        ],
        explanation: 'SQL Injection –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞—Ç–∞–∫—É—é—â–µ–º—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ SQL –∫–æ–º–∞–Ω–¥—ã'
      },
      estimatedTime: '1-2 —á–∞—Å–∞',
      difficulty: 'medium'
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç fix –¥–ª—è XSS —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
   */
  static generateXSSFix(xssData: {
    type: 'reflected' | 'stored' | 'dom';
    file: string;
    line: number;
    context: string;
  }): SecurityRecommendation {
    const { type, file, line } = xssData;

    return {
      id: `xss-${type}`,
      title: `XSS —É—è–∑–≤–∏–º–æ—Å—Ç—å: ${type}`,
      description: `–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è ${type} XSS –≤ ${file}:${line}`,
      severity: 'high',
      category: 'code',
      fixTemplate: {
        steps: [
          '–°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–π—Ç–µ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –≤—Ö–æ–¥—ã',
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤—ã–≤–æ–¥–∞',
          '–ü—Ä–∏–º–µ–Ω—è–π—Ç–µ Content Security Policy',
          '–í–∞–ª–∏–¥–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ',
          '–¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ XSS –∞—Ç–∞–∫–∏'
        ],
        beforeCode: this.getXSSBefore(type),
        afterCode: this.getXSSAfter(type),
        codeExample: this.getXSSExplanation(type)
      },
      documentation: {
        links: [
          'https://owasp.org/www-community/attacks/xss/',
          'https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html',
          'https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP'
        ],
        explanation: `${type} XSS –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å JavaScript –∫–æ–¥ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∂–µ—Ä—Ç–≤—ã`
      },
      estimatedTime: '2-3 —á–∞—Å–∞',
      difficulty: 'medium'
    };
  }

  // Helper methods –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞

  private static getSecretBeforeExample(type: string, pattern: string): string {
    const examples: Record<string, string> = {
      'api_key': `// –û–ü–ê–°–ù–û ‚ùå:
const API_KEY = "${pattern}";
const config = {
  apiKey: "${pattern}",
  headers: { 'Authorization': 'Bearer ${pattern}' }
};`,
      'password': `// –û–ü–ê–°–ù–û ‚ùå:
const dbConfig = {
  host: 'localhost',
  user: 'admin',
  password: '${pattern}'
};`,
      'token': `// –û–ü–ê–°–ù–û ‚ùå:
const token = "${pattern}";
fetch('/api/data', {
  headers: { 'Authorization': \`Bearer ${pattern}\` }
});`
    };
    return examples[type] || `const secret = "${pattern}";`;
  }

  private static getSecretAfterExample(type: string): string {
    const examples: Record<string, string> = {
      'api_key': `// –ë–ï–ó–û–ü–ê–°–ù–û ‚úÖ:
const API_KEY = process.env.API_KEY;
const config = {
  apiKey: process.env.API_KEY,
  headers: { 'Authorization': \`Bearer \${process.env.API_KEY}\` }
};

// .env —Ñ–∞–π–ª:
API_KEY=your_secret_api_key_here`,
      'password': `// –ë–ï–ó–û–ü–ê–°–ù–û ‚úÖ:
const dbConfig = {
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD
};

// .env —Ñ–∞–π–ª:
DB_PASSWORD=your_secure_password_here`,
      'token': `// –ë–ï–ó–û–ü–ê–°–ù–û ‚úÖ:
const token = process.env.AUTH_TOKEN;
fetch('/api/data', {
  headers: { 'Authorization': \`Bearer \${process.env.AUTH_TOKEN}\` }
});

// .env —Ñ–∞–π–ª:
AUTH_TOKEN=your_auth_token_here`
    };
    return examples[type] || `const secret = process.env.YOUR_SECRET;`;
  }

  private static getSecretImplementationExample(type: string): string {
    return `// –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è:
// 1. –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª (–ù–ï –∫–æ–º–º–∏—Ç—å—Ç–µ –≤ Git!)
${type.toUpperCase()}_SECRET=your_actual_secret_here

// 2. –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
import 'dotenv/config'; // –∏–ª–∏ require('dotenv').config();

// 3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
const secret = process.env.${type.toUpperCase()}_SECRET;
if (!secret) {
  throw new Error('${type.toUpperCase()}_SECRET environment variable is required');
}

// 4. –î–ª—è production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
// - Docker secrets
// - Kubernetes secrets  
// - Cloud provider secret management (AWS Secrets Manager, etc.)`;
  }

  private static getUnsafeFunctionBefore(functionName: string): string {
    const examples: Record<string, string> = {
      'eval': `// –û–ü–ê–°–ù–û ‚ùå:
const userCode = req.body.code;
const result = eval(userCode); // –í—ã–ø–æ–ª–Ω—è–µ—Ç –ª—é–±–æ–π JS –∫–æ–¥!`,
      'innerHTML': `// –û–ü–ê–°–ù–û ‚ùå:
const userContent = req.body.html;
element.innerHTML = userContent; // XSS –∞—Ç–∞–∫–∞!`,
      'document.write': `// –û–ü–ê–°–ù–û ‚ùå:
document.write(userInput); // –ú–æ–∂–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –≤—Å—é —Å—Ç—Ä–∞–Ω–∏—Ü—É`,
      'Function': `// –û–ü–ê–°–ù–û ‚ùå:
const userFunction = new Function(userInput);
userFunction(); // –ê–Ω–∞–ª–æ–≥ eval`
    };
    return examples[functionName] || `${functionName}(userInput); // –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ`;
  }

  private static getUnsafeFunctionAfter(functionName: string): string {
    const examples: Record<string, string> = {
      'eval': `// –ë–ï–ó–û–ü–ê–°–ù–û ‚úÖ:
try {
  const result = JSON.parse(userInput); // –î–ª—è JSON –¥–∞–Ω–Ω—ã—Ö
  // –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä/–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä
} catch (error) {
  throw new Error('Invalid JSON input');
}`,
      'innerHTML': `// –ë–ï–ó–û–ü–ê–°–ù–û ‚úÖ:
// –î–ª—è —Ç–µ–∫—Å—Ç–∞:
element.textContent = userContent;

// –î–ª—è HTML - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ DOMPurify:
import DOMPurify from 'dompurify';
element.innerHTML = DOMPurify.sanitize(userContent);`,
      'document.write': `// –ë–ï–ó–û–ü–ê–°–ù–û ‚úÖ:
const element = document.createElement('div');
element.textContent = userInput;
document.body.appendChild(element);`,
      'Function': `// –ë–ï–ó–û–ü–ê–°–ù–û ‚úÖ:
// –ò–∑–±–µ–≥–∞–π—Ç–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
// –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã`
    };
    return examples[functionName] || `// –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É –¥–ª—è ${functionName}`;
  }

  private static getUnsafeFunctionExplanation(functionName: string): string {
    const explanations: Record<string, string> = {
      'eval': 'eval() –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π JavaScript –∫–æ–¥ –∏ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ code injection',
      'innerHTML': 'innerHTML –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å JavaScript —á–µ—Ä–µ–∑ <script> —Ç–µ–≥–∏ –∏–ª–∏ event handlers',
      'document.write': 'document.write –º–æ–∂–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å DOM –∏ –Ω–∞—Ä—É—à–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å',
      'Function': 'new Function() —Å–æ–∑–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å—Ç—Ä–æ–∫, —á—Ç–æ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ eval()'
    };
    return explanations[functionName] || `${functionName} –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –∞—Ç–∞–∫`;
  }

  private static getSQLInjectionBefore(type: string, query: string): string {
    const examples: Record<string, string> = {
      'concatenation': `// –û–ü–ê–°–ù–û ‚ùå:
const userId = req.params.id;
const query = "SELECT * FROM users WHERE id = " + userId;
db.query(query); // SQL injection!`,
      'template': `// –û–ü–ê–°–ù–û ‚ùå:
const username = req.body.username;
const query = \`SELECT * FROM users WHERE name = '\${username}'\`;
db.query(query); // SQL injection!`,
      'dynamic': `// –û–ü–ê–°–ù–û ‚ùå:
const orderBy = req.query.sort;
const query = "SELECT * FROM products ORDER BY " + orderBy;
db.query(query); // SQL injection!`
    };
    return examples[type] || query;
  }

  private static getSQLInjectionAfter(type: string): string {
    const examples: Record<string, string> = {
      'concatenation': `// –ë–ï–ó–û–ü–ê–°–ù–û ‚úÖ:
const userId = req.params.id;
const query = "SELECT * FROM users WHERE id = ?";
db.query(query, [userId]); // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å`,
      'template': `// –ë–ï–ó–û–ü–ê–°–ù–û ‚úÖ:
const username = req.body.username;
const query = "SELECT * FROM users WHERE name = ?";
db.query(query, [username]); // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å`,
      'dynamic': `// –ë–ï–ó–û–ü–ê–°–ù–û ‚úÖ:
const allowedColumns = ['name', 'price', 'created_at'];
const orderBy = allowedColumns.includes(req.query.sort) ? req.query.sort : 'id';
const query = \`SELECT * FROM products ORDER BY \${orderBy}\`;
db.query(query); // Whitelist –≤–∞–ª–∏–¥–∞—Ü–∏—è`
    };
    return examples[type] || '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã';
  }

  private static getXSSBefore(type: string): string {
    const examples: Record<string, string> = {
      'reflected': `// –û–ü–ê–°–ù–û ‚ùå:
app.get('/search', (req, res) => {
  const query = req.query.q;
  res.send(\`<h1>Search results for: \${query}</h1>\`); // XSS!
});`,
      'stored': `// –û–ü–ê–°–ù–û ‚ùå:
const comment = req.body.comment;
await db.comments.create({ text: comment });
// –ü–æ–∑–∂–µ –≤—ã–≤–æ–¥–∏–º –±–µ–∑ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏:
res.send(\`<div>\${comment}</div>\`); // XSS!`,
      'dom': `// –û–ü–ê–°–ù–û ‚ùå:
const hash = window.location.hash.substring(1);
document.getElementById('content').innerHTML = hash; // DOM XSS!`
    };
    return examples[type] || '–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö';
  }

  private static getXSSAfter(type: string): string {
    const examples: Record<string, string> = {
      'reflected': `// –ë–ï–ó–û–ü–ê–°–ù–û ‚úÖ:
app.get('/search', (req, res) => {
  const query = escapeHtml(req.query.q);
  res.send(\`<h1>Search results for: \${query}</h1>\`);
});`,
      'stored': `// –ë–ï–ó–û–ü–ê–°–ù–û ‚úÖ:
const comment = DOMPurify.sanitize(req.body.comment);
await db.comments.create({ text: comment });
// –ò–ª–∏ —Å–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ:
res.send(\`<div>\${escapeHtml(comment)}</div>\`);`,
      'dom': `// –ë–ï–ó–û–ü–ê–°–ù–û ‚úÖ:
const hash = window.location.hash.substring(1);
document.getElementById('content').textContent = hash; // –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç`
    };
    return examples[type] || '–°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–π—Ç–µ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ';
  }

  private static getXSSExplanation(type: string): string {
    const explanations: Record<string, string> = {
      'reflected': 'Reflected XSS: –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –∫–æ–¥ –æ—Ç—Ä–∞–∂–∞–µ—Ç—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
      'stored': 'Stored XSS: –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ë–î –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
      'dom': 'DOM XSS: –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —Å DOM –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ'
    };
    return explanations[type] || 'XSS –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å JavaScript –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∂–µ—Ä—Ç–≤—ã';
  }

  private static getUnsafeFunctionSeverity(functionName: string): 'critical' | 'high' | 'medium' {
    const critical = ['eval', 'Function'];
    const high = ['innerHTML', 'document.write', 'outerHTML'];
    
    if (critical.includes(functionName)) return 'critical';
    if (high.includes(functionName)) return 'high';
    return 'medium';
  }

  private static getUnsafeFunctionFixTime(functionName: string): string {
    const timeMap: Record<string, string> = {
      'eval': '2-4 —á–∞—Å–∞',
      'innerHTML': '30-60 –º–∏–Ω—É—Ç',
      'document.write': '30-60 –º–∏–Ω—É—Ç',
      'Function': '2-4 —á–∞—Å–∞'
    };
    return timeMap[functionName] || '1-2 —á–∞—Å–∞';
  }

  private static getUnsafeFunctionDifficulty(functionName: string): 'easy' | 'medium' | 'hard' {
    const hard = ['eval', 'Function'];
    const medium = ['innerHTML'];
    
    if (hard.includes(functionName)) return 'hard';
    if (medium.includes(functionName)) return 'medium';
    return 'easy';
  }
}
