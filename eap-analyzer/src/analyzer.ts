/**
 * –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ü—Ä–æ–µ–∫—Ç–æ–≤ (–≠–ê–ü)
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –∑–æ–ª–æ—Ç–æ–º—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É
 */

import * as path from 'path';
import { CICDChecker } from './checkers/ci-cd.js';
import { CodeQualityChecker } from './checkers/code-quality.js';
import { DependenciesChecker } from './checkers/dependencies.js';
import { DockerChecker } from './checkers/docker.js';
import { EMTChecker } from './checkers/emt.js';
import { LoggingChecker } from './checkers/logging.js';
import { SvelteKitChecker } from './checkers/sveltekit.js';
import { VitestChecker } from './checkers/vitest.js';
import { CheckContext, CheckResult, ComponentResult } from './types/index.js';

export interface SimpleAnalysisResult {
  projectPath: string;
  components: ComponentResult[];
  summary: {
    totalScore: number;
    maxScore: number;
    percentage: number;
    passedChecks: number;
    totalChecks: number;
    criticalIssues: number;
  };
  recommendations: string[];
  analyzedAt: Date;
  duration: number;
}

export class GoldenStandardAnalyzer {
  private verbose = true;

  private log(message: string): void {
    if (this.verbose) {
      // eslint-disable-next-line no-console
      console.log(message);
    }
  }
  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
   */
  async analyzeProject(projectPath: string): Promise<SimpleAnalysisResult> {
    const startTime = Date.now();

    this.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –ó–æ–ª–æ—Ç–æ–º—É –°—Ç–∞–Ω–¥–∞—Ä—Ç—É...');
    this.log(`üìÇ –ü—É—Ç—å: ${projectPath}`);
    this.log('');

    const context: CheckContext = {
      projectPath: path.resolve(projectPath),
      projectInfo: {
        name: path.basename(projectPath),
        version: '1.0.0',
        hasTypeScript: false,
        hasTests: false,
        hasDocker: false,
        hasCICD: false,
        dependencies: {
          production: 0,
          development: 0,
          total: 0,
        },
      },
      options: {
        projectPath: path.resolve(projectPath),
        verbose: true,
      },
    };

    const componentResults: ComponentResult[] = [];
    const availableCheckers = this.getAvailableCheckers();

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    for (const checker of availableCheckers) {
      try {
        this.log(`üìã –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: ${checker.name}`);
        const result = await checker.checkComponent(context);
        componentResults.push(result);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        this.log(
          `   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.percentage}% - ${result.passed.length}/${result.passed.length + result.failed.length} –ø—Ä–æ–≤–µ—Ä–æ–∫`
        );
      } catch (error) {
        // eslint-disable-next-line no-console
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ ${checker.name}: ${error}`);
      }
    }

    this.log('');

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É
    const totalScore = componentResults.reduce((sum, r) => sum + r.score, 0);
    const maxTotalScore = componentResults.reduce((sum, r) => sum + r.maxScore, 0);
    const overallPercentage =
      maxTotalScore > 0 ? Math.round((totalScore / maxTotalScore) * 100) : 0;

    // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const allRecommendations = componentResults
      .flatMap(r => r.recommendations)
      .filter((rec, index, arr) => arr.indexOf(rec) === index); // —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

    const result: SimpleAnalysisResult = {
      projectPath: context.projectPath,
      components: componentResults,
      summary: {
        totalScore,
        maxScore: maxTotalScore,
        percentage: overallPercentage,
        passedChecks: componentResults.reduce((sum, r) => sum + r.passed.length, 0),
        totalChecks: componentResults.reduce(
          (sum, r) => sum + r.passed.length + r.failed.length,
          0
        ),
        criticalIssues: componentResults.reduce(
          (sum, r) => sum + r.failed.filter(f => f.check.critical).length,
          0
        ),
      },
      recommendations: allRecommendations,
      analyzedAt: new Date(),
      duration: Date.now() - startTime,
    };

    this.printResults(result);
    return result;
  }

  /**
   * –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
   */
  private printResults(result: SimpleAnalysisResult): void {
    const { summary } = result;

    this.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê');
    this.log('‚îÅ'.repeat(60));

    // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    let grade = 'F';
    if (summary.percentage >= 90) grade = 'A';
    else if (summary.percentage >= 80) grade = 'B';
    else if (summary.percentage >= 70) grade = 'C';
    else if (summary.percentage >= 60) grade = 'D';

    this.log(`üéØ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: ${grade} (${summary.percentage}/100)`);
    this.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${summary.passedChecks}/${summary.totalChecks}`);
    this.log(`‚ö° –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: ${summary.criticalIssues}`);
    this.log(`‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: ${(result.duration / 1000).toFixed(2)}—Å`);
    this.log('');

    // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
    this.log('üìã –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –ö–û–ú–ü–û–ù–ï–ù–¢–ê–ú:');
    this.log('');

    result.components.forEach(comp => {
      let compGrade = 'F';
      if (comp.percentage >= 90) compGrade = 'A';
      else if (comp.percentage >= 80) compGrade = 'B';
      else if (comp.percentage >= 70) compGrade = 'C';
      else if (comp.percentage >= 60) compGrade = 'D';

      this.log(`${compGrade} ${comp.component.name}`);
      this.log(`    üìà ${comp.score}/${comp.maxScore} –±–∞–ª–ª–æ–≤ (${comp.percentage}%)`);
      this.log(`    ‚úÖ ${comp.passed.length} –ø—Ä–æ–π–¥–µ–Ω–æ, ‚ùå ${comp.failed.length} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ`);

      if (comp.failed.length > 0) {
        this.log(`    üî∏ –ü—Ä–æ–±–ª–µ–º—ã:`);
        comp.failed.slice(0, 3).forEach(fail => {
          this.log(`      ‚Ä¢ ${fail.check.name}`);
        });
        if (comp.failed.length > 3) {
          this.log(`      ‚Ä¢ –∏ –µ—â–µ ${comp.failed.length - 3} –ø—Ä–æ–±–ª–µ–º...`);
        }
      }
      this.log('');
    });

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (result.recommendations.length > 0) {
      this.log('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
      this.log('');
      result.recommendations.slice(0, 10).forEach((rec, index) => {
        this.log(`${index + 1}. ${rec}`);
      });

      if (result.recommendations.length > 10) {
        this.log(`... –∏ –µ—â–µ ${result.recommendations.length - 10} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π`);
      }
      this.log('');
    }

    // –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (summary.percentage >= 90) {
      this.log('üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–µ–∫—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ó–æ–ª–æ—Ç–æ–º—É –°—Ç–∞–Ω–¥–∞—Ä—Ç—É!');
    } else if (summary.percentage >= 75) {
      this.log('üëç –•–æ—Ä–æ—à–∏–π –ø—Ä–æ–µ–∫—Ç! –ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.');
    } else if (summary.percentage >= 50) {
      this.log('‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç —Ç—Ä–µ–±—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π.');
    } else {
      this.log('üö® –ü—Ä–æ–µ–∫—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –æ—Ç—Å—Ç–∞–µ—Ç –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.');
    }

    this.log('');
    this.log('‚îÅ'.repeat(60));
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
   */
  private getAvailableCheckers() {
    return [
      {
        name: '–≠–ú–¢ (–≠—Ç–∞–ª–æ–Ω–Ω—ã–π –ú–æ–¥—É–ª—å –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)',
        checkComponent: EMTChecker.checkComponent.bind(EMTChecker),
      },
      {
        name: 'Docker Infrastructure',
        checkComponent: DockerChecker.checkComponent.bind(DockerChecker),
      },
      {
        name: 'SvelteKit Framework',
        checkComponent: this.createSvelteKitChecker.bind(this),
      },
      {
        name: 'CI/CD Pipeline',
        checkComponent: this.createCICDChecker.bind(this),
      },
      {
        name: 'Code Quality System',
        checkComponent: this.createCodeQualityChecker.bind(this),
      },
      {
        name: 'Vitest Testing Framework',
        checkComponent: this.createVitestChecker.bind(this),
      },
      {
        name: 'Dependencies Management',
        checkComponent: this.createDependenciesChecker.bind(this),
      },
      {
        name: 'Logging System',
        checkComponent: this.createLoggingChecker.bind(this),
      },
    ];
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —á–µ–∫–µ—Ä–æ–≤
   */
  private async createSvelteKitChecker(context: CheckContext): Promise<ComponentResult> {
    const checker = new SvelteKitChecker(context);
    const checkResults = await checker.checkAll();
    return this.createComponentResult('SvelteKit Framework', checkResults);
  }

  private async createCICDChecker(context: CheckContext): Promise<ComponentResult> {
    const checker = new CICDChecker(context);
    const checkResults = await checker.checkAll();
    return this.createComponentResult('CI/CD Pipeline', checkResults);
  }

  private async createCodeQualityChecker(context: CheckContext): Promise<ComponentResult> {
    const checker = new CodeQualityChecker(context);
    const checkResults = await checker.checkAll();
    return this.createComponentResult('Code Quality System', checkResults);
  }

  private async createVitestChecker(context: CheckContext): Promise<ComponentResult> {
    const checker = new VitestChecker(context);
    const checkResults = await checker.checkAll();
    return this.createComponentResult('Vitest Testing Framework', checkResults);
  }

  private async createDependenciesChecker(context: CheckContext): Promise<ComponentResult> {
    const checker = new DependenciesChecker(context);
    const checkResults = await checker.checkAll();
    return this.createComponentResult('Dependencies Management', checkResults);
  }

  private async createLoggingChecker(context: CheckContext): Promise<ComponentResult> {
    const checker = new LoggingChecker(context);
    const checkResults = await checker.checkAll();
    return this.createComponentResult('Logging System', checkResults);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–æ–∫
   */
  private createComponentResult(name: string, checkResults: CheckResult[]): ComponentResult {
    const totalScore = checkResults.reduce((sum, r) => sum + r.score, 0);
    const maxScore = checkResults.reduce((sum, r) => sum + r.maxScore, 0);
    const percentage = maxScore > 0 ? Math.round((totalScore / maxScore) * 100) : 0;

    const passed = checkResults.filter(r => r.passed);
    const failed = checkResults.filter(r => !r.passed);

    const recommendations = failed
      .flatMap(f => f.recommendations || [])
      .filter((rec, index, arr) => arr.indexOf(rec) === index);

    return {
      component: {
        name,
        description: `–ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ${name}`,
        weight: 8,
        checks: checkResults.map(r => r.check),
      },
      score: totalScore,
      maxScore,
      percentage,
      passed,
      failed,
      warnings: [],
      recommendations,
      duration: 0,
    };
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ JSON —Ñ–∞–π–ª
   */
  async saveResults(result: SimpleAnalysisResult, outputPath: string): Promise<void> {
    const fs = await import('fs/promises');

    const jsonResult = {
      ...result,
      analyzedAt: result.analyzedAt.toISOString(),
    };

    await fs.writeFile(outputPath, JSON.stringify(jsonResult, null, 2), 'utf-8');
    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
export * from './types/index.js';
export { DockerChecker, EMTChecker };
