/**
 * –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ WebSecurityChecker
 */

export {};

console.log('üîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSecurityChecker...');

try {
  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º WebSecurityChecker
  const { WebSecurityChecker } = await import('./checkers/security/WebSecurityChecker.js');
  console.log('‚úÖ WebSecurityChecker –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');

  const checker = new WebSecurityChecker();
  console.log('‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–∑–¥–∞–Ω');

  // –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
  const context = {
    projectPath: process.cwd(),
    projectInfo: {
      name: 'test',
      version: '1.0.0',
      hasTypeScript: true,
      hasTests: false,
      hasDocker: false,
      hasCICD: false,
      dependencies: { production: 0, development: 0, total: 0 },
    },
    options: {
      projectPath: process.cwd(),
      includeOptional: true,
    },
  };

  console.log('üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –≤–µ–±-–∞–Ω–∞–ª–∏–∑...');
  const result = await checker.analyzeWebSecurity(context);

  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ï–ë–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:');
  console.log(`   üö® –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: ${result.summary.totalVulnerabilities}`);
  console.log(`   üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: ${result.summary.criticalCount}`);
  console.log(`   üü† –í—ã—Å–æ–∫–∏—Ö: ${result.summary.highCount}`);
  console.log(`   üü° –°—Ä–µ–¥–Ω–∏—Ö: ${result.summary.mediumCount}`);
  console.log(`   üìÅ –§–∞–π–ª–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${result.summary.filesScanned}`);

  console.log('\nüîç XSS –ê–ù–ê–õ–ò–ó:');
  console.log(`   üéØ XSS —É—è–∑–≤–∏–º–æ—Å—Ç–∏: ${result.xss.summary.total}`);

  console.log('\nüõ°Ô∏è CSRF –ê–ù–ê–õ–ò–ó:');
  console.log(`   üéØ CSRF –ø—Ä–æ–±–ª–µ–º—ã: ${result.csrf.summary.total}`);
  console.log(`   üìã –§–æ—Ä–º –Ω–∞–π–¥–µ–Ω–æ: ${result.csrf.formsFound}`);
  console.log(`   üîí –ó–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º: ${result.csrf.protectedForms}`);

  if (result.recommendations.length > 0) {
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    result.recommendations.forEach((rec, i) => {
      console.log(`   ${i + 1}. ${rec}`);
    });
  }

  console.log('\nüéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢ –£–°–ü–ï–®–ù–û!');

  // –û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ Phase 5.2.2
  let readinessScore = 0;

  if (result.xss.summary.total >= 0) {
    console.log('‚úÖ XSS –∞–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç (+25%)');
    readinessScore += 25;
  }

  if (result.csrf.summary.total >= 0) {
    console.log('‚úÖ CSRF –∞–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç (+25%)');
    readinessScore += 25;
  }

  if (result.recommendations.length > 0) {
    console.log('‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è (+25%)');
    readinessScore += 25;
  }

  if (result.summary.totalVulnerabilities > 0) {
    console.log('‚úÖ –î–µ—Ç–µ–∫—Ü–∏—è –ø—Ä–æ–±–ª–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç (+25%)');
    readinessScore += 25;
  }

  console.log(`\nüìà –ì–û–¢–û–í–ù–û–°–¢–¨ –ö PHASE 5.2.2: ${readinessScore}%`);

  if (readinessScore >= 75) {
    console.log('üöÄ –§–ê–ó–ê 1 - –ó–ê–î–ê–ß–ê 1.1 –ó–ê–í–ï–†–®–ï–ù–ê!');
    console.log('‚úÖ XSS Detection Engine –≥–æ—Ç–æ–≤');
    console.log('üéØ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ó–∞–¥–∞—á–µ 1.2: CSRF Protection Checker');
  }
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:', error);
}
