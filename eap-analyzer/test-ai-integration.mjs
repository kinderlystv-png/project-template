#!/usr/bin/env node

import { AIEnhancedAnalyzer } from './dist/ai-integration/index.js';
import path from 'path';

async function testAIIntegration() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...\n');

  try {
    const analyzer = new AIEnhancedAnalyzer();
    const testProjectPath = path.resolve('./src');

    console.log(`üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: ${testProjectPath}`);

    const result = await analyzer.analyzeProject(testProjectPath);

    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê:');
    console.log(`   –§–∞–π–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${result.fileCount}`);

    if (result.aiInsights) {
      console.log('\nüß† AI –ê–ù–ê–õ–ò–¢–ò–ö–ê:');
      console.log(`   –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: ${result.aiInsights.summary.overallQuality}/100`);
      console.log(
        `   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI: ${(result.aiInsights.qualityPrediction.confidence * 100).toFixed(1)}%`
      );

      if (result.aiInsights.summary.recommendations.length > 0) {
        console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        result.aiInsights.summary.recommendations.slice(0, 3).forEach((rec, i) => {
          console.log(`   ${i + 1}. [${rec.severity.toUpperCase()}] ${rec.message}`);
        });
      }

      if (result.aiInsights.summary.mainIssues.length > 0) {
        console.log('\n‚ö†Ô∏è –û–°–ù–û–í–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
        result.aiInsights.summary.mainIssues.forEach((issue, i) => {
          console.log(`   ${i + 1}. ${issue}`);
        });
      }

      if (result.aiInsights.summary.strengths.length > 0) {
        console.log('\n‚úÖ –°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´:');
        result.aiInsights.summary.strengths.forEach((strength, i) => {
          console.log(`   ${i + 1}. ${strength}`);
        });
      }
    }

    console.log('\nüéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢ –£–°–ü–ï–®–ù–û!');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
    const summary = analyzer.generateEnhancedSummary(result);
    console.log('\n' + summary);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    process.exit(1);
  }
}

testAIIntegration();
