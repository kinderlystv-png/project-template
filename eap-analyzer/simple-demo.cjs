#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –±–µ–∑ TypeScript
 */

const fs = require('fs');
const path = require('path');

class SimpleEAPDemo {
  async runDemo() {
    console.log('üöÄ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø EAP ANALYZER v3.0 ===');
    console.log('üß† AI –∞–Ω–∞–ª–∏–∑ + üí∞ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥ + üìä ROI —Ä–∞—Å—á–µ—Ç—ã');
    console.log('');

    const projectPath = process.cwd();
    
    try {
      console.log('üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...');
      
      // –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤
      const stats = await this.analyzeProjectStructure(projectPath);
      
      // –ò–º–∏—Ç–∞—Ü–∏—è AI –∞–Ω–∞–ª–∏–∑–∞
      const aiAnalysis = this.simulateAIAnalysis(stats);
      
      // –ò–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞
      const debtAnalysis = this.simulateTechnicalDebtAnalysis(stats);
      
      // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      this.showResults(stats, aiAnalysis, debtAnalysis);
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
      await this.saveSimpleReports(stats, aiAnalysis, debtAnalysis);
      
      console.log('üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    }
  }

  async analyzeProjectStructure(projectPath) {
    const files = await this.getCodeFiles(projectPath);
    let totalLines = 0;
    let totalComplexity = 0;
    let fileStats = [];

    for (const file of files.slice(0, 20)) { // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 20 —Ñ–∞–π–ª–æ–≤
      try {
        const content = await fs.promises.readFile(file, 'utf-8');
        const lines = content.split('\n').length;
        const complexity = this.calculateComplexity(content);
        
        totalLines += lines;
        totalComplexity += complexity;
        
        fileStats.push({
          file: path.relative(projectPath, file),
          lines,
          complexity,
          issues: this.findIssues(content)
        });
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
      }
    }

    return {
      totalFiles: files.length,
      analyzedFiles: fileStats.length,
      totalLines,
      averageComplexity: Math.round(totalComplexity / fileStats.length),
      fileStats: fileStats.sort((a, b) => b.complexity - a.complexity)
    };
  }

  simulateAIAnalysis(stats) {
    const qualityScore = Math.max(40, 100 - (stats.averageComplexity * 2));
    
    return {
      qualityScore: Math.round(qualityScore),
      confidence: 87,
      patterns: [
        { name: 'Factory Pattern', confidence: 85, type: 'design-pattern' },
        { name: 'Long Method', confidence: 92, type: 'code-smell' },
        { name: 'Complex Class', confidence: 78, type: 'code-smell' }
      ],
      duplication: {
        percentage: Math.random() * 15 + 5, // 5-20%
        blocks: Math.floor(Math.random() * 10) + 3
      },
      recommendations: [
        'üéØ –†–∞–∑–±–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ',
        'üìã –£–º–µ–Ω—å—à–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥',
        'üß© –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã'
      ]
    };
  }

  simulateTechnicalDebtAnalysis(stats) {
    const totalDebt = stats.totalLines * 0.1 + stats.averageComplexity * 5; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞
    const monthlyInterest = Math.round(totalDebt * 0.05);
    const refactoringCost = Math.round(totalDebt * 0.7);
    const roi = Math.round(((monthlyInterest * 36 - refactoringCost) / refactoringCost) * 100);

    return {
      totalDebt: Math.round(totalDebt),
      monthlyInterest,
      refactoringCost,
      roi,
      paybackPeriod: Math.ceil(refactoringCost / monthlyInterest),
      categories: [
        { name: 'Code Duplication', debt: Math.round(totalDebt * 0.3), impact: 'High' },
        { name: 'Complex Methods', debt: Math.round(totalDebt * 0.25), impact: 'Medium' },
        { name: 'Large Classes', debt: Math.round(totalDebt * 0.2), impact: 'High' },
        { name: 'Missing Tests', debt: Math.round(totalDebt * 0.25), impact: 'High' }
      ],
      hotspots: stats.fileStats.slice(0, 5).map(file => ({
        file: file.file,
        debt: Math.round(file.complexity * 2 + file.lines * 0.1),
        issues: file.issues
      }))
    };
  }

  showResults(stats, aiAnalysis, debtAnalysis) {
    console.log('üìã === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê ===');
    console.log('');
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`   üìÅ –§–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${stats.totalFiles}`);
    console.log(`   üîç –§–∞–π–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${stats.analyzedFiles}`);
    console.log(`   üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${stats.totalLines.toLocaleString()}`);
    console.log(`   üß© –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: ${stats.averageComplexity}`);
    console.log('');

    // AI –∞–Ω–∞–ª–∏–∑
    console.log('üß† AI –ê–ù–ê–õ–ò–ó –ò –ò–ù–°–ê–ô–¢–´:');
    console.log(`   üéØ –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞: ${aiAnalysis.qualityScore}/100 (${aiAnalysis.confidence}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)`);
    console.log(`   üîÑ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: ${aiAnalysis.duplication.percentage.toFixed(1)}% (${aiAnalysis.duplication.blocks} –±–ª–æ–∫–æ–≤)`);
    console.log('   üé® –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:');
    aiAnalysis.patterns.forEach(pattern => {
      console.log(`      ‚Ä¢ ${pattern.name} (${pattern.confidence}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, ${pattern.type})`);
    });
    console.log('');

    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥
    console.log('üí∞ –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –î–û–õ–ì –ò ROI:');
    console.log(`   üí∏ –û–±—â–∏–π –¥–æ–ª–≥: ${debtAnalysis.totalDebt} —á–∞—Å–æ–≤`);
    console.log(`   üìÖ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã: ${debtAnalysis.monthlyInterest} —á–∞—Å–æ–≤`);
    console.log(`   üíπ ROI —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞: ${debtAnalysis.roi}%`);
    console.log(`   ‚è±Ô∏è  –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å: ${debtAnalysis.paybackPeriod} –º–µ—Å—è—Ü–µ–≤`);
    console.log(`   üîß –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞: ${debtAnalysis.refactoringCost} —á–∞—Å–æ–≤`);
    console.log('');
    
    console.log('   üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–≥–∞:');
    debtAnalysis.categories.forEach(cat => {
      console.log(`      ‚Ä¢ ${cat.name}: ${cat.debt} —á–∞—Å–æ–≤ (${cat.impact} impact)`);
    });
    console.log('');
    
    console.log('   üî• –ì–æ—Ä—è—á–∏–µ —Ç–æ—á–∫–∏:');
    debtAnalysis.hotspots.forEach(hotspot => {
      console.log(`      ‚Ä¢ ${hotspot.file}: ${hotspot.debt} —á–∞—Å–æ–≤ (${hotspot.issues.length} –ø—Ä–æ–±–ª–µ–º)`);
    });
    console.log('');

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('üí° AI –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    aiAnalysis.recommendations.forEach(rec => {
      console.log(`   ${rec}`);
    });
    console.log('');
    
    // ROI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    if (debtAnalysis.roi > 100) {
      console.log('‚úÖ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ - ROI > 100%');
    } else if (debtAnalysis.roi > 50) {
      console.log('‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ - ROI > 50%');
    } else {
      console.log('‚ùå –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é');
    }
    console.log('');
  }

  async saveSimpleReports(stats, aiAnalysis, debtAnalysis) {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤...');
    
    const reportsDir = path.join(process.cwd(), 'reports');
    
    try {
      await fs.promises.mkdir(reportsDir, { recursive: true });
      
      const report = {
        timestamp: new Date().toISOString(),
        projectStats: stats,
        aiAnalysis,
        technicalDebt: debtAnalysis,
        summary: {
          qualityScore: aiAnalysis.qualityScore,
          totalDebt: debtAnalysis.totalDebt,
          roi: debtAnalysis.roi,
          recommendation: debtAnalysis.roi > 100 ? 'High Priority' : debtAnalysis.roi > 50 ? 'Medium Priority' : 'Low Priority'
        }
      };
      
      // JSON –æ—Ç—á–µ—Ç
      const jsonPath = path.join(reportsDir, 'simple-analysis-report.json');
      await fs.promises.writeFile(jsonPath, JSON.stringify(report, null, 2));
      console.log(`   üìÑ JSON –æ—Ç—á–µ—Ç: ${jsonPath}`);
      
      // Markdown –æ—Ç—á–µ—Ç
      const mdPath = path.join(reportsDir, 'SIMPLE-ANALYSIS-SUMMARY.md');
      const markdown = this.generateMarkdownReport(report);
      await fs.promises.writeFile(mdPath, markdown);
      console.log(`   üìù Markdown –æ—Ç—á–µ—Ç: ${mdPath}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    }
    
    console.log('');
  }

  generateMarkdownReport(report) {
    return `# üöÄ EAP Analyzer v3.0 - –ü—Ä–æ—Å—Ç–æ–π –æ—Ç—á–µ—Ç

**–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:** ${new Date(report.timestamp).toLocaleString()}

## üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- **–§–∞–π–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:** ${report.projectStats.analyzedFiles} –∏–∑ ${report.projectStats.totalFiles}
- **–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞:** ${report.projectStats.totalLines.toLocaleString()}
- **–°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:** ${report.projectStats.averageComplexity}

## üß† AI –ê–Ω–∞–ª–∏–∑

- **–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞:** ${report.aiAnalysis.qualityScore}/100
- **–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ:** ${report.aiAnalysis.duplication.percentage.toFixed(1)}%
- **–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:** ${report.aiAnalysis.patterns.length}

### –ü–∞—Ç—Ç–µ—Ä–Ω—ã:
${report.aiAnalysis.patterns.map(p => `- ${p.name} (${p.confidence}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)`).join('\n')}

## üí∞ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥

- **–û–±—â–∏–π –¥–æ–ª–≥:** ${report.technicalDebt.totalDebt} —á–∞—Å–æ–≤
- **ROI —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞:** ${report.technicalDebt.roi}%
- **–ü–µ—Ä–∏–æ–¥ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏:** ${report.technicalDebt.paybackPeriod} –º–µ—Å—è—Ü–µ–≤

### –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–≥–∞:
${report.technicalDebt.categories.map(c => `- ${c.name}: ${c.debt} —á–∞—Å–æ–≤`).join('\n')}

### –ì–æ—Ä—è—á–∏–µ —Ç–æ—á–∫–∏:
${report.technicalDebt.hotspots.map(h => `- ${h.file}: ${h.debt} —á–∞—Å–æ–≤`).join('\n')}

## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

${report.aiAnalysis.recommendations.map(r => `- ${r}`).join('\n')}

**–û–±—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** ${report.summary.recommendation}

---
*–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ EAP Analyzer v3.0 Simple Demo*`;
  }

  async getCodeFiles(projectPath) {
    const files = [];
    const extensions = ['.ts', '.js', '.tsx', '.jsx'];
    
    const scanDir = async (dir) => {
      try {
        const items = await fs.promises.readdir(dir);
        for (const item of items) {
          const fullPath = path.join(dir, item);
          const stat = await fs.promises.stat(fullPath);
          
          if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules' && item !== 'dist') {
            await scanDir(fullPath);
          } else if (stat.isFile() && extensions.some(ext => item.endsWith(ext))) {
            files.push(fullPath);
          }
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
      }
    };
    
    await scanDir(projectPath);
    return files;
  }

  calculateComplexity(content) {
    const conditions = (content.match(/if|while|for|case|catch|\?\s*:/g) || []).length;
    const logicalOperators = (content.match(/&&|\|\|/g) || []).length;
    return 1 + conditions + logicalOperators;
  }

  findIssues(content) {
    const issues = [];
    
    // –î–ª–∏–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã (>30 —Å—Ç—Ä–æ–∫)
    const methods = content.split(/function|async\s+function|\w+\s*\(/g);
    methods.forEach((method, index) => {
      if (method.split('\n').length > 30) {
        issues.push('Long Method');
      }
    });
    
    // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (/(.{20,})\1/.test(content.replace(/\s+/g, ' '))) {
      issues.push('Code Duplication');
    }
    
    // –ú–∞–≥–∏—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∞
    if (/[^a-zA-Z_]\d{2,}[^a-zA-Z_]/.test(content)) {
      issues.push('Magic Numbers');
    }
    
    // –ì–ª—É–±–æ–∫–∞—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å
    if (/\s{16,}/.test(content)) {
      issues.push('Deep Nesting');
    }

    return [...new Set(issues)]; // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏
  }
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
const demo = new SimpleEAPDemo();
demo.runDemo().catch(console.error);
