/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –≠–ê–ü
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É DockerChecker —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏
 */

import * as path from 'path';
import * as fs from 'fs/promises';
import { glob } from 'glob';
import { DockerChecker } from '../../src/checkers/docker/DockerChecker';
import { AnalysisCategory } from '../../src/types/AnalysisCategory';
import { Project, FileStats } from '../../src/types/Project';

// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è Project –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
class FileSystemProject implements Project {
  public readonly path: string;
  public readonly name: string;

  constructor(basePath: string) {
    this.path = basePath;
    this.name = path.basename(basePath);
  }

  async getFileList(pattern?: string): Promise<string[]> {
    try {
      const searchPattern = pattern || '**/*';
      const files = await glob(searchPattern, {
        cwd: this.path,
        nodir: true,
      });
      return files;
    } catch {
      return [];
    }
  }

  async getFileStats(filePath: string): Promise<FileStats> {
    try {
      const fullPath = this.resolvePath(filePath);
      const stats = await fs.stat(fullPath);
      return {
        size: stats.size,
        created: stats.birthtime,
        modified: stats.mtime,
        isDirectory: stats.isDirectory(),
        isFile: stats.isFile(),
      };
    } catch {
      return {
        size: 0,
        created: new Date(),
        modified: new Date(),
        isDirectory: false,
        isFile: false,
      };
    }
  }

  async exists(filePath: string): Promise<boolean> {
    try {
      const fullPath = this.resolvePath(filePath);
      await fs.access(fullPath);
      return true;
    } catch {
      return false;
    }
  }

  async readFile(filePath: string, encoding: string = 'utf-8'): Promise<string> {
    try {
      const fullPath = this.resolvePath(filePath);
      return await fs.readFile(fullPath, encoding as BufferEncoding);
    } catch {
      return '';
    }
  }

  resolvePath(relativePath: string): string {
    return path.resolve(this.path, relativePath);
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏
  async writeFile(filePath: string, content: string): Promise<void> {
    const fullPath = this.resolvePath(filePath);
    await fs.writeFile(fullPath, content, 'utf-8');
  }

  async readDirectory(dirPath: string): Promise<string[]> {
    try {
      const fullPath = this.resolvePath(dirPath);
      return await fs.readdir(fullPath);
    } catch {
      return [];
    }
  }

  async getStats(filePath: string): Promise<any> {
    return this.getFileStats(filePath);
  }

  getPath(): string {
    return this.path;
  }
}

describe('–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç - DockerChecker —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º', () => {
  let checker: DockerChecker;
  let project: FileSystemProject;

  beforeEach(() => {
    checker = new DockerChecker();
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç –∫–∞–∫ —Ç–µ—Å—Ç–æ–≤—ã–π
    project = new FileSystemProject(process.cwd());
  });

  test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç', async () => {
    console.log('üîç –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–æ–º–æ—â—å—é DockerChecker...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å
    const applicable = await checker.isApplicable(project);
    console.log(`üìã –ü—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å: ${applicable ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`);

    if (!applicable) {
      console.log('‚ö†Ô∏è Docker —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π Dockerfile –¥–ª—è —Ç–µ—Å—Ç–∞');
      // –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      return;
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
    const startTime = Date.now();
    const results = await checker.check(project);
    const duration = Date.now() - startTime;

    console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);
    console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${results.length}`);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const passed = results.filter(r => r.passed);
    const failed = results.filter(r => !r.passed);
    const totalScore = results.reduce((sum, r) => sum + r.score, 0);
    const maxScore = results.reduce((sum, r) => sum + r.maxScore, 0);
    const percentage = maxScore > 0 ? Math.round((totalScore / maxScore) * 100) : 0;

    console.log('\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:');
    console.log(`  ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed.length}`);
    console.log(`  ‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: ${failed.length}`);
    console.log(`  üéØ –û–±—â–∏–π –±–∞–ª–ª: ${totalScore}/${maxScore} (${percentage}%)`);

    // –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\nüìù –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    results.forEach(result => {
      const status = result.passed ? '‚úÖ' : '‚ùå';
      const score = `${result.score}/${result.maxScore}`;
      console.log(`  ${status} ${result.name}: ${score} - ${result.message}`);

      if (result.details?.recommendations && Array.isArray(result.details.recommendations)) {
        result.details.recommendations.forEach((rec: string) => {
          console.log(`      üí° ${rec}`);
        });
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results.forEach(result => {
      expect(result.id).toBeDefined();
      expect(result.name).toBeDefined();
      expect(result.description).toBeDefined();
      expect(typeof result.passed).toBe('boolean');
      expect(typeof result.score).toBe('number');
      expect(typeof result.maxScore).toBe('number');
      expect(result.severity).toBeDefined();
      expect(result.timestamp).toBeInstanceOf(Date);
      expect(result.stats).toBeDefined();
      expect(typeof result.stats?.duration).toBe('number');
      expect(typeof result.stats?.filesChecked).toBe('number');
      expect(typeof result.stats?.issuesFound).toBe('number');
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–Ω–∞–ª–∏–∑ –¥–∞–µ—Ç –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    expect(results.length).toBe(8); // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 8 –ø—Ä–æ–≤–µ—Ä–æ–∫
    expect(percentage).toBeGreaterThanOrEqual(0);
    expect(percentage).toBeLessThanOrEqual(100);
  });

  test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–∞–∑–æ–≤—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏', () => {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ —á–µ–∫–µ—Ä–∞
    expect(checker.getName()).toBe('DockerChecker');
    expect(checker.getCategory()).toBe(AnalysisCategory.INFRASTRUCTURE);
    expect(checker.getStandard()).toBe('Docker Best Practices');
    expect(checker.getDescription()).toContain('Docker');
    expect(checker.getVersion()).toBe('2.0.0');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    const checks = checker.getAvailableChecks();
    expect(checks.length).toBe(8);

    const checkIds = checks.map(c => c.id);
    expect(checkIds).toContain('docker-dockerfile');
    expect(checkIds).toContain('docker-compose');
    expect(checkIds).toContain('docker-security');
  });

  test('–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏', async () => {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç —Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º –ø—É—Ç–µ–º
    const invalidProject = new FileSystemProject('/nonexistent/path');

    const results = await checker.safeCheck(invalidProject);

    expect(results).toHaveLength(1);
    expect(results[0].passed).toBe(true); // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ "–Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ"
    expect(results[0].message).toContain('–Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å');
  });

  test('–¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', async () => {
    const results = await checker.check(project);

    let totalDuration = 0;
    let totalFilesChecked = 0;
    let totalIssuesFound = 0;

    results.forEach(result => {
      if (result.stats) {
        totalDuration += result.stats.duration;
        totalFilesChecked += result.stats.filesChecked;
        totalIssuesFound += result.stats.issuesFound;
      }
    });

    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:');
    console.log(`  ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalDuration}ms`);
    console.log(`  üìÅ –§–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${totalFilesChecked}`);
    console.log(`  üêõ –ü—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ: ${totalIssuesFound}`);

    expect(totalDuration).toBeGreaterThan(0);
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å 0 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞
  });
});
