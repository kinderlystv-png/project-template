/**
 * –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ FileStructureAnalyzer
 */

const { FileStructureAnalyzer } = require('./src/analyzers/structure/FileStructureAnalyzer.ts');

async function testEnhancedAnalyzer() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ FileStructureAnalyzer...');

  try {
    const context = {
      projectPath: 'C:\\kinderly-events',
      options: {
        maxFiles: 1000,
        includePatterns: ['**/*'],
        excludePatterns: ['**/node_modules/**', '**/.git/**'],
      },
    };

    console.log('üìÅ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞:', context.projectPath);
    const result = await FileStructureAnalyzer.checkComponent(context);

    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:');
    console.log('–û—Ü–µ–Ω–∫–∞:', result.score, '/', result.maxScore);
    console.log('–ü—Ä–æ—Ü–µ–Ω—Ç:', result.percentage + '%');

    console.log('\n‚úÖ –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:', result.passed.length);
    result.passed.forEach(check => {
      console.log(`  - ${check.check.name}: ${check.score}/100`);
    });

    console.log('\n‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:', result.failed.length);
    result.failed.forEach(check => {
      console.log(`  - ${check.check.name}: ${check.score}/100`);
    });

    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    result.recommendations.forEach((rec, i) => {
      console.log(`  ${i + 1}. ${rec}`);
    });

    console.log('\n‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', result.duration + '–º—Å');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    console.error(error.stack);
  }
}

testEnhancedAnalyzer();
