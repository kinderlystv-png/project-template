#!/usr/bin/env node

/**
 * üöÄ EAP AI Integration - –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 */

console.log('ü§ñ === EAP AI INTEGRATION FINAL DEMO ===');
console.log('');

// –¢–µ—Å—Ç –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç—á–µ—Ç–æ–≤
const formats = ['console', 'json', 'html', 'markdown'];
const testProject = '../src';

console.log('üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç—á–µ—Ç–æ–≤:');

for (const format of formats) {
  try {
    console.log(`\nüîç –§–æ—Ä–º–∞—Ç: ${format.toUpperCase()}`);

    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    const { AIEnhancedAnalyzer } = await import('./dist/ai-integration/index.js');
    const { AIReportGenerator } = await import('./dist/ai-integration/report-generator.js');

    // –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    const analyzer = new AIEnhancedAnalyzer();

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
    console.log(`   üìÇ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: ${testProject}`);
    const startTime = Date.now();
    const result = await analyzer.analyzeProject(testProject);
    const duration = Date.now() - startTime;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    const generator = new AIReportGenerator();
    const report = await generator.generateReport(result, { format });

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log(`   ‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${duration}ms`);
    console.log(`   üìä –§–∞–π–ª–æ–≤: ${result.fileCount || 0}`);
    console.log(`   üéØ AI –∫–∞—á–µ—Å—Ç–≤–æ: ${result.aiInsights?.summary.overallQuality || 0}/100`);
    console.log(
      `   üìà –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${((result.aiInsights?.qualityPrediction.confidence || 0) * 100).toFixed(1)}%`
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ-–∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    if (format !== 'console') {
      const filename = `demo-report.${format === 'markdown' ? 'md' : format}`;
      const fs = await import('fs/promises');
      await fs.writeFile(filename, report);
      console.log(`   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${filename}`);
    }
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

console.log('\nüéâ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê ===');
console.log('');
console.log('üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:');
console.log('   ‚Ä¢ demo-report.json - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
console.log('   ‚Ä¢ demo-report.html - –í–µ–±-–æ—Ç—á–µ—Ç —Å–æ —Å—Ç–∏–ª—è–º–∏');
console.log('   ‚Ä¢ demo-report.md - Markdown –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è');
console.log('');
console.log('üöÄ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!');
console.log('   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: node bin/eap-ai.js analyze --help');
