/**
 * –í–∞–ª–∏–¥–∞—Ç–æ—Ä –∞–Ω–∞–ª–∏–∑–∞ FileStructureAnalyzer v3.0
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞ kinderly-events
 */

const path = require('path');
const fs = require('fs');

async function validateKinderlyAnalysis() {
  console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ FileStructureAnalyzer v3.0...\n');

  try {
    const projectPath = 'C:\\kinderly-events';

    if (!fs.existsSync(projectPath)) {
      console.log(`‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${projectPath}`);
      return;
    }

    // === –≠–¢–ê–ü 1: –ó–ê–ì–†–£–ñ–ê–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê ===
    console.log('üìä –≠–¢–ê–ü 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞...');
    const latestReport = getLatestAnalysisReport();
    if (!latestReport) {
      console.log('‚ùå –û—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –æ—Ç—á–µ—Ç: ${latestReport.analyzer}`);
    console.log(`   –î–∞—Ç–∞: ${latestReport.timestamp}`);
    console.log(`   –û–±—â–∏–π –±–∞–ª–ª: ${latestReport.result.score}/100`);
    console.log(`   –§–∞–π–ª–æ–≤: ${latestReport.totalFiles}`);

    // === –≠–¢–ê–ü 2: –†–ï–ê–õ–¨–ù–ê–Ø –†–ï–í–ò–ó–ò–Ø –ü–†–û–ï–ö–¢–ê ===
    console.log('\nüîç –≠–¢–ê–ü 2: –†–µ–∞–ª—å–Ω–∞—è —Ä–µ–≤–∏–∑–∏—è –ø—Ä–æ–µ–∫—Ç–∞ kinderly-events...');
    const realAudit = await performRealProjectAudit(projectPath);

    // === –≠–¢–ê–ü 3: –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===
    console.log('\n‚öñÔ∏è  –≠–¢–ê–ü 3: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —Å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é...');
    const validation = compareAnalysisWithReality(latestReport, realAudit);

    // === –≠–¢–ê–ü 4: –û–¶–ï–ù–ö–ê –ê–î–ï–ö–í–ê–¢–ù–û–°–¢–ò ===
    console.log('\nüìà –≠–¢–ê–ü 4: –û—Ü–µ–Ω–∫–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞...');
    const adequacyScore = calculateAdequacyScore(validation);

    // === –í–´–í–û–î –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===
    console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò:');
    console.log('='.repeat(60));
    console.log(`üìä –ê–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞: ${adequacyScore.overall}/100`);
    console.log(`üéØ –¢–æ—á–Ω–æ—Å—Ç—å –º–µ—Ç—Ä–∏–∫: ${adequacyScore.metrics}/100`);
    console.log(`üîç –ö–∞—á–µ—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: ${adequacyScore.detection}/100`);
    console.log(`üí° –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: ${adequacyScore.recommendations}/100`);

    // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏
    console.log('\nüìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø:');
    console.log('-'.repeat(50));

    validation.forEach((check, index) => {
      const statusIcon = check.accurate ? '‚úÖ' : '‚ùå';
      console.log(`\n${index + 1}. ${statusIcon} ${check.metric}`);
      console.log(`   –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä: ${check.analyzed}`);
      console.log(`   –†–µ–∞–ª—å–Ω–æ—Å—Ç—å: ${check.reality}`);
      console.log(`   –¢–æ—á–Ω–æ—Å—Ç—å: ${check.accuracy}%`);
      if (check.issues.length > 0) {
        console.log(`   ‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã:`);
        check.issues.forEach(issue => {
          console.log(`      ‚Ä¢ ${issue}`);
        });
      }
    });

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    console.log('\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê:');
    console.log('-'.repeat(50));
    const improvements = generateAnalyzerImprovements(validation, adequacyScore);
    improvements.forEach((improvement, index) => {
      console.log(`${index + 1}. ${improvement}`);
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const validationReport = {
      timestamp: new Date().toISOString(),
      projectPath,
      adequacyScore,
      validation,
      improvements,
      originalAnalysis: latestReport,
      realAudit,
    };

    const reportPath = path.join(__dirname, 'reports', `validation-${Date.now()}.json`);
    fs.writeFileSync(reportPath, JSON.stringify(validationReport, null, 2));
    console.log(`\nüíæ –û—Ç—á–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);

    return validationReport;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error);
    throw error;
  }
}

function getLatestAnalysisReport() {
  const reportsDir = path.join(__dirname, 'reports');
  if (!fs.existsSync(reportsDir)) return null;

  const reports = fs
    .readdirSync(reportsDir)
    .filter(file => file.includes('kinderly-v3-analysis'))
    .map(file => {
      const filePath = path.join(reportsDir, file);
      const content = JSON.parse(fs.readFileSync(filePath, 'utf8'));
      return { ...content, fileName: file };
    })
    .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

  return reports[0] || null;
}

async function performRealProjectAudit(projectPath) {
  console.log('   üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...');

  const audit = {
    files: [],
    directories: new Set(),
    fileTypes: {},
    totalSize: 0,
    maxDepth: 0,
    patterns: {
      hasTests: false,
      hasSrc: false,
      hasDocs: false,
      hasConfig: false,
      hasReadme: false,
      hasPackageJson: false,
    },
    problems: {
      backupFiles: 0,
      duplicateFiles: 0,
      deepNesting: 0,
      largeFiles: 0,
      emptyDirs: 0,
    },
  };

  function scanDirectory(dir, relativePath = '', depth = 0) {
    if (depth > 15) return; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É

    try {
      const entries = fs.readdirSync(dir, { withFileTypes: true });

      let dirHasFiles = false;

      for (const entry of entries) {
        const fullPath = path.join(dir, entry.name);
        const relPath = path.join(relativePath, entry.name);

        if (entry.name.startsWith('.') || entry.name === 'node_modules') {
          continue;
        }

        if (entry.isDirectory()) {
          audit.directories.add(relPath);
          scanDirectory(fullPath, relPath, depth + 1);
        } else if (entry.isFile()) {
          dirHasFiles = true;
          const stat = fs.statSync(fullPath);
          const ext = path.extname(entry.name);

          audit.files.push({
            name: entry.name,
            path: fullPath,
            relativePath: relPath,
            size: stat.size,
            extension: ext,
            depth: depth,
          });

          audit.totalSize += stat.size;
          audit.maxDepth = Math.max(audit.maxDepth, depth);
          audit.fileTypes[ext] = (audit.fileTypes[ext] || 0) + 1;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
          checkPatterns(entry.name, relPath, audit.patterns);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã
          checkProblems(entry.name, relPath, stat.size, depth, audit.problems);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      if (!dirHasFiles && entries.filter(e => e.isFile()).length === 0) {
        audit.problems.emptyDirs++;
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    }
  }

  scanDirectory(projectPath);

  console.log(`   ‚úÖ –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${audit.files.length} —Ñ–∞–π–ª–æ–≤, ${audit.directories.size} –ø–∞–ø–æ–∫`);
  console.log(`   üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${Math.round(audit.totalSize / 1024 / 1024)} MB`);
  console.log(`   üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞: ${audit.maxDepth}`);

  return audit;
}

function checkPatterns(fileName, relativePath, patterns) {
  const lowerName = fileName.toLowerCase();
  const lowerPath = relativePath.toLowerCase();

  if (lowerPath.includes('test') || lowerPath.includes('spec')) patterns.hasTests = true;
  if (lowerPath.includes('src')) patterns.hasSrc = true;
  if (lowerPath.includes('doc')) patterns.hasDocs = true;
  if (lowerName.includes('config') || lowerName.includes('setting')) patterns.hasConfig = true;
  if (lowerName.includes('readme')) patterns.hasReadme = true;
  if (lowerName === 'package.json') patterns.hasPackageJson = true;
}

function checkProblems(fileName, relativePath, size, depth, problems) {
  const lowerName = fileName.toLowerCase();

  // Backup —Ñ–∞–π–ª—ã
  if (
    lowerName.includes('backup') ||
    lowerName.includes('.old') ||
    lowerName.includes('.bak') ||
    lowerName.includes('.orig')
  ) {
    problems.backupFiles++;
  }

  // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
  if (
    lowerName.includes('copy') ||
    lowerName.includes(' ‚Äî –∫–æ–ø–∏—è') ||
    lowerName.includes('(2)') ||
    lowerName.includes('_2')
  ) {
    problems.duplicateFiles++;
  }

  // –ì–ª—É–±–æ–∫–∞—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å
  if (depth > 6) {
    problems.deepNesting++;
  }

  // –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã (> 1MB)
  if (size > 1024 * 1024) {
    problems.largeFiles++;
  }
}

function compareAnalysisWithReality(analysis, reality) {
  const validation = [];

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤
  validation.push({
    metric: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤',
    analyzed: analysis.totalFiles,
    reality: reality.files.length,
    accuracy: calculateAccuracy(analysis.totalFiles, reality.files.length),
    accurate: Math.abs(analysis.totalFiles - reality.files.length) <= 10,
    issues:
      Math.abs(analysis.totalFiles - reality.files.length) > 10
        ? [`–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: ${Math.abs(analysis.totalFiles - reality.files.length)} —Ñ–∞–π–ª–æ–≤`]
        : [],
  });

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
  const analyzedPatterns = analysis.qualityMetrics.architecture.patterns_detected;
  const realPatterns = countRealPatterns(reality.patterns);
  validation.push({
    metric: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã',
    analyzed: analyzedPatterns,
    reality: realPatterns,
    accuracy: calculateAccuracy(analyzedPatterns, realPatterns),
    accurate: Math.abs(analyzedPatterns - realPatterns) <= 1,
    issues:
      Math.abs(analyzedPatterns - realPatterns) > 1
        ? [`–ù–µ—Ç–æ—á–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: ${analyzedPatterns} vs ${realPatterns}`]
        : [],
  });

  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª—å–Ω–æ—Å—Ç–∏
  const analyzedModules = analysis.qualityMetrics.modularity.module_count;
  const realModules = reality.directories.size;
  validation.push({
    metric: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π',
    analyzed: analyzedModules,
    reality: realModules,
    accuracy: calculateAccuracy(analyzedModules, realModules),
    accurate: Math.abs(analyzedModules - realModules) <= 20,
    issues:
      Math.abs(analyzedModules - realModules) > 20
        ? [`–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π: ${analyzedModules} vs ${realModules}`]
        : [],
  });

  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞
  const analyzedDebt = analysis.qualityMetrics.technicalDebt.priority_issues;
  const realDebt = reality.problems.backupFiles + reality.problems.duplicateFiles;
  validation.push({
    metric: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥ (–ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã)',
    analyzed: analyzedDebt,
    reality: realDebt,
    accuracy: calculateAccuracy(analyzedDebt, realDebt),
    accurate: Math.abs(analyzedDebt - realDebt) <= 5,
    issues:
      Math.abs(analyzedDebt - realDebt) > 5
        ? [`–ù–µ—Ç–æ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞: ${analyzedDebt} vs ${realDebt}`]
        : [],
  });

  // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (–≥–ª—É–±–∏–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏)
  const analyzedDepth = analysis.qualityMetrics.complexity.nesting_depth;
  const realDepth = reality.maxDepth;
  validation.push({
    metric: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏',
    analyzed: analyzedDepth,
    reality: realDepth,
    accuracy: calculateAccuracy(analyzedDepth, realDepth),
    accurate: Math.abs(analyzedDepth - realDepth) <= 1,
    issues:
      Math.abs(analyzedDepth - realDepth) > 1
        ? [`–ù–µ—Ç–æ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≥–ª—É–±–∏–Ω—ã: ${analyzedDepth} vs ${realDepth}`]
        : [],
  });

  return validation;
}

function countRealPatterns(patterns) {
  let count = 0;
  if (patterns.hasTests) count++;
  if (patterns.hasSrc) count++;
  if (patterns.hasDocs) count++;
  if (patterns.hasConfig) count++;
  return count;
}

function calculateAccuracy(analyzed, reality) {
  if (reality === 0) return analyzed === 0 ? 100 : 0;
  const diff = Math.abs(analyzed - reality);
  const relative = diff / reality;
  return Math.max(0, Math.round(100 - relative * 100));
}

function calculateAdequacyScore(validation) {
  const accuracies = validation.map(v => v.accuracy);
  const overall = Math.round(accuracies.reduce((sum, acc) => sum + acc, 0) / accuracies.length);

  const accurateCount = validation.filter(v => v.accurate).length;
  const detection = Math.round((accurateCount / validation.length) * 100);

  const metrics = Math.round(accuracies.reduce((sum, acc) => sum + acc, 0) / accuracies.length);

  const recommendations = overall > 80 ? 90 : overall > 60 ? 70 : 50;

  return {
    overall,
    metrics,
    detection,
    recommendations,
  };
}

function generateAnalyzerImprovements(validation, adequacyScore) {
  const improvements = [];

  if (adequacyScore.overall < 80) {
    improvements.push('–£–ª—É—á—à–∏—Ç—å –æ–±—â—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞ - –º–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π —Å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é');
  }

  validation.forEach(check => {
    if (!check.accurate) {
      switch (check.metric) {
        case '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤':
          improvements.push('–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥—Å—á–µ—Ç–∞ —Ñ–∞–π–ª–æ–≤ –≤ FileSystemScanner');
          break;
        case '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã':
          improvements.push('–£–ª—É—á—à–∏—Ç—å –¥–µ—Ç–µ–∫—Ü–∏—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ MetricsCalculator');
          break;
        case '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π':
          improvements.push('–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ/–º–∞–ª–æ');
          break;
        case '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥ (–ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã)':
          improvements.push('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–µ—Ç–µ–∫—Ü–∏—é –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (backup, –¥—É–±–ª–∏)');
          break;
        case '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏':
          improvements.push('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å—á–µ—Ç–∞ –≥–ª—É–±–∏–Ω—ã –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏');
          break;
      }
    }
  });

  if (adequacyScore.detection < 70) {
    improvements.push('–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏');
  }

  if (improvements.length === 0) {
    improvements.push('–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–¥–µ–∫–≤–∞—Ç–Ω–æ! –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –§–∞–∑–µ 2');
  }

  return improvements;
}

// –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
if (require.main === module) {
  validateKinderlyAnalysis()
    .then(result => {
      console.log('\nüéâ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
      console.log(`üìä –û–±—â–∞—è –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å: ${result.adequacyScore.overall}/100`);

      if (result.adequacyScore.overall >= 80) {
        console.log('‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–¥–µ–∫–≤–∞—Ç–Ω–æ!');
      } else if (result.adequacyScore.overall >= 60) {
        console.log('‚ö†Ô∏è  –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
      } else {
        console.log('‚ùå –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π');
      }

      process.exit(0);
    })
    .catch(error => {
      console.error('\nüí• –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞:', error.message);
      process.exit(1);
    });
}

module.exports = { validateKinderlyAnalysis };
