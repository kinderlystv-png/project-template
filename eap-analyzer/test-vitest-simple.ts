/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ VitestCheckerAdapter —Å AnalysisOrchestrator
 */

import { AnalysisOrchestrator } from './src/core/orchestrator.js';
import { VitestCheckerAdapter } from './src/checkers/testing/checkers/VitestCheckerAdapter.js';
import { CheckContext } from './src/core/types.js';

async function simpleVitestTest() {
  console.log('üîç –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç VitestCheckerAdapter –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n');

  try {
    // 1. –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π AnalysisOrchestrator –±–µ–∑ –º–æ–¥—É–ª–µ–π
    console.log('üèóÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ AnalysisOrchestrator...');
    const orchestrator = new AnalysisOrchestrator(1); // 1 –ø–æ—Ç–æ–∫

    // 2. –°–æ–∑–¥–∞–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º VitestCheckerAdapter
    console.log('‚öôÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ VitestCheckerAdapter...');
    const vitestChecker = new VitestCheckerAdapter();

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ —á–µ–∫–µ—Ä–∞
    console.log('\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VitestCheckerAdapter:');
    console.log(`   - –ù–∞–∑–≤–∞–Ω–∏–µ: ${vitestChecker.name}`);
    console.log(`   - –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${vitestChecker.category}`);
    console.log(`   - –û–ø–∏—Å–∞–Ω–∏–µ: ${vitestChecker.description}`);
    console.log(`   - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${vitestChecker.priority}`);

    // 4. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —á–µ–∫–µ—Ä
    console.log('\nüîó –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ–∫–µ—Ä–∞...');
    orchestrator.registerChecker('vitest-adapter', vitestChecker);

    // 5. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const testContext: CheckContext = {
      projectPath: process.cwd(),
      config: {},
    };

    // 6. –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç VitestCheckerAdapter
    console.log('\nüß™ –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç VitestCheckerAdapter...');
    const startTime = Date.now();
    const result = await vitestChecker.check(testContext);
    const endTime = Date.now();

    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${endTime - startTime}ms`);
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:');

    // 7. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const status = result.passed ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${result.checker} (–æ—Ü–µ–Ω–∫–∞: ${result.score}/100)`);
    console.log(`üìù ${result.message}`);
    console.log(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${result.category}`);
    console.log(`‚è∞ –í—Ä–µ–º—è: ${result.timestamp.toLocaleTimeString()}`);

    if (result.details) {
      console.log('ÔøΩ –î–µ—Ç–∞–ª–∏:');
      Object.entries(result.details).forEach(([key, value]) => {
        console.log(`   - ${key}: ${JSON.stringify(value)}`);
      });
    }

    if (result.recommendations && result.recommendations.length > 0) {
      console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      result.recommendations.forEach((rec, index) => {
        console.log(`   ${index + 1}. ${rec}`);
      });
    }

    // 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ BaseChecker –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ BaseChecker –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:');

    const hasRequiredMethods = [
      typeof vitestChecker.check === 'function',
      typeof vitestChecker.isApplicable === 'function',
      typeof vitestChecker['createResult'] === 'function',
    ];

    console.log(`   - –ú–µ—Ç–æ–¥ check(): ${hasRequiredMethods[0] ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - –ú–µ—Ç–æ–¥ isApplicable(): ${hasRequiredMethods[1] ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - –ú–µ—Ç–æ–¥ createResult(): ${hasRequiredMethods[2] ? '‚úÖ' : '‚ùå'}`);

    // 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:');

    const correctFormat =
      typeof result.checker === 'string' &&
      typeof result.category === 'string' &&
      typeof result.passed === 'boolean' &&
      typeof result.score === 'number' &&
      typeof result.message === 'string' &&
      result.timestamp instanceof Date;

    console.log(`   - –í—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã: ${correctFormat ? '‚úÖ' : '‚ùå'}`);
    console.log(
      `   - –û—Ü–µ–Ω–∫–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100: ${result.score >= 0 && result.score <= 100 ? '‚úÖ' : '‚ùå'}`
    );

    // 10. –¢–µ—Å—Ç —á–µ—Ä–µ–∑ AnalysisOrchestrator
    console.log('\nüé≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ AnalysisOrchestrator...');
    const fullAnalysis = await orchestrator.analyzeProject(testContext.projectPath, false);

    console.log(`üìã –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${Object.keys(fullAnalysis.checks).length}`);

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç VitestChecker
    const vitestResults = Object.entries(fullAnalysis.checks).filter(
      ([key, result]) => result.checker === 'vitest-adapter' || result.checker === 'vitest-checker'
    );

    console.log(`üîß –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç VitestChecker: ${vitestResults.length}`);
    vitestResults.forEach(([key, res], index) => {
      const status = res.passed ? '‚úÖ' : '‚ùå';
      console.log(`   ${index + 1}. ${status} ${res.checker} (${res.score}/100)`);
      console.log(`      ${res.message}`);
    }); // 11. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\nüìä –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:');
    console.log(`   - –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω`);
    console.log(`   - –ß–µ—Ä–µ–∑ Orchestrator: ${vitestResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);

    const compatible = vitestResults.length > 0;
    console.log(`   - –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: ${compatible ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`);

    // 12. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if (correctFormat && hasRequiredMethods.every(Boolean) && compatible) {
      console.log('\nüéâ –£–°–ü–ï–•: VitestCheckerAdapter –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å AnalysisOrchestrator!');
      console.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      console.log('\nüìà –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
      console.log(`   - Vitest –æ–±–Ω–∞—Ä—É–∂–µ–Ω: ${result.details?.hasVitest ? '–î–∞' : '–ù–µ—Ç'}`);
      console.log(`   - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: ${result.details?.hasConfig ? '–î–∞' : '–ù–µ—Ç'}`);
      console.log(`   - –¢–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: ${result.details?.testFileCount || 0}`);
      console.log(`   - Test —Å–∫—Ä–∏–ø—Ç: ${result.details?.hasTestScript ? '–î–∞' : '–ù–µ—Ç'}`);
      console.log(`   - –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: ${result.score}/100`);
    } else {
      console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π');
      if (!correctFormat) console.log('   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
      if (!hasRequiredMethods.every(Boolean)) console.log('   - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±—É–µ–º—ã–µ –º–µ—Ç–æ–¥—ã');
      if (!compatible) console.log('   - –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é AnalysisOrchestrator');
    }
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    if (error instanceof Error) {
      console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
      console.error('   –°—Ç–µ–∫:', error.stack?.split('\n').slice(0, 5).join('\n'));
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
simpleVitestTest().catch(console.error);
