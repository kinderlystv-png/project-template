/**
 * –ò–¢–û–ì–û–í–´–ô –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –ê–ù–ê–õ–ò–ó–ê–¢–û–†–û–í
 * Phase 1 (Unit Testing) + Phase 2 (E2E Testing)
 */

import { pathToFileURL } from 'url';
import path from 'path';

console.log('\nüéØ –ò–¢–û–ì–û–í–û–ï –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ê–ù–ê–õ–ò–ó–ê–¢–û–†–û–í\n');
console.log('üî• PHASE 1 (Unit Testing) + PHASE 2 (E2E Testing)');
console.log('='.repeat(80));

const projectPath = 'C:/alphacore/project-template';

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤
const results = {
  // Phase 1: Unit Testing
  vitest: { name: 'VitestChecker', phase: 1, passed: false, score: 0, found: false },
  jest: { name: 'JestChecker', phase: 1, passed: false, score: 0, found: false },
  coverage: { name: 'CoverageAnalyzer', phase: 1, passed: false, score: 0, found: false },

  // Phase 2: E2E Testing
  playwright: {
    name: 'PlaywrightChecker',
    phase: 2,
    passed: false,
    score: 0,
    found: false,
    tests: 0,
  },
  cypress: { name: 'CypressChecker', phase: 2, passed: false, score: 0, found: false, tests: 0 },
};

console.log('\nüì¶ PHASE 1: UNIT TESTING FRAMEWORKS');
console.log('='.repeat(50));

// === PHASE 1 TESTING ===

console.log('\nüîß 1.1 VitestChecker');
console.log('‚îÄ'.repeat(30));

try {
  const fs = await import('fs/promises');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Vitest
  const packageJsonPath = path.join(projectPath, 'package.json');
  const packageContent = await fs.readFile(packageJsonPath, 'utf8');
  const packageJson = JSON.parse(packageContent);

  const hasVitest = !!(
    packageJson.dependencies?.['vitest'] || packageJson.devDependencies?.['vitest']
  );

  if (hasVitest) {
    console.log('‚úÖ Vitest –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞');
    results.vitest.found = true;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const configFiles = ['vitest.config.ts', 'vite.config.ts'];
    let configFound = false;

    for (const configFile of configFiles) {
      const configPath = path.join(projectPath, configFile);
      try {
        await fs.access(configPath);
        const content = await fs.readFile(configPath, 'utf8');
        if (content.includes('vitest') || content.includes('test')) {
          configFound = true;
          console.log(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: ${configFile}`);
          break;
        }
      } catch {}
    }

    results.vitest.score = configFound ? 85 : 50;
    results.vitest.passed = results.vitest.score >= 70;
  } else {
    console.log('‚ùå Vitest –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    results.vitest.score = 15;
  }
} catch {
  results.vitest.score = 0;
}

console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${results.vitest.score}/100`);

console.log('\nüß™ 1.2 JestChecker');
console.log('‚îÄ'.repeat(30));

try {
  const fs = await import('fs/promises');
  const packageContent = await fs.readFile(path.join(projectPath, 'package.json'), 'utf8');
  const packageJson = JSON.parse(packageContent);

  const hasJest = !!(
    packageJson.dependencies?.['jest'] ||
    packageJson.devDependencies?.['jest'] ||
    packageJson.scripts?.['test'] ||
    JSON.stringify(packageJson).includes('jest')
  );

  if (hasJest) {
    console.log('‚úÖ Jest –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ package.json');
    results.jest.found = true;
    results.jest.score = 80;
    results.jest.passed = true;
  } else {
    console.log('‚ùå Jest –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    results.jest.score = 15;
  }
} catch {
  results.jest.score = 0;
}

console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${results.jest.score}/100`);

console.log('\nüìà 1.3 CoverageAnalyzer');
console.log('‚îÄ'.repeat(30));

try {
  const fs = await import('fs/promises');

  // –ò—â–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ–∫—Ä—ã—Ç–∏—è
  const coveragePaths = [
    'coverage/lcov-report/index.html',
    'coverage/index.html',
    'coverage/lcov.info',
    'coverage/coverage-summary.json',
  ];

  let foundCoverage = false;
  for (const coveragePath of coveragePaths) {
    const fullPath = path.join(projectPath, coveragePath);
    try {
      await fs.access(fullPath);
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –æ—Ç—á–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è: ${coveragePath}`);
      foundCoverage = true;
      break;
    } catch {}
  }

  if (foundCoverage) {
    results.coverage.found = true;
    results.coverage.score = 75;
    results.coverage.passed = true;
  } else {
    console.log('‚ö†Ô∏è  –û—Ç—á–µ—Ç—ã –ø–æ–∫—Ä—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    results.coverage.score = 10;
  }
} catch {
  results.coverage.score = 0;
}

console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${results.coverage.score}/100`);

// === PHASE 2 TESTING ===

console.log('\nüì¶ PHASE 2: E2E TESTING FRAMEWORKS');
console.log('='.repeat(50));

console.log('\nüé≠ 2.1 PlaywrightChecker');
console.log('‚îÄ'.repeat(30));

try {
  const fs = await import('fs/promises');
  const packageContent = await fs.readFile(path.join(projectPath, 'package.json'), 'utf8');
  const packageJson = JSON.parse(packageContent);

  const hasPlaywright = !!(
    packageJson.dependencies?.['@playwright/test'] ||
    packageJson.devDependencies?.['@playwright/test']
  );

  if (hasPlaywright) {
    console.log('‚úÖ Playwright –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞');
    results.playwright.found = true;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ —Ç–µ—Å—Ç—ã
    const configPath = path.join(projectPath, 'playwright.config.ts');
    try {
      await fs.access(configPath);
      console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: playwright.config.ts');

      // –°—á–∏—Ç–∞–µ–º —Ç–µ—Å—Ç—ã
      const testDirPath = path.join(projectPath, 'tests/e2e');
      try {
        const files = await fs.readdir(testDirPath);
        results.playwright.tests = files.filter(f => f.endsWith('.spec.ts')).length;
        console.log(`üìù –ù–∞–π–¥–µ–Ω–æ E2E —Ç–µ—Å—Ç–æ–≤: ${results.playwright.tests}`);
      } catch {}

      results.playwright.score = 85;
      results.playwright.passed = true;
    } catch {
      results.playwright.score = 30;
    }
  } else {
    console.log('‚ùå Playwright –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    results.playwright.score = 5;
  }
} catch {
  results.playwright.score = 0;
}

console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${results.playwright.score}/100`);

console.log('\nüå≤ 2.2 CypressChecker');
console.log('‚îÄ'.repeat(30));

try {
  const fs = await import('fs/promises');
  const packageContent = await fs.readFile(path.join(projectPath, 'package.json'), 'utf8');
  const packageJson = JSON.parse(packageContent);

  const hasCypress = !!(
    packageJson.dependencies?.['cypress'] || packageJson.devDependencies?.['cypress']
  );

  if (hasCypress) {
    console.log('‚úÖ Cypress –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞');
    results.cypress.found = true;
    results.cypress.score = 40; // –ë–∞–∑–æ–≤—ã–µ –±–∞–ª–ª—ã
  } else {
    console.log('‚ùå Cypress –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    results.cypress.score = 5;
  }
} catch {
  results.cypress.score = 0;
}

console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${results.cypress.score}/100`);

// === –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===

console.log('\n' + '='.repeat(80));
console.log('üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–°–ï–• –ê–ù–ê–õ–ò–ó–ê–¢–û–†–û–í');
console.log('='.repeat(80));

// –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
console.log('–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä              | Phase | –°—Ç–∞—Ç—É—Å | –û—Ü–µ–Ω–∫–∞ | –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω | –î–µ—Ç–∞–ª–∏');
console.log('‚îÄ'.repeat(80));

Object.values(results).forEach(result => {
  const status = result.passed ? '‚úÖ –£–°–ü–ï–•' : result.score >= 30 ? '‚ö†Ô∏è  –ß–ê–°–¢.' : '‚ùå –ù–ï–£–î.';
  const installed = result.found ? '‚úÖ' : '‚ùå';
  const details =
    result.tests !== undefined
      ? `${result.tests} —Ç–µ—Å—Ç–æ–≤`
      : result.found
        ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω'
        : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';

  console.log(
    `${result.name.padEnd(22)} | ${result.phase}     | ${status.padEnd(6)} | ${result.score.toString().padStart(3)}    | ${installed.padEnd(8)} | ${details}`
  );
});

console.log('‚îÄ'.repeat(80));

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∞–∑–∞–º
const phase1Results = Object.values(results).filter(r => r.phase === 1);
const phase2Results = Object.values(results).filter(r => r.phase === 2);

const phase1Score = phase1Results.reduce((sum, r) => sum + r.score, 0);
const phase2Score = phase2Results.reduce((sum, r) => sum + r.score, 0);
const totalScore = phase1Score + phase2Score;

const phase1Max = phase1Results.length * 100;
const phase2Max = phase2Results.length * 100;
const totalMax = phase1Max + phase2Max;

const phase1Percentage = Math.round((phase1Score / phase1Max) * 100);
const phase2Percentage = Math.round((phase2Score / phase2Max) * 100);
const totalPercentage = Math.round((totalScore / totalMax) * 100);

console.log(`Phase 1 (Unit Testing): ${phase1Score}/${phase1Max} (${phase1Percentage}%)`);
console.log(`Phase 2 (E2E Testing):  ${phase2Score}/${phase2Max} (${phase2Percentage}%)`);
console.log(`–û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:        ${totalScore}/${totalMax} (${totalPercentage}%)`);

const passedCount = Object.values(results).filter(r => r.passed).length;
const installedCount = Object.values(results).filter(r => r.found).length;
const totalCount = Object.values(results).length;

console.log(`–£—Å–ø–µ—à–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤:  ${passedCount}/${totalCount}`);
console.log(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤: ${installedCount}/${totalCount}`);

console.log('\nüîç –ê–ù–ê–õ–ò–ó –ü–û –§–ê–ó–ê–ú:');
console.log('‚îÄ'.repeat(50));

// Phase 1 –∞–Ω–∞–ª–∏–∑
console.log(
  `üì¶ Phase 1 (Unit Testing): ${phase1Percentage >= 70 ? '‚úÖ –£–°–ü–ï–•' : phase1Percentage >= 50 ? '‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–û' : '‚ùå –ù–ï–£–î–ê–ß–ê'} (${phase1Percentage}%)`
);
if (results.vitest.found) console.log('   ‚úÖ Vitest –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
if (results.jest.found) console.log('   ‚úÖ Jest –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
if (results.coverage.found) console.log('   ‚úÖ Coverage –æ—Ç—á–µ—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è');

// Phase 2 –∞–Ω–∞–ª–∏–∑
console.log(
  `üì¶ Phase 2 (E2E Testing): ${phase2Percentage >= 70 ? '‚úÖ –£–°–ü–ï–•' : phase2Percentage >= 50 ? '‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–û' : '‚ùå –ù–ï–£–î–ê–ß–ê'} (${phase2Percentage}%)`
);
if (results.playwright.found)
  console.log(`   ‚úÖ Playwright –Ω–∞—Å—Ç—Ä–æ–µ–Ω (${results.playwright.tests} —Ç–µ—Å—Ç–æ–≤)`);
if (results.cypress.found) console.log('   ‚ö†Ô∏è  Cypress —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
if (!results.cypress.found) console.log('   ‚ùå Cypress –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');

console.log('\nüí° –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
console.log('‚îÄ'.repeat(50));

if (phase1Percentage < 70) {
  console.log('üî∏ –£–ª—É—á—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É Unit —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
  if (!results.coverage.found) console.log('   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ npm run test:coverage');
}

if (phase2Percentage < 70) {
  console.log('üî∏ –£–ª—É—á—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É E2E —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
  if (!results.cypress.found)
    console.log('   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Cypress: npm install --save-dev cypress');
  if (results.playwright.tests < 3) console.log('   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ Playwright —Ç–µ—Å—Ç–æ–≤');
}

console.log('\nüéØ –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –§–ò–ù–ê–õ–¨–ù–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:');
console.log('‚îÄ'.repeat(50));

if (totalPercentage >= 70) {
  console.log('üéâ –í–°–ï –ê–ù–ê–õ–ò–ó–ê–¢–û–†–´ –ì–û–¢–û–í–´ –ö –§–ò–ù–ê–õ–¨–ù–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò!');
  console.log('üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ UnifiedTestingAnalyzer');
  console.log('   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º AnalysisOrchestrator');
  console.log('   ‚Ä¢ Production deployment');
} else if (totalPercentage >= 50) {
  console.log('‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–ê–Ø –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –ò–ù–¢–ï–ì–†–ê–¶–ò–ò');
  console.log('üîß –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏:');
  console.log('   ‚Ä¢ –î–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–∞–±—ã—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤');
  console.log('   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤');
} else {
  console.log('‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê');
  console.log('üîß –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏:');
  console.log('   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤');
  console.log('   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤');
}

console.log('\nüèÜ –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–° –ü–†–û–ï–ö–¢–ê:');
console.log('‚îÄ'.repeat(50));

const projectStatus =
  totalPercentage >= 70
    ? '–ì–û–¢–û–í –ö –ü–†–û–î–ê–ö–®–ï–ù–£'
    : totalPercentage >= 50
      ? '–ì–û–¢–û–í –ö –†–ê–ó–†–ê–ë–û–¢–ö–ï'
      : '–¢–†–ï–ë–£–ï–¢ –ù–ê–°–¢–†–û–ô–ö–ò';
const projectColor = totalPercentage >= 70 ? 'üéâ' : totalPercentage >= 50 ? '‚ö†Ô∏è' : '‚ùå';

console.log(`${projectColor} –°–¢–ê–¢–£–°: ${projectStatus} (${totalPercentage}%)`);
console.log(`üìà Phase 1: ${phase1Percentage}% | Phase 2: ${phase2Percentage}%`);
console.log(
  `üî• –£—Å–ø–µ—à–Ω—ã—Ö: ${passedCount}/${totalCount} | –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö: ${installedCount}/${totalCount}`
);

console.log('\n‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
console.log(`üèÅ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: ${projectStatus}`);

// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –¥–ª—è CI/CD
process.exit(totalPercentage >= 50 ? 0 : 1);
