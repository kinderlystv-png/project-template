/**
 * –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è EAP Analyzer
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ API
 */

import { SecurityChecker } from './src/checkers/security/SecurityChecker';
import { DependenciesSecurityChecker } from './src/checkers/security/DependenciesSecurityChecker';
import { CodeSecurityChecker } from './src/checkers/security/CodeSecurityChecker';
import { ConfigSecurityChecker } from './src/checkers/security/ConfigSecurityChecker';
import { WebSecurityChecker } from './src/checkers/security/WebSecurityChecker';
import { XSSAnalyzer } from './src/checkers/security/analyzers/XSSAnalyzer';
import { CSRFAnalyzer } from './src/checkers/security/analyzers/CSRFAnalyzer';
import { WebSecurityFixTemplates } from './src/checkers/security/WebSecurityFixTemplates';
import { RecommendationEngine } from './src/recommendations/RecommendationEngine';
import { CheckContext } from './src/types/index.js';

interface ComponentAssessment {
  name: string;
  status: '–†–ê–ë–û–¢–ê–ï–¢' | '–ß–ê–°–¢–ò–ß–ù–û' | '–°–õ–û–ú–ê–ù' | '–ù–ï –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù';
  realCoverage: number;
  claimedCoverage: number;
  gap: number;
  issues: string[];
  workingFeatures: string[];
  brokenFeatures: string[];
  testResults?: any;
}

class CorrectedEAPEvaluator {
  async runCorrectedEvaluation(): Promise<{
    overallAssessment: string;
    components: ComponentAssessment[];
    realityCheck: string[];
    criticalFindings: string[];
    recommendations: string[];
  }> {
    console.log('üîç –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –û–¶–ï–ù–ö–ê EAP ANALYZER');
    console.log('='.repeat(70));

    const components: ComponentAssessment[] = [];
    const criticalFindings: string[] = [];
    const realityCheck: string[] = [];

    // 1. –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –ü–†–ê–í–ò–õ–¨–ù–´–ô API
    console.log('\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API)...');
    const depsAssessment = await this.assessDependenciesChecker();
    components.push(depsAssessment);

    // 2. –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ - –ü–†–ê–í–ò–õ–¨–ù–´–ô API
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API)...');
    const codeAssessment = await this.assessCodeChecker();
    components.push(codeAssessment);

    // 3. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - –ü–†–ê–í–ò–õ–¨–ù–´–ô API
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API)...');
    const configAssessment = await this.assessConfigChecker();
    components.push(configAssessment);

    // 4. XSS –∞–Ω–∞–ª–∏–∑
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ XSS –∞–Ω–∞–ª–∏–∑–∞...');
    const xssAssessment = await this.assessXSSAnalyzer();
    components.push(xssAssessment);

    // 5. CSRF –∞–Ω–∞–ª–∏–∑
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CSRF –∞–Ω–∞–ª–∏–∑–∞...');
    const csrfAssessment = await this.assessCSRFAnalyzer();
    components.push(csrfAssessment);

    // 6. –í–µ–±-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...');
    const webSecAssessment = await this.assessWebSecurity();
    components.push(webSecAssessment);

    // 7. –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    console.log('\n7Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...');
    const recAssessment = await this.assessRecommendationSystem();
    components.push(recAssessment);

    // 8. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è SecurityChecker
    console.log('\n8Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SecurityChecker...');
    const integrationAssessment = await this.assessSecurityCheckerIntegration();
    components.push(integrationAssessment);

    // –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    const overallAssessment = this.calculateOverallAssessment(components);
    const recommendations = this.generateDetailedRecommendations(components);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞—è–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    components.forEach(comp => {
      if (comp.gap > 20) {
        realityCheck.push(
          `${comp.name}: –ó–∞—è–≤–ª–µ–Ω–æ ${comp.claimedCoverage}%, —Ä–µ–∞–ª—å–Ω–æ ${comp.realCoverage}% (—Ä–∞–∑—Ä—ã–≤ ${comp.gap}%)`
        );
      }

      if (comp.status === '–°–õ–û–ú–ê–ù') {
        criticalFindings.push(`–ö–†–ò–¢–ò–ß–ù–û: ${comp.name} –Ω–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç`);
      }
    });

    return {
      overallAssessment,
      components,
      realityCheck,
      criticalFindings,
      recommendations,
    };
  }

  async assessDependenciesChecker(): Promise<ComponentAssessment> {
    const assessment: ComponentAssessment = {
      name: 'Dependencies Security Checker',
      status: '–ù–ï –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù',
      realCoverage: 0,
      claimedCoverage: 85, // –ó–∞—è–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∏–∑ –æ—Ç—á–µ—Ç–æ–≤
      gap: 0,
      issues: [],
      workingFeatures: [],
      brokenFeatures: [],
    };

    try {
      const checker = new DependenciesSecurityChecker();
      const result = await checker.checkDependencies(process.cwd());

      assessment.workingFeatures = [
        '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞',
        '–ó–∞–ø—É—Å–∫ checkDependencies',
        '–í–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞',
      ];

      if (result && typeof result === 'object') {
        assessment.status = '–†–ê–ë–û–¢–ê–ï–¢';
        assessment.realCoverage = 70;
        assessment.testResults = {
          hasVulnerabilities: result.vulnerabilities?.length > 0,
          hasAuditSummary: !!result.auditSummary,
          scannedPackages: result.vulnerabilities?.length || 0,
        };
        console.log(`   ‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: ${result.vulnerabilities?.length || 0}`);
        console.log(`   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—É–¥–∏—Ç–∞: ${JSON.stringify(result.auditSummary)}`);
      } else {
        assessment.status = '–ß–ê–°–¢–ò–ß–ù–û';
        assessment.realCoverage = 30;
        assessment.issues.push('–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö');
      }
    } catch (error) {
      assessment.status = '–°–õ–û–ú–ê–ù';
      assessment.realCoverage = 0;
      assessment.issues.push(`–û—à–∏–±–∫–∞: ${error.message}`);
      assessment.brokenFeatures.push('checkDependencies method');
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }

    assessment.gap = Math.abs(assessment.claimedCoverage - assessment.realCoverage);
    return assessment;
  }

  async assessCodeChecker(): Promise<ComponentAssessment> {
    const assessment: ComponentAssessment = {
      name: 'Code Security Checker',
      status: '–ù–ï –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù',
      realCoverage: 0,
      claimedCoverage: 90, // –ó–∞—è–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ
      gap: 0,
      issues: [],
      workingFeatures: [],
      brokenFeatures: [],
    };

    try {
      const checker = new CodeSecurityChecker();
      const result = await checker.checkCodeSecurity(process.cwd());

      assessment.workingFeatures = [
        '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞',
        '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞',
        '–ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞',
      ];

      if (result && result.issues && Array.isArray(result.issues)) {
        assessment.status = '–†–ê–ë–û–¢–ê–ï–¢';
        assessment.realCoverage = 75;
        assessment.testResults = {
          issuesFound: result.issues.length,
          scannedFiles: result.scannedFiles,
          categories: Object.keys(result.summary),
        };
        console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${result.issues.length}`);
        console.log(`   üìÅ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${result.scannedFiles}`);
      } else {
        assessment.status = '–ß–ê–°–¢–ò–ß–ù–û';
        assessment.realCoverage = 40;
        assessment.issues.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
      }
    } catch (error) {
      assessment.status = '–°–õ–û–ú–ê–ù';
      assessment.realCoverage = 0;
      assessment.issues.push(`–û—à–∏–±–∫–∞: ${error.message}`);
      assessment.brokenFeatures.push('checkCodeSecurity method');
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }

    assessment.gap = Math.abs(assessment.claimedCoverage - assessment.realCoverage);
    return assessment;
  }

  async assessConfigChecker(): Promise<ComponentAssessment> {
    const assessment: ComponentAssessment = {
      name: 'Configuration Security Checker',
      status: '–ù–ï –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù',
      realCoverage: 0,
      claimedCoverage: 80, // –ó–∞—è–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ
      gap: 0,
      issues: [],
      workingFeatures: [],
      brokenFeatures: [],
    };

    try {
      const checker = new ConfigSecurityChecker();
      const result = await checker.checkConfigSecurity(process.cwd());

      assessment.workingFeatures = [
        '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞',
        '–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤',
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
      ];

      if (result && result.issues && Array.isArray(result.issues)) {
        assessment.status = '–†–ê–ë–û–¢–ê–ï–¢';
        assessment.realCoverage = 65;
        assessment.testResults = {
          configIssues: result.issues.length,
          checkedConfigs: result.configFiles?.length || result.issues?.length || 0,
        };
        console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${result.issues.length}`);
      } else {
        assessment.status = '–ß–ê–°–¢–ò–ß–ù–û';
        assessment.realCoverage = 35;
        assessment.issues.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
      }
    } catch (error) {
      assessment.status = '–°–õ–û–ú–ê–ù';
      assessment.realCoverage = 0;
      assessment.issues.push(`–û—à–∏–±–∫–∞: ${error.message}`);
      assessment.brokenFeatures.push('checkConfigSecurity method');
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }

    assessment.gap = Math.abs(assessment.claimedCoverage - assessment.realCoverage);
    return assessment;
  }

  async assessXSSAnalyzer(): Promise<ComponentAssessment> {
    const assessment: ComponentAssessment = {
      name: 'XSS Analyzer',
      status: '–ù–ï –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù',
      realCoverage: 0,
      claimedCoverage: 95, // –ó–∞—è–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ
      gap: 0,
      issues: [],
      workingFeatures: [],
      brokenFeatures: [],
    };

    try {
      const analyzer = new XSSAnalyzer();

      const testCode = `
        document.getElementById('test').innerHTML = userInput;
        eval('var x = ' + userInput);
        document.write('<div>' + data + '</div>');
        $('#output').html(userData);
      `;

      const context = this.createTestContext('xss-test.js', testCode);
      const result = await analyzer.analyzeXSS(context);

      assessment.workingFeatures = [
        'innerHTML –∞–Ω–∞–ª–∏–∑',
        'eval –¥–µ—Ç–µ–∫—Ü–∏—è',
        'document.write –ø—Ä–æ–≤–µ—Ä–∫–∞',
        'jQuery html() –∞–Ω–∞–ª–∏–∑',
      ];

      if (result && result.vulnerabilities && result.vulnerabilities.length >= 3) {
        assessment.status = '–†–ê–ë–û–¢–ê–ï–¢';
        assessment.realCoverage = 95;
        assessment.testResults = {
          vulnerabilitiesFound: result.vulnerabilities.length,
          patterns: result.vulnerabilities.map(v => v.type),
        };
        console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ XSS —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: ${result.vulnerabilities.length}`);
      } else if (result && result.vulnerabilities && result.vulnerabilities.length > 0) {
        assessment.status = '–ß–ê–°–¢–ò–ß–ù–û';
        assessment.realCoverage = 60;
        assessment.issues.push('–ù–∞–π–¥–µ–Ω—ã –Ω–µ –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ XSS –ø–∞—Ç—Ç–µ—Ä–Ω—ã');
      } else {
        assessment.status = '–°–õ–û–ú–ê–ù';
        assessment.realCoverage = 0;
        assessment.issues.push('–ö–†–ò–¢–ò–ß–ù–û: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ—á–µ–≤–∏–¥–Ω—ã–µ XSS —É—è–∑–≤–∏–º–æ—Å—Ç–∏');
        assessment.brokenFeatures.push('XSS detection patterns');
      }
    } catch (error) {
      assessment.status = '–°–õ–û–ú–ê–ù';
      assessment.realCoverage = 0;
      assessment.issues.push(`–û—à–∏–±–∫–∞: ${error.message}`);
      assessment.brokenFeatures.push('analyzeXSS method');
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }

    assessment.gap = Math.abs(assessment.claimedCoverage - assessment.realCoverage);
    return assessment;
  }

  async assessCSRFAnalyzer(): Promise<ComponentAssessment> {
    const assessment: ComponentAssessment = {
      name: 'CSRF Analyzer',
      status: '–ù–ï –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù',
      realCoverage: 0,
      claimedCoverage: 85, // –ó–∞—è–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ
      gap: 0,
      issues: [],
      workingFeatures: [],
      brokenFeatures: [],
    };

    try {
      const analyzer = new CSRFAnalyzer();

      const testCode = `
        fetch('/api/transfer', {
          method: 'POST',
          body: JSON.stringify({ amount: 1000 })
        });

        $.post('/api/delete-user', { userId: 123 });

        axios.post('/api/change-password', { newPassword: 'test' });
      `;

      const context = this.createTestContext('csrf-test.js', testCode);
      const result = await analyzer.analyzeCSRF(context);

      assessment.workingFeatures = [
        'fetch POST –∞–Ω–∞–ª–∏–∑',
        'jQuery POST –¥–µ—Ç–µ–∫—Ü–∏—è',
        'axios POST –ø—Ä–æ–≤–µ—Ä–∫–∞',
        'state-changing –æ–ø–µ—Ä–∞—Ü–∏–∏',
      ];

      if (result && result.issues && result.issues.length >= 2) {
        assessment.status = '–†–ê–ë–û–¢–ê–ï–¢';
        assessment.realCoverage = 85;
        assessment.testResults = {
          vulnerabilitiesFound: result.issues.length,
          riskLevels: result.issues.map(v => v.severity),
        };
        console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ CSRF —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: ${result.issues.length}`);
      } else if (result && result.issues && result.issues.length > 0) {
        assessment.status = '–ß–ê–°–¢–ò–ß–ù–û';
        assessment.realCoverage = 50;
        assessment.issues.push('–ù–∞–π–¥–µ–Ω—ã –Ω–µ –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ CSRF –ø–∞—Ç—Ç–µ—Ä–Ω—ã');
      } else {
        assessment.status = '–ß–ê–°–¢–ò–ß–ù–û';
        assessment.realCoverage = 20;
        assessment.issues.push('–ù–µ –Ω–∞–π–¥–µ–Ω—ã CSRF —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –∫–æ–¥–µ');
      }
    } catch (error) {
      assessment.status = '–°–õ–û–ú–ê–ù';
      assessment.realCoverage = 0;
      assessment.issues.push(`–û—à–∏–±–∫–∞: ${error.message}`);
      assessment.brokenFeatures.push('analyzeCSRF method');
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }

    assessment.gap = Math.abs(assessment.claimedCoverage - assessment.realCoverage);
    return assessment;
  }

  async assessWebSecurity(): Promise<ComponentAssessment> {
    const assessment: ComponentAssessment = {
      name: 'Web Security Integration',
      status: '–ù–ï –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù',
      realCoverage: 0,
      claimedCoverage: 90, // –ó–∞—è–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ
      gap: 0,
      issues: [],
      workingFeatures: [],
      brokenFeatures: [],
    };

    try {
      const checker = new WebSecurityChecker();

      const testCode = `
        function handleUserInput(input) {
          document.getElementById('output').innerHTML = input;
          eval('var result = ' + input);

          fetch('/api/action', {
            method: 'POST',
            body: JSON.stringify({ data: input })
          });
        }
      `;

      const context = this.createTestContext('websec-test.js', testCode);
      const result = await checker.analyzeWebSecurity(context);

      assessment.workingFeatures = [
        'XSS + CSRF –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è',
        '–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
        '–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
        'Unified reporting',
      ];

      if (result && result.summary && result.summary.totalVulnerabilities > 0) {
        assessment.status = '–†–ê–ë–û–¢–ê–ï–¢';
        assessment.realCoverage = 88;
        assessment.testResults = {
          totalVulnerabilities: result.summary.totalVulnerabilities,
          xssFound: result.xss?.vulnerabilities?.length || 0,
          csrfFound: result.csrf?.issues?.length || 0,
          hasRecommendations: result.recommendations?.length > 0,
        };
        console.log(`   ‚úÖ –û–±—â–∏—Ö –≤–µ–±-—É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: ${result.summary.totalVulnerabilities}`);
      } else {
        assessment.status = '–ß–ê–°–¢–ò–ß–ù–û';
        assessment.realCoverage = 45;
        assessment.issues.push('–†–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
      }
    } catch (error) {
      assessment.status = '–°–õ–û–ú–ê–ù';
      assessment.realCoverage = 0;
      assessment.issues.push(`–û—à–∏–±–∫–∞: ${error.message}`);
      assessment.brokenFeatures.push('analyzeWebSecurity method');
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }

    assessment.gap = Math.abs(assessment.claimedCoverage - assessment.realCoverage);
    return assessment;
  }

  async assessRecommendationSystem(): Promise<ComponentAssessment> {
    const assessment: ComponentAssessment = {
      name: 'Recommendation System',
      status: '–ù–ï –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù',
      realCoverage: 0,
      claimedCoverage: 95, // –ó–∞—è–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ
      gap: 0,
      issues: [],
      workingFeatures: [],
      brokenFeatures: [],
    };

    try {
      // –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ pipeline —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
      const webChecker = new WebSecurityChecker();
      const testCode = `
        document.body.innerHTML = userInput;
        eval(userCode);
        fetch('/api/transfer', { method: 'POST', body: formData });
      `;

      const context = this.createTestContext('rec-test.js', testCode);
      const webResult = await webChecker.analyzeWebSecurity(context);

      // –¢–µ—Å—Ç WebSecurityFixTemplates
      const webRecommendations = WebSecurityFixTemplates.generateWebRecommendations(webResult);

      // –¢–µ—Å—Ç RecommendationEngine
      const engineRecommendations = RecommendationEngine.generateRecommendations(webResult);

      assessment.workingFeatures = [
        'WebSecurityFixTemplates',
        'RecommendationEngine integration',
        'Type conversion pipeline',
        'Priority & sorting system',
      ];

      if (webRecommendations.length > 0 && engineRecommendations.length > 0) {
        const hasValidStructure = engineRecommendations.every(
          r => r.id && r.title && r.description && r.fixTemplate
        );

        if (hasValidStructure) {
          assessment.status = '–†–ê–ë–û–¢–ê–ï–¢';
          assessment.realCoverage = 92;
          assessment.testResults = {
            webRecommendations: webRecommendations.length,
            engineRecommendations: engineRecommendations.length,
            hasCodeExamples: webRecommendations.some(r => r.codeExample),
            hasPriorities: engineRecommendations.every(r => r.priority),
            validStructure: hasValidStructure,
          };
          console.log(`   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: ${engineRecommendations.length}`);
        } else {
          assessment.status = '–ß–ê–°–¢–ò–ß–ù–û';
          assessment.realCoverage = 60;
          assessment.issues.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π');
        }
      } else {
        assessment.status = '–°–õ–û–ú–ê–ù';
        assessment.realCoverage = 0;
        assessment.issues.push('–ö–†–ò–¢–ò–ß–ù–û: –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
        assessment.brokenFeatures.push('Recommendation generation pipeline');
      }
    } catch (error) {
      assessment.status = '–°–õ–û–ú–ê–ù';
      assessment.realCoverage = 0;
      assessment.issues.push(`–û—à–∏–±–∫–∞: ${error.message}`);
      assessment.brokenFeatures.push('Full recommendation pipeline');
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }

    assessment.gap = Math.abs(assessment.claimedCoverage - assessment.realCoverage);
    return assessment;
  }

  async assessSecurityCheckerIntegration(): Promise<ComponentAssessment> {
    const assessment: ComponentAssessment = {
      name: 'SecurityChecker Main Integration',
      status: '–ù–ï –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù',
      realCoverage: 0,
      claimedCoverage: 85, // –ó–∞—è–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ
      gap: 0,
      issues: [],
      workingFeatures: [],
      brokenFeatures: [],
    };

    try {
      const context: CheckContext = {
        projectPath: process.cwd(),
        projectInfo: {
          name: 'test-project',
          version: '1.0.0',
          hasTypeScript: true,
          hasTests: false,
          hasDocker: false,
          hasCICD: false,
          dependencies: {
            production: 0,
            development: 0,
            total: 0,
          },
        },
        options: {
          projectPath: process.cwd(),
        },
      };

      const result = await SecurityChecker.checkComponent(context);

      assessment.workingFeatures = [
        'Main checkComponent method',
        'ProcessIsolatedAnalyzer integration',
        'Component result structure',
        'Error handling',
      ];

      if (result && typeof result === 'object' && result.component) {
        assessment.status = '–†–ê–ë–û–¢–ê–ï–¢';
        assessment.realCoverage = 80;
        assessment.testResults = {
          hasValidResult: true,
          resultStructure: Object.keys(result),
          hasRecommendations: !!result.recommendations,
          hasScore: typeof result.score === 'number',
        };
        console.log(`   ‚úÖ SecurityChecker –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç`);
        console.log(`   üìä –ë–∞–ª–ª: ${result.score}/${result.maxScore}`);
      } else {
        assessment.status = '–ß–ê–°–¢–ò–ß–ù–û';
        assessment.realCoverage = 40;
        assessment.issues.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç SecurityChecker');
      }
    } catch (error) {
      assessment.status = '–°–õ–û–ú–ê–ù';
      assessment.realCoverage = 0;
      assessment.issues.push(`–û—à–∏–±–∫–∞: ${error.message}`);
      assessment.brokenFeatures.push('checkComponent method');
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }

    assessment.gap = Math.abs(assessment.claimedCoverage - assessment.realCoverage);
    return assessment;
  }

  private createTestContext(fileName: string, content?: string): any {
    return {
      projectPath: process.cwd(),
      filePath: fileName,
      fileContent: content || '',
      workspaceRoot: process.cwd(),
    };
  }

  private calculateOverallAssessment(components: ComponentAssessment[]): string {
    const working = components.filter(c => c.status === '–†–ê–ë–û–¢–ê–ï–¢').length;
    const partial = components.filter(c => c.status === '–ß–ê–°–¢–ò–ß–ù–û').length;
    const broken = components.filter(c => c.status === '–°–õ–û–ú–ê–ù').length;
    const total = components.length;

    const avgRealCoverage = components.reduce((sum, c) => sum + c.realCoverage, 0) / total;
    const avgClaimedCoverage = components.reduce((sum, c) => sum + c.claimedCoverage, 0) / total;

    let status = '';
    if (broken === 0 && working >= total * 0.8) {
      status = '–í–´–°–û–ö–ò–ô –£–†–û–í–ï–ù–¨ –ì–û–¢–û–í–ù–û–°–¢–ò';
    } else if (broken <= 1 && working >= total * 0.6) {
      status = '–°–†–ï–î–ù–ò–ô –£–†–û–í–ï–ù–¨ –ì–û–¢–û–í–ù–û–°–¢–ò';
    } else {
      status = '–ù–ò–ó–ö–ò–ô –£–†–û–í–ï–ù–¨ –ì–û–¢–û–í–ù–û–°–¢–ò';
    }

    return `${status} (–†–µ–∞–ª—å–Ω–æ: ${Math.round(avgRealCoverage)}%, –ó–∞—è–≤–ª–µ–Ω–æ: ${Math.round(avgClaimedCoverage)}%)`;
  }

  private generateDetailedRecommendations(components: ComponentAssessment[]): string[] {
    const recommendations: string[] = [];

    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    components
      .filter(c => c.status === '–°–õ–û–ú–ê–ù')
      .forEach(comp => {
        recommendations.push(
          `üö® –ö–†–ò–¢–ò–ß–ù–û: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ${comp.name} - ${comp.brokenFeatures.join(', ')}`
        );
      });

    // –£–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö
    components
      .filter(c => c.status === '–ß–ê–°–¢–ò–ß–ù–û')
      .forEach(comp => {
        recommendations.push(
          `‚ö†Ô∏è –£–õ–£–ß–®–ò–¢–¨: ${comp.name} - –¥–æ–≤–µ—Å—Ç–∏ –ø–æ–∫—Ä—ã—Ç–∏–µ —Å ${comp.realCoverage}% –¥–æ ${comp.claimedCoverage}%`
        );
      });

    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å —Ä–∞–∑—Ä—ã–≤–∞–º–∏
    components
      .filter(c => c.status === '–†–ê–ë–û–¢–ê–ï–¢' && c.gap > 10)
      .forEach(comp => {
        recommendations.push(
          `üîß –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–¢–¨: ${comp.name} - —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞–∑—Ä—ã–≤ –º–µ–∂–¥—É –∑–∞—è–≤–ª–µ–Ω–Ω—ã–º –∏ —Ä–µ–∞–ª—å–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º`
        );
      });

    return recommendations;
  }
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
async function runCorrectedEvaluation() {
  const evaluator = new CorrectedEAPEvaluator();

  try {
    const results = await evaluator.runCorrectedEvaluation();

    console.log('\n' + '='.repeat(70));
    console.log('üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê –†–ï–ê–õ–¨–ù–û–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø EAP ANALYZER');
    console.log('='.repeat(70));

    console.log(`\nüéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê: ${results.overallAssessment}\n`);

    console.log('üìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê –ü–û –ö–û–ú–ü–û–ù–ï–ù–¢–ê–ú:\n');
    results.components.forEach((comp, index) => {
      const statusIcon =
        comp.status === '–†–ê–ë–û–¢–ê–ï–¢'
          ? '‚úÖ'
          : comp.status === '–ß–ê–°–¢–ò–ß–ù–û'
            ? '‚ö†Ô∏è'
            : comp.status === '–°–õ–û–ú–ê–ù'
              ? '‚ùå'
              : '‚ùì';

      console.log(`${index + 1}. ${statusIcon} ${comp.name}`);
      console.log(
        `   üìä –ó–∞—è–≤–ª–µ–Ω–æ: ${comp.claimedCoverage}% | –†–µ–∞–ª—å–Ω–æ: ${comp.realCoverage}% | –†–∞–∑—Ä—ã–≤: ${comp.gap}%`
      );
      console.log(`   ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç: ${comp.workingFeatures.join(', ') || '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`);

      if (comp.brokenFeatures.length > 0) {
        console.log(`   ‚ùå –°–ª–æ–º–∞–Ω–æ: ${comp.brokenFeatures.join(', ')}`);
      }

      if (comp.issues.length > 0) {
        console.log(`   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: ${comp.issues.join('; ')}`);
      }

      if (comp.testResults) {
        console.log(
          `   üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${JSON.stringify(comp.testResults, null, 2).slice(0, 200)}...`
        );
      }
      console.log('');
    });

    if (results.realityCheck.length > 0) {
      console.log('üîç –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–û–°–¢–ò –ó–ê–Ø–í–õ–ï–ù–ò–ô:');
      results.realityCheck.forEach(check => {
        console.log(`   üìâ ${check}`);
      });
      console.log('');
    }

    if (results.criticalFindings.length > 0) {
      console.log('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –í–´–í–û–î–´:');
      results.criticalFindings.forEach(finding => {
        console.log(`   ‚ùå ${finding}`);
      });
      console.log('');
    }

    console.log('üí° –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    results.recommendations.forEach((rec, index) => {
      console.log(`   ${index + 1}. ${rec}`);
    });

    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const avgReal =
      results.components.reduce((sum, c) => sum + c.realCoverage, 0) / results.components.length;
    const avgClaimed =
      results.components.reduce((sum, c) => sum + c.claimedCoverage, 0) / results.components.length;
    const overallGap = Math.abs(avgClaimed - avgReal);

    console.log('\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–∞—è–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: ${Math.round(avgClaimed)}%`);
    console.log(`   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: ${Math.round(avgReal)}%`);
    console.log(`   ‚Ä¢ –û–±—â–∏–π —Ä–∞–∑—Ä—ã–≤ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏: ${Math.round(overallGap)}%`);
    console.log(
      `   ‚Ä¢ –†–∞–±–æ—Ç–∞—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${results.components.filter(c => c.status === '–†–ê–ë–û–¢–ê–ï–¢').length}/${results.components.length}`
    );
    console.log(`   ‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: ${results.criticalFindings.length}`);

    console.log('\nüéØ –í–ï–†–î–ò–ö–¢:');
    if (avgReal >= 80 && results.criticalFindings.length === 0) {
      console.log('   ‚úÖ –ú–û–î–£–õ–¨ –ì–û–¢–û–í –ö –ü–†–û–î–ê–ö–®–ï–ù–£');
    } else if (avgReal >= 60 && results.criticalFindings.length <= 2) {
      console.log('   ‚ö†Ô∏è –ú–û–î–£–õ–¨ –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–û–ö');
    } else {
      console.log('   ‚ùå –ú–û–î–£–õ–¨ –ù–ï –ì–û–¢–û–í (–ú–ù–û–ì–û –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ü–†–û–ë–õ–ï–ú)');
    }

    return results;
  } catch (error) {
    console.error('üí• –§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê –í –û–¶–ï–ù–ö–ï:', error);
    return null;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É
runCorrectedEvaluation()
  .then(results => {
    if (results) {
      const avgReal =
        results.components.reduce((sum, c) => sum + c.realCoverage, 0) / results.components.length;
      process.exit(avgReal >= 60 ? 0 : 1);
    } else {
      process.exit(1);
    }
  })
  .catch(() => process.exit(1));
