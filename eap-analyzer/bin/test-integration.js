#!/usr/bin/env node

/**
 * CLI –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
 */

import { GoldenStandardAnalyzer } from '../src/analyzer.js';
import * as path from 'path';

async function testIntegration() {
  const projectPath = process.argv[2] || '.';
  const absolutePath = path.resolve(projectPath);

  console.log('üî¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –°–¢–†–£–ö–¢–£–†–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê');
  console.log('='.repeat(60));
  console.log(`üìÇ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø—Ä–æ–µ–∫—Ç: ${absolutePath}`);
  console.log('');

  try {
    const analyzer = new GoldenStandardAnalyzer();

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    console.log('üß™ –ó–∞–ø—É—Å–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...');
    const result = await analyzer.performStructuralAnalysis(absolutePath);

    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–¢–†–£–ö–¢–£–†–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê:');
    console.log('='.repeat(60));

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
    console.log('\nüîÑ –î–£–ü–õ–ò–ö–ê–¶–ò–Ø:');
    console.log(`   üìã –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${result.duplication.analyzedFiles}`);
    console.log(`   üìä –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤: ${result.duplication.duplicatedBlocks}`);
    console.log(`   üìà –ü—Ä–æ—Ü–µ–Ω—Ç –¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: ${result.duplication.percentage}%`);
    console.log(`   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å: ${result.duplication.percentage <= 100 ? '–û–ö' : '–û–®–ò–ë–ö–ê!'}`);

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    console.log('\nüìä –°–õ–û–ñ–ù–û–°–¢–¨:');
    console.log(`   üìã –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${result.complexity.summary.totalFiles}`);
    console.log(`   üìà –°—Ä–µ–¥–Ω—è—è —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è: ${result.complexity.summary.avgCyclomatic}`);
    console.log(`   üìà –°—Ä–µ–¥–Ω—è—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è: ${result.complexity.summary.avgCognitive}`);
    console.log(`   üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è: ${result.complexity.summary.maxCyclomatic}`);
    console.log(
      `   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å: ${result.complexity.summary.maxCyclomatic < 500 ? '–û–ö' : '–û–®–ò–ë–ö–ê!'}`
    );

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    console.log('\nüìÅ –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –§–ê–ô–õ–û–í:');
    console.log(`   üìã –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${result.fileClassification.total}`);
    console.log(`   üìã –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: ${result.fileClassification.classified}`);
    console.log('   üìä –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:', result.fileClassification.categories.byCategory);
    console.log('   üõ†Ô∏è –ü–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞–º:', result.fileClassification.categories.byFramework);

    // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö —Å–æ —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é
    console.log('\nüìã –î–ï–¢–ê–õ–ò –°–õ–û–ñ–ù–û–°–¢–ò (—Ç–æ–ø-5):');
    const topComplexity = result.complexity.files
      .filter(f => f.shouldAnalyze && f.metrics.cyclomatic > 0)
      .sort((a, b) => b.metrics.cyclomatic - a.metrics.cyclomatic)
      .slice(0, 5);

    topComplexity.forEach((file, index) => {
      console.log(`   ${index + 1}. ${path.basename(file.file)}`);
      console.log(`      –¶–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è: ${file.metrics.cyclomatic}`);
      console.log(`      –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è: ${file.metrics.cognitive}`);
      console.log(`      –§—É–Ω–∫—Ü–∏–π: ${file.metrics.functions.length}`);
    });

    console.log('\n' + '='.repeat(60));
    console.log('‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    const hasIssues =
      result.duplication.percentage > 100 || result.complexity.summary.maxCyclomatic > 1000;

    if (hasIssues) {
      console.log('‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò –í –†–ê–°–ß–ï–¢–ê–•!');
      process.exit(1);
    } else {
      console.log('üéâ –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–∑—É–º–Ω–æ–≥–æ. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç!');
    }
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò:', error);
    console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    process.exit(1);
  }
}

// –°–ø—Ä–∞–≤–∫–∞
if (process.argv.includes('--help') || process.argv.includes('-h')) {
  console.log(`
üî¨ Test Integration - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
  npm run test-integration [–ø—É—Ç—å]

–ü–†–ò–ú–ï–†–´:
  npm run test-integration                    # –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
  npm run test-integration ../my-project      # –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
  npm run test-integration ./src             # –ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω–∏–∫–∞–º–∏

–û–ü–ò–°–ê–ù–ò–ï:
  –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:
  - –î–µ—Ç–µ–∫—Ç–æ—Ä –¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ >100% –¥—É–ø–ª–∏–∫–∞—Ü–∏–∏)
  - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)
  - –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–æ–≤ (—É–º–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)
`);
  process.exit(0);
}

testIntegration();
