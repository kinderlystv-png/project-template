#!/usr/bin/env node

/**
 * Ultimate EAP Analyzer v3.0 - Quick Analysis (ES Module)
 * –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ª—é–±–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { generateRoadmapMD } from './generate-roadmap.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const analyzerDir = path.dirname(__dirname); // –ü–∞–ø–∫–∞ eap-analyzer

// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
const targetProject = process.argv[2] || process.cwd();

console.log('üîç Ultimate EAP Analyzer v3.0 - –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑');
console.log('='.repeat(50));

if (!fs.existsSync(targetProject)) {
  console.error('‚ùå –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω:', targetProject);
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–ø–∫—É —Å–∞–º–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
const resolvedTarget = path.resolve(targetProject);
if (resolvedTarget === analyzerDir) {
  console.log('üö´ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º —Å–µ–±—è');
  console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥—É—é –ø–∞–ø–∫—É');
  process.exit(0);
}

// –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤
function analyzeProject(projectPath) {
  const stats = {
    totalFiles: 0,
    codeFiles: 0,
    totalLines: 0,
    fileTypes: {},
    issues: {
      security: 0,
      performance: 0,
      quality: 0,
      debt: 0,
    },
    recommendations: [],
  };

  function scanDirectory(dir) {
    try {
      const entries = fs.readdirSync(dir, { withFileTypes: true });

      for (const entry of entries) {
        const fullPath = path.join(dir, entry.name);

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏ –∏ —Å–∞–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        if (entry.isDirectory()) {
          const excludeDirs = [
            'node_modules',
            '.git',
            'dist',
            'build',
            '.next',
            'eap-analyzer',
            'eap-analyzer-github-ready',
          ];
          if (!excludeDirs.includes(entry.name)) {
            scanDirectory(fullPath);
          }
          continue;
        }

        if (entry.isFile()) {
          stats.totalFiles++;

          const ext = path.extname(entry.name).toLowerCase();
          stats.fileTypes[ext] = (stats.fileTypes[ext] || 0) + 1;

          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–¥–æ–≤—ã–µ —Ñ–∞–π–ª—ã
          if (
            [
              '.js',
              '.ts',
              '.jsx',
              '.tsx',
              '.vue',
              '.svelte',
              '.py',
              '.java',
              '.cs',
              '.cpp',
              '.c',
              '.php',
            ].includes(ext)
          ) {
            stats.codeFiles++;
            analyzeCodeFile(fullPath, stats);
          }
        }
      }
    } catch (err) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    }
  }

  function analyzeCodeFile(filePath, stats) {
    try {
      const content = fs.readFileSync(filePath, 'utf8');
      const lines = content.split('\n');
      stats.totalLines += lines.length;

      // –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
      if (content.includes('eval(')) {
        stats.issues.security++;
        stats.recommendations.push({
          type: 'security',
          file: path.relative(projectPath, filePath),
          issue: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ eval() –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ',
        });
      }

      if (content.includes('document.write')) {
        stats.issues.security++;
        stats.recommendations.push({
          type: 'security',
          file: path.relative(projectPath, filePath),
          issue: 'document.write –º–æ–∂–µ—Ç –±—ã—Ç—å —É—è–∑–≤–∏–º—ã–º',
        });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      if (content.includes('for (') && content.includes('getElementById')) {
        stats.issues.performance++;
        stats.recommendations.push({
          type: 'performance',
          file: path.relative(projectPath, filePath),
          issue: 'DOM-–∑–∞–ø—Ä–æ—Å—ã –≤ —Ü–∏–∫–ª–∞—Ö –∑–∞–º–µ–¥–ª—è—é—Ç —Ä–∞–±–æ—Ç—É',
        });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
      if (lines.length > 500) {
        stats.issues.quality++;
        stats.recommendations.push({
          type: 'quality',
          file: path.relative(projectPath, filePath),
          issue: `–ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª (${lines.length} —Å—Ç—Ä–æ–∫) - —Å—Ç–æ–∏—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç—å`,
        });
      }

      const longLines = lines.filter(line => line.length > 120);
      if (longLines.length > 10) {
        stats.issues.quality++;
        stats.recommendations.push({
          type: 'quality',
          file: path.relative(projectPath, filePath),
          issue: `–ú–Ω–æ–≥–æ –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ (${longLines.length}) - —É—Ö—É–¥—à–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ—Å—Ç—å`,
        });
      }

      // –ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞
      const todoCount = (content.match(/TODO|FIXME|HACK|XXX/gi) || []).length;
      if (todoCount > 5) {
        stats.issues.debt++;
        stats.recommendations.push({
          type: 'debt',
          file: path.relative(projectPath, filePath),
          issue: `–ú–Ω–æ–≥–æ TODO/FIXME –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (${todoCount}) - –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è –¥–æ–ª–≥`,
        });
      }
    } catch (err) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    }
  }

  console.log(`üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: ${projectPath}`);
  scanDirectory(projectPath);

  return stats;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
const results = analyzeProject(targetProject);

// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:');
console.log(`üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${results.totalFiles}`);
console.log(`üíª –ö–æ–¥–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: ${results.codeFiles}`);
console.log(`üìè –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: ${results.totalLines.toLocaleString()}`);

console.log('\nüìà –¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤:');
Object.entries(results.fileTypes)
  .sort(([, a], [, b]) => b - a)
  .slice(0, 10)
  .forEach(([ext, count]) => {
    console.log(`   ${ext || '–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è'}: ${count}`);
  });

console.log('\nüéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:');
console.log(`üîí Security: ${results.issues.security} –ø—Ä–æ–±–ª–µ–º`);
console.log(`‚ö° Performance: ${results.issues.performance} –ø—Ä–æ–±–ª–µ–º`);
console.log(`‚ú® Quality: ${results.issues.quality} –ø—Ä–æ–±–ª–µ–º`);
console.log(`üí∏ Technical Debt: ${results.issues.debt} –ø—Ä–æ–±–ª–µ–º`);

if (results.recommendations.length > 0) {
  console.log('\nüí° –¢–æ–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  results.recommendations.slice(0, 10).forEach((rec, i) => {
    const icon =
      rec.type === 'security'
        ? 'üîí'
        : rec.type === 'performance'
          ? '‚ö°'
          : rec.type === 'quality'
            ? '‚ú®'
            : 'üí∏';
    console.log(`   ${icon} ${rec.file}: ${rec.issue}`);
  });
}

// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–π ROI
const totalIssues = Object.values(results.issues).reduce((a, b) => a + b, 0);
const estimatedSavings = totalIssues * 2000; // $2000 –∑–∞ –ø—Ä–æ–±–ª–µ–º—É
const effortHours = totalIssues * 4; // 4 —á–∞—Å–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É
const roiPercent =
  estimatedSavings > 0
    ? Math.round(((estimatedSavings - effortHours * 100) / (effortHours * 100)) * 100)
    : 0;

console.log('\nüí∞ ROI –ê–Ω–∞–ª–∏–∑:');
console.log(`üíµ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è: $${estimatedSavings.toLocaleString()}`);
console.log(`‚è±Ô∏è  –¢—Ä–µ–±—É–µ–º—ã–µ —É—Å–∏–ª–∏—è: ${effortHours} —á–∞—Å–æ–≤`);
console.log(`üìà ROI: ${roiPercent}%`);

// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
const reportData = {
  timestamp: new Date().toISOString(),
  projectPath: targetProject,
  version: '3.0.0',
  analyzer: 'Ultimate EAP Analyzer',
  summary: {
    totalFiles: results.totalFiles,
    codeFiles: results.codeFiles,
    totalLines: results.totalLines,
    issues: results.issues,
    totalIssues: totalIssues,
  },
  fileTypes: results.fileTypes,
  recommendations: results.recommendations,
  roi: {
    estimatedSavings,
    effortHours,
    roiPercent,
  },
  aiInsights: {
    enabled: false,
    reason: 'Simplified analysis mode',
  },
};

// –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ —Å –ø–∞–ø–∫–æ–π, –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
const projectName = path.basename(path.resolve(targetProject)).replace(/[^\w\-]/g, '_');
const timestamp = new Date()
  .toISOString()
  .replace(/[:.]/g, '-') // –ó–∞–º–µ–Ω—è–µ–º : –∏ . –Ω–∞ -
  .replace('T', '_') // –ó–∞–º–µ–Ω—è–µ–º T –Ω–∞ _
  .slice(0, 19); // –£–±–∏—Ä–∞–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É reports –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const reportsDir = path.join(analyzerDir, 'reports');
if (!fs.existsSync(reportsDir)) {
  fs.mkdirSync(reportsDir, { recursive: true });
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –æ—Ç—á–µ—Ç –≤ –ø–∞–ø–∫—É –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
const jsonFileName = `analysis_${projectName}_${timestamp}.json`;
const outputFile = path.join(reportsDir, jsonFileName);
fs.writeFileSync(outputFile, JSON.stringify(reportData, null, 2));

console.log(`\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${outputFile}`);

// –ì–ï–ù–ï–†–ò–†–£–ï–ú ROADMAP MD
try {
  const roadmapMD = generateRoadmapMD(reportData);

  // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è roadmap (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)
  const roadmapFileName = `ROADMAP_${projectName}_${timestamp}.md`;
  const roadmapPath = path.join(reportsDir, roadmapFileName);

  fs.writeFileSync(roadmapPath, roadmapMD, 'utf-8');
  console.log(`üìã –î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${roadmapPath}`);
} catch (error) {
  console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ—Ä–æ–∂–Ω—É—é –∫–∞—Ä—Ç—É:', error.message);
}
console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! Ultimate EAP Analyzer v3.0');

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –º–æ–¥—É–ª—å
export { analyzeProject };
