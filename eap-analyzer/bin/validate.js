#!/usr/bin/env node

/**
 * CLI –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π EAP
 */

import { GoldenStandardAnalyzer } from '../dist/analyzer.js';
import { IntegrationTester } from '../dist/testing/integration-tests.js';
import { BugFixValidator } from '../dist/validation/bug-fix-validator.js';
import { MetricsValidator } from '../dist/validation/metrics-validator.js';
import { ValidationReporter } from '../dist/validation/validation-reporter.js';
import * as path from 'path';

async function main() {
  const args = process.argv.slice(2);
  const command = args[0];

  switch (command) {
    case 'validate':
    case 'v':
      await runValidation(args.slice(1));
      break;

    case 'integration':
    case 'int':
      await runIntegrationTests();
      break;

    case 'full':
      await runFullValidationSuite(args.slice(1));
      break;

    case 'help':
    case '--help':
    case '-h':
      printHelp();
      break;

    default:
      console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.');
      process.exit(1);
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
 */
async function runValidation(args) {
  const projectPath = args[0] || '.';
  const reportFormat = args[1] || 'markdown';
  const outputPath = args[2] || './reports';

  console.log('üîç –ó–ê–ü–£–°–ö –í–ê–õ–ò–î–ê–¶–ò–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô EAP');
  console.log('='.repeat(50));
  console.log(`üìÇ –ü—Ä–æ–µ–∫—Ç: ${path.resolve(projectPath)}`);
  console.log(`üìÑ –§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞: ${reportFormat}`);
  console.log(`üìÅ –ü—É—Ç—å –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤: ${outputPath}`);
  console.log('');

  try {
    const analyzer = new GoldenStandardAnalyzer();

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    console.log('üî¨ –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑...');
    const analysisResults = await analyzer.performStructuralAnalysis(projectPath);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç—á–µ—Ç–∞
    console.log('üîç –í—ã–ø–æ–ª–Ω—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é...');
    const validationResults = await analyzer.validateAnalysisResults(analysisResults, projectPath, {
      generateReport: true,
      reportFormat,
      outputPath,
    });

    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    console.log('\n' + '='.repeat(50));
    console.log('üéØ –ò–¢–û–ì–ò –í–ê–õ–ò–î–ê–¶–ò–ò:');
    console.log(
      `   ${validationResults.isValid ? '‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–û–®–õ–ê' : '‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ï –ü–†–û–®–õ–ê'}`
    );
    console.log(`   üéØ –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è: ${validationResults.confidence.toFixed(1)}%`);
    console.log(`   üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: ${validationResults.criticalIssues}`);

    if (validationResults.reportPath) {
      console.log(`   üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${validationResults.reportPath}`);
    }

    if (!validationResults.isValid) {
      console.log('\n‚ö†Ô∏è  –¢–†–ï–ë–£–Æ–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø!');
      process.exit(1);
    } else {
      console.log('\nüéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!');
    }
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –í–ê–õ–ò–î–ê–¶–ò–ò:', error);
    process.exit(1);
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
 */
async function runIntegrationTests() {
  console.log('üß™ –ó–ê–ü–£–°–ö –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–• –¢–ï–°–¢–û–í');
  console.log('='.repeat(50));

  try {
    const tester = new IntegrationTester();
    const results = await tester.runIntegrationTests();

    if (results.failedTests > 0) {
      process.exit(1);
    }
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò:', error);
    process.exit(1);
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
async function runFullValidationSuite(args) {
  const projectPath = args[0] || '.';

  console.log('üöÄ –ü–û–õ–ù–´–ô –ù–ê–ë–û–† –í–ê–õ–ò–î–ê–¶–ò–ò EAP');
  console.log('='.repeat(50));

  try {
    // 1. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    console.log('\n1Ô∏è‚É£ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...');
    await runIntegrationTests();

    // 2. –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    console.log('\n2Ô∏è‚É£ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
    await runValidation([projectPath, 'html', './reports']);

    console.log('\nüéâ –ü–û–õ–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!');
  } catch (error) {
    console.error('\n‚ùå –ü–û–õ–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–û–í–ê–õ–ï–ù–ê:', error);
    process.exit(1);
  }
}

function printHelp() {
  console.log(`
üîç EAP Validation CLI - –í–∞–ª–∏–¥–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±–∞–≥–æ–≤

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
  npm run validate [–∫–æ–º–∞–Ω–¥–∞] [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]

–ö–û–ú–ê–ù–î–´:
  validate, v [–ø—Ä–æ–µ–∫—Ç] [—Ñ–æ—Ä–º–∞—Ç] [–ø—É—Ç—å]    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
  integration, int                        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
  full [–ø—Ä–æ–µ–∫—Ç]                          # –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  help, --help, -h                       # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

–ü–ê–†–ê–ú–ï–¢–†–´:
  –ø—Ä–æ–µ–∫—Ç    - –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)
  —Ñ–æ—Ä–º–∞—Ç    - –§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞: console, json, html, markdown (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: markdown)
  –ø—É—Ç—å      - –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ./reports)

–ü–†–ò–ú–ï–†–´:
  npm run validate                                    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
  npm run validate ../my-project                      # –í–∞–ª–∏–¥–∞—Ü–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
  npm run validate . html ./my-reports               # –° HTML –æ—Ç—á–µ—Ç–æ–º
  npm run validate integration                        # –¢–æ–ª—å–∫–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
  npm run validate full ../problematic-project       # –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è

–û–ü–ò–°–ê–ù–ò–ï:
  –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±–∞–≥–æ–≤ EAP:

  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ –¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ (–Ω–µ –±–æ–ª–µ–µ 100%)
  ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  ‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
  ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤

  –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
  –ï—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.
`);
}

main().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
