#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞ kinderly-events
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç AnalysisOrchestrator –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤ –≤–∫–ª—é—á–∞—è FileStructureAnalyzer v3.0
 */

const path = require('path');
const fs = require('fs');

async function testKinderlyAnalysis() {
  console.log(
    'üîç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞ kinderly-events —á–µ—Ä–µ–∑ EAP AnalysisOrchestrator...\n'
  );

  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AnalysisOrchestrator
    const { AnalysisOrchestrator } = require('./dist-cjs/core/orchestrator.js');

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const orchestrator = new AnalysisOrchestrator();

    // –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É kinderly-events
    const projectPath = 'C:\\kinderly-events';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    if (!fs.existsSync(projectPath)) {
      console.log(`‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${projectPath}`);
      console.log('üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–∞–ø–∫–∞ kinderly-events —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return;
    }

    console.log(`üìÇ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø—Ä–æ–µ–∫—Ç: ${projectPath}`);

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
    const analysisRequest = {
      projectPath: projectPath,
      config: {
        enabledCategories: [
          'STRUCTURE', // FileStructureAnalyzer v3.0
          'SECURITY', // SecurityChecker
          'PERFORMANCE', // PerformanceChecker
          'TESTING', // TestingChecker
          'TECHNICAL_DEBT', // TechnicalDebtAnalyzer
        ],
        analyzerTimeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        totalTimeout: 180000, // 3 –º–∏–Ω—É—Ç—ã –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç
        parallelExecution: true, // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        continueOnError: true, // –ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        verbosity: 'normal',
      },
    };

    console.log('‚öôÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞:');
    console.log(`   - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${analysisRequest.config.enabledCategories.join(', ')}`);
    console.log(`   - –¢–∞–π–º–∞—É—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: ${analysisRequest.config.analyzerTimeout}ms`);
    console.log(`   - –û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç: ${analysisRequest.config.totalTimeout}ms`);
    console.log(`   - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${analysisRequest.config.parallelExecution}`);
    console.log('');

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    console.log('üöÄ –ó–∞–ø—É—Å–∫ AnalysisOrchestrator.runFullAnalysis()...');
    const startTime = Date.now();

    const result = await orchestrator.runFullAnalysis(analysisRequest);

    const duration = Date.now() - startTime;
    console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${duration}ms\n`);

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:');
    console.log('='.repeat(50));
    console.log(`üìã ID –∞–Ω–∞–ª–∏–∑–∞: ${result.analysisId}`);
    console.log(`üìÇ –ü—Ä–æ–µ–∫—Ç: ${result.projectName}`);
    console.log(`üìÖ –í—Ä–µ–º—è: ${new Date(result.timestamp).toLocaleString()}`);
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${result.totalExecutionTime}ms`);
    console.log(`üéØ –û–±—â–∏–π –±–∞–ª–ª: ${result.overallScore}/${result.maxOverallScore}`);
    console.log(`üìà –°—Ç–∞—Ç—É—Å: ${result.status}`);
    console.log('');

    // –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:');
    console.log('-'.repeat(40));

    if (result.categoryResults && result.categoryResults.length > 0) {
      result.categoryResults.forEach(category => {
        console.log(`\nüîπ ${category.category}:`);
        console.log(`   –ë–∞–ª–ª: ${category.score}/${category.maxScore}`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${category.status}`);
        console.log(`   –í—Ä–µ–º—è: ${category.executionTime}ms`);

        if (category.checkResults && category.checkResults.length > 0) {
          console.log(`   –ü—Ä–æ–≤–µ—Ä–∫–∏: ${category.checkResults.length}`);
          category.checkResults.forEach(check => {
            const status = check.status === 'passed' ? '‚úÖ' : '‚ùå';
            console.log(`     ${status} ${check.name}`);
          });
        }
      });
    }

    // –†–µ–∑—é–º–µ
    console.log('\nüìà –†–ï–ó–Æ–ú–ï:');
    console.log('-'.repeat(30));
    if (result.summary) {
      console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${result.summary.passedChecks || 0}`);
      console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${result.summary.failedChecks || 0}`);
      console.log(`üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: ${result.summary.criticalIssues || 0}`);
      console.log(`üü° –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${result.summary.highPriorityIssues || 0}`);
      console.log(`üîµ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${result.summary.mediumPriorityIssues || 0}`);
      console.log(`üü¢ –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${result.summary.lowPriorityIssues || 0}`);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    const reportPath = path.join(__dirname, 'reports', `kinderly-analysis-${Date.now()}.json`);
    if (!fs.existsSync(path.dirname(reportPath))) {
      fs.mkdirSync(path.dirname(reportPath), { recursive: true });
    }

    fs.writeFileSync(reportPath, JSON.stringify(result, null, 2));
    console.log(`\nüíæ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º FileStructureAnalyzer v3.0
    console.log('\nüîç –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê FileStructureAnalyzer v3.0:');
    console.log('='.repeat(55));

    const structureCategory = result.categoryResults?.find(
      cat => cat.category === 'STRUCTURE' || cat.category.includes('STRUCTURE')
    );

    if (structureCategory) {
      console.log(`‚úÖ FileStructureAnalyzer –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö!`);
      console.log(`   –ë–∞–ª–ª: ${structureCategory.score}/${structureCategory.maxScore}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${structureCategory.status}`);
      console.log(`   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${structureCategory.executionTime}ms`);

      if (structureCategory.checkResults) {
        console.log(`   –ü—Ä–æ–≤–µ–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${structureCategory.checkResults.length}`);
        structureCategory.checkResults.forEach(check => {
          console.log(`     - ${check.name}: ${check.status}`);
        });
      }
    } else {
      console.log(`‚ö†Ô∏è  FileStructureAnalyzer –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö`);
      console.log(
        `   –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${result.categoryResults?.map(c => c.category).join(', ')}`
      );
    }

    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error);
    console.error('\n–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:');
    console.error(error.stack);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testKinderlyAnalysis()
    .then(result => {
      console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
      process.exit(0);
    })
    .catch(error => {
      console.error('\nüí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ:', error.message);
      process.exit(1);
    });
}

module.exports = { testKinderlyAnalysis };
