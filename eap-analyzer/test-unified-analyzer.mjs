/**
 * –¢–µ—Å—Ç UnifiedTestingAnalyzer - Phase 3
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ç–µ—Å—Ç–æ–≤–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–µ–∫—Ç–∞
 */

import { UnifiedTestingAnalyzer } from './src/checkers/testing/UnifiedTestingAnalyzerJS.js';
import * as path from 'path';

async function testUnifiedTestingAnalyzer() {
  const startTime = Date.now();

  console.log('üéØ PHASE 3: UNIFIED TESTING ANALYZER');
  console.log('=====================================');
  console.log('üîç –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã...');
  console.log('');

  try {
    // –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
    const projectPath = process.cwd();
    console.log(`üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø—Ä–æ–µ–∫—Ç: ${projectPath}`);
    console.log('');

    // –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    const analyzer = new UnifiedTestingAnalyzer();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    console.log('‚ö° –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑...');
    const analysis = await analyzer.analyze(projectPath);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
    const report = analyzer.generateReport(analysis);
    console.log(report);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('üìä –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`   –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${Date.now() - startTime}ms`);
    console.log(`   –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤: ${analysis.frameworks.length}`);
    console.log(
      `   –£—Å–ø–µ—à–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤: ${analysis.frameworks.filter(f => f.configured).length}`
    );
    console.log(
      `   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤: ${analysis.frameworks.reduce((sum, f) => sum + f.testsCount, 0)}`
    );
    console.log('');

    // –û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    console.log('üéØ –û–¶–ï–ù–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö PHASE 4:');
    if (analysis.overallScore >= 70) {
      console.log('   ‚úÖ –ì–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å AnalysisOrchestrator');
      console.log('   ‚úÖ –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ Phase 4');
    } else if (analysis.overallScore >= 50) {
      console.log('   ‚ö†Ô∏è  –ß–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤, —Ç—Ä–µ–±—É—é—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏—è');
      console.log('   ‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ª—É—á—à–∏—Ç—å –ø–µ—Ä–µ–¥ Phase 4');
    } else {
      console.log('   ‚ùå –ù–µ –≥–æ—Ç–æ–≤ –∫ Phase 4');
      console.log('   ‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è');
    }

    console.log('');
    console.log('='.repeat(80));
    console.log(
      `üèÜ PHASE 3 –ó–ê–í–ï–†–®–ï–ù–ê: ${analysis.overallScore}/100 (${analysis.overallStatus.toUpperCase()})`
    );
    console.log('='.repeat(80));

    return analysis;
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê Phase 3:', error);
    console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (import.meta.url === `file://${process.argv[1]}`) {
  testUnifiedTestingAnalyzer()
    .then(result => {
      console.log('‚úÖ –¢–µ—Å—Ç UnifiedTestingAnalyzer –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      process.exit(0);
    })
    .catch(error => {
      console.error('‚ùå –¢–µ—Å—Ç UnifiedTestingAnalyzer –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error.message);
      process.exit(1);
    });
}
