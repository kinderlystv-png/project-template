import { RecommendationEngine } from './src/recommendations/RecommendationEngine';
import { WebSecurityChecker } from './src/checkers/security/WebSecurityChecker';
import { CheckContext } from './src/types/index.js';

/**
 * –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤–µ–±-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å RecommendationEngine
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫: WebSecurityChecker ‚Üí RecommendationEngine
 */

async function testRecommendationEngineIntegration() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ RecommendationEngine —Å –≤–µ–±-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é...\n');

  const testCode = `
// XSS —É—è–∑–≤–∏–º–æ—Å—Ç–∏
function displayUserData(userData) {
  document.getElementById('content').innerHTML = userData.name;
  document.body.innerHTML += \`<p>\${userData.comment}</p>\`;

  // eval —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  eval('var x = ' + userData.value);
}

// CSRF —É—è–∑–≤–∏–º–æ—Å—Ç—å
function transferMoney(amount, to) {
  fetch('/api/transfer', {
    method: 'POST',
    body: JSON.stringify({ amount, to })
  });
}

// –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function createLink(url) {
  document.write('<a href="' + url + '">Click me</a>');
  return '<script>alert("' + url + '")</script>';
}
`;

  try {
    // 1. –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    console.log('1Ô∏è‚É£ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞...');
    const fs = await import('fs/promises');
    const testFilePath = 'test-integration.js';
    await fs.writeFile(testFilePath, testCode);

    // 2. –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const context: CheckContext = {
      projectPath: process.cwd(),
      projectInfo: {
        name: 'test-project',
        version: '1.0.0',
        hasTypeScript: true,
        hasTests: false,
        hasDocker: false,
        hasCICD: false,
        dependencies: {
          production: 0,
          development: 0,
          total: 0,
        },
      },
      options: {
        projectPath: process.cwd(),
      },
    };

    // 3. –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const updatedContext = {
      ...context,
      filePath: testFilePath,
      fileContent: testCode,
    };

    // 4. –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤–µ–±-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    console.log('2Ô∏è‚É£ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤–µ–±-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...');
    const webChecker = new WebSecurityChecker();
    const webSecurityResult = await webChecker.analyzeWebSecurity(updatedContext as any);

    console.log(
      `üï∑Ô∏è –ù–∞–π–¥–µ–Ω–æ XSS —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: ${webSecurityResult.xss?.vulnerabilities?.length || 0}`
    );
    console.log(
      `üõ°Ô∏è –ù–∞–π–¥–µ–Ω–æ CSRF —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: ${webSecurityResult.csrf?.vulnerabilities?.length || 0}`
    );
    console.log(`üìä –í—Å–µ–≥–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: ${webSecurityResult.summary?.totalVulnerabilities || 0}\n`);

    // 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ RecommendationEngine
    console.log('3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —á–µ—Ä–µ–∑ RecommendationEngine...');

    const webRecommendations = RecommendationEngine.generateRecommendations(webSecurityResult);

    console.log(`üìã –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤–µ–±-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: ${webRecommendations.length}\n`);

    // 6. –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    console.log('4Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...');

    const categories = [...new Set(webRecommendations.map((r: any) => r.category))];
    console.log(`üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categories.join(', ')}`);

    const priorityStats = webRecommendations.reduce((stats: any, rec: any) => {
      stats[rec.priority] = (stats[rec.priority] || 0) + 1;
      return stats;
    }, {});
    console.log(`‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:`, priorityStats);

    const severityStats = webRecommendations.reduce((stats: any, rec: any) => {
      stats[rec.severity] = (stats[rec.severity] || 0) + 1;
      return stats;
    }, {});
    console.log(`‚ö†Ô∏è –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å:`, severityStats);

    // 7. –î–µ—Ç–∞–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    console.log('\n5Ô∏è‚É£ –î–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤—ã—Ö 3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:');
    webRecommendations.slice(0, 3).forEach((rec: any, index: number) => {
      console.log(`\nüìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è ${index + 1}: ${rec.title}`);
      console.log(`   üí° –û–ø–∏—Å–∞–Ω–∏–µ: ${rec.description?.substring(0, 100)}...`);
      console.log(`   üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${rec.category} | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${rec.priority}`);
      console.log(`   ‚ö†Ô∏è –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: ${rec.severity} | –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${rec.difficulty}`);
      console.log(`   üîß –®–∞–≥–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${rec.fixTemplate?.steps?.length || 0}`);
      console.log(`   üìö –†–µ—Å—É—Ä—Å–æ–≤: ${rec.documentation?.links?.length || 0}`);
      console.log(`   üè∑Ô∏è –¢–µ–≥–∏: ${rec.tags?.join(', ') || '–Ω–µ—Ç'}`);

      if (rec.fixTemplate?.beforeCode && rec.fixTemplate?.afterCode) {
        console.log(`   üíª –ï—Å—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞: –î–æ/–ü–æ—Å–ª–µ`);
      }
    });

    // 8. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    console.log('\n6Ô∏è‚É£ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º...');
    const grouped = RecommendationEngine.groupRecommendationsByCategory(webRecommendations);

    Object.entries(grouped).forEach(([category, recs]: [string, any]) => {
      console.log(`üìÇ ${category}: ${recs.length} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π`);
      recs.slice(0, 2).forEach((rec: any) => {
        console.log(`   ‚Ä¢ ${rec.title} (${rec.priority})`);
      });
    });

    // 9. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    console.log('\n7Ô∏è‚É£ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...');

    const validationResults = webRecommendations.map((rec: any) => {
      const errors: string[] = [];

      if (!rec.id) errors.push('ID');
      if (!rec.title) errors.push('title');
      if (!rec.description) errors.push('description');
      if (!rec.category) errors.push('category');
      if (!rec.severity) errors.push('severity');
      if (!rec.priority) errors.push('priority');
      if (!rec.fixTemplate) errors.push('fixTemplate');
      if (!rec.fixTemplate?.steps?.length) errors.push('steps');
      if (!rec.documentation) errors.push('documentation');
      if (!rec.estimatedTime) errors.push('estimatedTime');
      if (!rec.difficulty) errors.push('difficulty');

      return {
        id: rec.id,
        valid: errors.length === 0,
        errors,
        score: Math.round(((11 - errors.length) / 11) * 100),
      };
    });

    const validCount = validationResults.filter(v => v.valid).length;
    const avgScore =
      validationResults.reduce((sum, v) => sum + v.score, 0) / validationResults.length;

    console.log(`‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤–∞–ª–∏–¥–Ω—ã—Ö: ${validCount}/${webRecommendations.length}`);
    console.log(`üìä –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞: ${Math.round(avgScore)}%`);

    if (validCount < webRecommendations.length) {
      console.log('\nüîç –ü—Ä–æ–±–ª–µ–º—ã –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ:');
      const allErrors = validationResults.flatMap(v => v.errors);
      const errorCounts = allErrors.reduce((counts: any, error) => {
        counts[error] = (counts[error] || 0) + 1;
        return counts;
      }, {});

      Object.entries(errorCounts).forEach(([error, count]) => {
        console.log(`   ‚ùå ${error}: ${count} —Ä–∞–∑`);
      });
    }

    // 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤
    console.log('\n8Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤...');

    const hasWebCategories = webRecommendations.some((r: any) =>
      ['xss', 'csrf', 'injection'].includes(r.category)
    );
    console.log(`üåê –ï—Å—Ç—å –≤–µ–±-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${hasWebCategories ? '‚úÖ' : '‚ùå'}`);

    const hasPriorities = webRecommendations.every((r: any) => r.priority);
    console.log(`‚≠ê –í—Å–µ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${hasPriorities ? '‚úÖ' : '‚ùå'}`);

    const hasTags = webRecommendations.some((r: any) => r.tags?.length > 0);
    console.log(`üè∑Ô∏è –ï—Å—Ç—å —Ç–µ–≥–∏: ${hasTags ? '‚úÖ' : '‚ùå'}`);

    // 11. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`üîç –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: ${testCode.split('\n').filter(l => l.trim()).length}`);
    console.log(`‚ö†Ô∏è –í–µ–±-—É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: ${webSecurityResult.summary?.totalVulnerabilities || 0}`);
    console.log(`üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: ${webRecommendations.length}`);
    console.log(`‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ: ${Math.round(avgScore)}%`);
    console.log(`üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}`);
    console.log(
      `üìö –û–±—â–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤: ${webRecommendations.reduce((sum: number, r: any) => sum + (r.documentation?.links?.length || 0), 0)}`
    );

    // –û—á–∏—Å—Ç–∫–∞
    await fs.unlink(testFilePath);

    console.log('\nüéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–ê!');

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    const integrationSuccess =
      webRecommendations.length > 0 && validCount > 0 && hasWebCategories && avgScore > 70;

    if (integrationSuccess) {
      console.log('‚úÖ RecommendationEngine —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –≤–µ–±-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é!');
      console.log('‚úÖ Task 1.3 (RecommendationEngine Integration) –ó–ê–í–ï–†–®–ï–ù!');
    } else {
      console.log('‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
    }

    return integrationSuccess;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:', error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testRecommendationEngineIntegration()
  .then(success => {
    if (success) {
      console.log('\nüéä –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! PHASE 5.2.2 TASK 1.3 COMPLETE!');
      process.exit(0);
    } else {
      console.log('\n‚ùå –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨!');
      process.exit(1);
    }
  })
  .catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
