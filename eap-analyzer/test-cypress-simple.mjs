/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç CypressChecker –±–µ–∑ TypeScript (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
 */

import { pathToFileURL } from 'url';
import path from 'path';

console.log('\nüå≤ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CypressChecker...\n');

const projectPath = 'C:/alphacore/project-template';

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Cypress
console.log('üß™ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ Cypress –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏');

let hasCypress = false;

try {
  const fs = await import('fs/promises');
  const packageJsonPath = path.join(projectPath, 'package.json');
  const packageContent = await fs.readFile(packageJsonPath, 'utf8');
  const packageJson = JSON.parse(packageContent);

  hasCypress = !!(
    packageJson.dependencies?.['cypress'] || packageJson.devDependencies?.['cypress']
  );

  if (hasCypress) {
    console.log('‚úÖ Cypress –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö');
  } else {
    console.log('‚ùå Cypress –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö');
  }
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ package.json:', error.message);
}

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
console.log('\nüß™ –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Cypress');

const configFiles = ['cypress.config.ts', 'cypress.config.js', 'cypress.json'];
let configFound = false;
let configPath = '';

for (const configFile of configFiles) {
  const fullPath = path.join(projectPath, configFile);
  try {
    const fs = await import('fs/promises');
    await fs.access(fullPath);
    configFound = true;
    configPath = configFile;
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${configFile}`);
    break;
  } catch {
    // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
  }
}

if (!configFound) {
  console.log('‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª Cypress –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

// –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞)
let configAnalysis = {
  hasReports: false,
  hasVideos: false,
  hasScreenshots: false,
  hasBaseUrl: false,
  hasViewports: false,
};

if (configFound) {
  console.log('\nüß™ –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Cypress');

  try {
    const fs = await import('fs/promises');
    const configContent = await fs.readFile(path.join(projectPath, configPath), 'utf8');

    configAnalysis.hasReports =
      configContent.includes('reporter') ||
      configContent.includes('mochawesome') ||
      configContent.includes('junit');
    console.log(`üìä –û—Ç—á–µ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: ${configAnalysis.hasReports ? '–¥–∞' : '–Ω–µ—Ç'}`);

    configAnalysis.hasVideos =
      configContent.includes('video') && !configContent.includes('video: false');
    console.log(`üé• –í–∏–¥–µ–æ –∑–∞–ø–∏—Å–∏: ${configAnalysis.hasVideos ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã'}`);

    configAnalysis.hasScreenshots =
      configContent.includes('screenshot') &&
      !configContent.includes('screenshotOnRunFailure: false');
    console.log(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã: ${configAnalysis.hasScreenshots ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã'}`);

    configAnalysis.hasBaseUrl = configContent.includes('baseUrl');
    console.log(`üåê Base URL: ${configAnalysis.hasBaseUrl ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);

    configAnalysis.hasViewports =
      configContent.includes('viewportWidth') || configContent.includes('viewport');
    console.log(`üì± Viewport: ${configAnalysis.hasViewports ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
  }
}

// –¢–µ—Å—Ç 4: –ü–æ–¥—Å—á–µ—Ç —Ç–µ—Å—Ç–æ–≤
console.log('\nüß™ –¢–µ—Å—Ç 4: –ü–æ–¥—Å—á–µ—Ç Cypress —Ç–µ—Å—Ç–æ–≤');

let testsFound = 0;
const testDirs = ['cypress/e2e', 'cypress/integration', 'cypress/tests'];

for (const testDir of testDirs) {
  try {
    const fs = await import('fs/promises');
    const testDirPath = path.join(projectPath, testDir);

    async function countTestsRecursively(dirPath) {
      let count = 0;
      try {
        const entries = await fs.readdir(dirPath, { withFileTypes: true });

        for (const entry of entries) {
          const fullPath = path.join(dirPath, entry.name);
          if (entry.isDirectory()) {
            count += await countTestsRecursively(fullPath);
          } else if (
            entry.name.endsWith('.cy.ts') ||
            entry.name.endsWith('.cy.js') ||
            entry.name.endsWith('.spec.ts') ||
            entry.name.endsWith('.spec.js') ||
            entry.name.endsWith('.test.ts') ||
            entry.name.endsWith('.test.js')
          ) {
            count++;
          }
        }
      } catch {
        // –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞
      }
      return count;
    }

    const dirTests = await countTestsRecursively(testDirPath);
    testsFound += dirTests;
    if (dirTests > 0) {
      console.log(`üìÅ ${testDir}: –Ω–∞–π–¥–µ–Ω–æ ${dirTests} —Ç–µ—Å—Ç–æ–≤`);
    }
  } catch {
    // –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
  }
}

console.log(`üìù –í—Å–µ–≥–æ Cypress —Ç–µ—Å—Ç–æ–≤: ${testsFound}`);

// –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ fixtures –∏ custom commands
console.log('\nüß™ –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');

let hasFixtures = false;
let hasCustomCommands = false;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º fixtures
try {
  const fs = await import('fs/promises');
  const fixturesPath = path.join(projectPath, 'cypress/fixtures');
  const fixturesFiles = await fs.readdir(fixturesPath);
  hasFixtures = fixturesFiles.length > 0;
  console.log(
    `üì¶ Fixtures: ${hasFixtures ? `–Ω–∞–π–¥–µ–Ω–æ ${fixturesFiles.length} —Ñ–∞–π–ª–æ–≤` : '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}`
  );
} catch {
  console.log('üì¶ Fixtures: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º custom commands
const commandsPaths = [
  'cypress/support/commands.ts',
  'cypress/support/commands.js',
  'cypress/support/e2e.ts',
  'cypress/support/e2e.js',
];

for (const commandsPath of commandsPaths) {
  const fullPath = path.join(projectPath, commandsPath);
  try {
    const fs = await import('fs/promises');
    const content = await fs.readFile(fullPath, 'utf8');
    if (
      content.includes('Cypress.Commands.add') ||
      content.includes('cy.') ||
      content.length > 200
    ) {
      hasCustomCommands = true;
      console.log(`üõ†Ô∏è  Custom commands: –Ω–∞–π–¥–µ–Ω—ã –≤ ${commandsPath}`);
      break;
    }
  } catch {
    // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
  }
}

if (!hasCustomCommands) {
  console.log('üõ†Ô∏è  Custom commands: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
}

// –í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫—É
console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê CYPRESS:');
console.log('‚îÄ'.repeat(60));

let score = 0;
let passed = false;

if (!hasCypress) {
  score = 5;
  console.log('‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç: –ù–ï–£–î–ê–ß–ê');
  console.log(`üìä –û—Ü–µ–Ω–∫–∞: ${score}/100`);
  console.log('üìù –°–æ–æ–±—â–µ–Ω–∏–µ: Cypress –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö –ø—Ä–æ–µ–∫—Ç–∞');
  console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Cypress: npm install --save-dev cypress');
  console.log('   ‚Ä¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ Cypress: npx cypress open');
} else if (!configFound) {
  score = 15;
  console.log('‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç: –ù–ï–£–î–ê–ß–ê');
  console.log(`üìä –û—Ü–µ–Ω–∫–∞: ${score}/100`);
  console.log('üìù –°–æ–æ–±—â–µ–Ω–∏–µ: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª Cypress –Ω–µ –Ω–∞–π–¥–µ–Ω');
  console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('   ‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ cypress.config.ts');
  console.log('   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é E2E —Ç–µ—Å—Ç–æ–≤');
} else if (testsFound === 0) {
  score = 30;
  console.log('‚ö†Ô∏è  –†–µ–∑—É–ª—å—Ç–∞—Ç: –ß–ê–°–¢–ò–ß–ù–û');
  console.log(`üìä –û—Ü–µ–Ω–∫–∞: ${score}/100`);
  console.log('üìù –°–æ–æ–±—â–µ–Ω–∏–µ: Cypress –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ E2E —Ç–µ—Å—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
  console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('   ‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ E2E —Ç–µ—Å—Ç—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ cypress/e2e');
  console.log('   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .cy.ts –∏–ª–∏ .cy.js');
} else {
  score = 40; // –ë–∞–∑–æ–≤—ã–µ –±–∞–ª–ª—ã

  if (hasFixtures) score += 10;
  if (hasCustomCommands) score += 10;
  if (configAnalysis.hasReports) score += 15;
  if (configAnalysis.hasVideos) score += 5;
  if (configAnalysis.hasScreenshots) score += 5;
  if (configAnalysis.hasBaseUrl) score += 10;
  if (configAnalysis.hasViewports) score += 5;
  if (testsFound >= 3) score += 10;
  if (testsFound >= 10) score += 5;

  passed = score >= 70;

  console.log(`${passed ? '‚úÖ' : '‚ö†Ô∏è'} –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passed ? '–£–°–ü–ï–•' : '–ß–ê–°–¢–ò–ß–ù–û'}`);
  console.log(`üìä –û—Ü–µ–Ω–∫–∞: ${Math.min(score, 100)}/100`);
  console.log(`üìù –°–æ–æ–±—â–µ–Ω–∏–µ: Cypress E2E: –Ω–∞–π–¥–µ–Ω–æ ${testsFound} —Ç–µ—Å—Ç–æ–≤, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞`);

  console.log('üìã –î–µ—Ç–∞–ª–∏:');
  console.log(`   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${testsFound}`);
  console.log(`   ‚Ä¢ Fixtures: ${hasFixtures ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`);
  console.log(`   ‚Ä¢ Custom commands: ${hasCustomCommands ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`);
  console.log(`   ‚Ä¢ –û—Ç—á–µ—Ç—ã: ${configAnalysis.hasReports ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'}`);
  console.log(`   ‚Ä¢ –í–∏–¥–µ–æ: ${configAnalysis.hasVideos ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã'}`);
  console.log(`   ‚Ä¢ Base URL: ${configAnalysis.hasBaseUrl ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);

  if (!passed) {
    console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    if (!hasFixtures) {
      console.log('   ‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ fixtures –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    }
    if (!hasCustomCommands) {
      console.log('   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ custom commands –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞');
    }
    if (!configAnalysis.hasReports) {
      console.log('   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤ (Mochawesome, JUnit)');
    }
    if (!configAnalysis.hasBaseUrl) {
      console.log('   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ baseUrl –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤');
    }
    if (testsFound < 5) {
      console.log('   ‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ–∫—Ä—ã—Ç–∏–µ E2E —Ç–µ—Å—Ç–∞–º–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤');
    }
  }
}

console.log('‚îÄ'.repeat(60));

console.log('\nüå≤ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
if (hasCypress) {
  if (passed) {
    console.log('üéâ CypressChecker: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç—ã –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!');
  } else if (score >= 30) {
    console.log('üîß CypressChecker: –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, —Ç—Ä–µ–±—É—é—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏—è');
  } else {
    console.log('‚ö†Ô∏è  CypressChecker: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —Ç—Ä–µ–±—É—é—Ç—Å—è —Ç–µ—Å—Ç—ã');
  }
} else {
  console.log('‚ùå CypressChecker: Cypress –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç–µ');
}

console.log(`üèÜ –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: ${Math.min(score, 100)}/100`);
console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CypressChecker –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
