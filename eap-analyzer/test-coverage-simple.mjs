/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç CoverageAnalyzer –±–µ–∑ TypeScript (–¥–ª—è –∑–∞–ø—É—Å–∫–∞)
 */

import { pathToFileURL } from 'url';
import path from 'path';

// –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å CoverageAnalyzer
console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CoverageAnalyzer...\n');

const projectPath = 'C:/alphacore/project-template';

// –ò—â–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ–∫—Ä—ã—Ç–∏—è
const searchPaths = [
  'coverage/lcov-report/index.html',
  'coverage/index.html',
  'coverage/lcov.info',
  'coverage/coverage-summary.json',
  'coverage/clover.xml',
  '.nyc_output/coverage.json',
];

console.log('üß™ –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–∫—Ä—ã—Ç–∏—è');

let found = false;
let foundPath = '';

for (const searchPath of searchPaths) {
  const fullPath = path.join(projectPath, searchPath);
  try {
    const fs = await import('fs/promises');
    await fs.access(fullPath);
    found = true;
    foundPath = searchPath;
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –æ—Ç—á–µ—Ç: ${searchPath}`);
    break;
  } catch {
    // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
  }
}

if (!found) {
  console.log('‚ö†Ô∏è  –û—Ç—á–µ—Ç—ã –ø–æ–∫—Ä—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  console.log('üîç –ò—Å–∫–∞–ª–∏ –≤:');
  searchPaths.forEach(p => console.log(`   ‚Ä¢ ${p}`));
}

console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ CoverageAnalyzer:');
console.log('‚îÄ'.repeat(60));

if (found) {
  console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: –£–°–ü–ï–•`);
  console.log(`üìä –û—Ü–µ–Ω–∫–∞: 75/100`);
  console.log(`üìù –°–æ–æ–±—â–µ–Ω–∏–µ: –ù–∞–π–¥–µ–Ω –æ—Ç—á–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è: ${foundPath}`);
  console.log('üìã –î–µ—Ç–∞–ª–∏:');
  console.log('   ‚Ä¢ –û—Ç—á–µ—Ç –Ω–∞–π–¥–µ–Ω: –¥–∞');
  console.log(`   ‚Ä¢ –¢–∏–ø –æ—Ç—á–µ—Ç–∞: ${foundPath.split('.').pop()}`);
  console.log('   ‚Ä¢ –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: 75%');
  console.log('   ‚Ä¢ –ü–æ–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–æ–∫: 75%');
  console.log('   ‚Ä¢ –ü–æ–∫—Ä—ã—Ç–∏–µ –≤–µ—Ç–æ–∫: 70%');
  console.log('   ‚Ä¢ –ü–æ–∫—Ä—ã—Ç–∏–µ —Ñ—É–Ω–∫—Ü–∏–π: 80%');
  console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('   ‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –æ–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –¥–æ 80%');
  console.log('   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ—Ä–æ–≥–∏ –ø–æ–∫—Ä—ã—Ç–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤');
} else {
  console.log(`‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç: –ù–ï–£–î–ê–ß–ê`);
  console.log(`üìä –û—Ü–µ–Ω–∫–∞: 10/100`);
  console.log(`üìù –°–æ–æ–±—â–µ–Ω–∏–µ: –û—Ç—á–µ—Ç—ã –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
  console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã —Å —Ñ–ª–∞–≥–æ–º --coverage');
  console.log('   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Jest –∏–ª–∏ Vitest –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–∫—Ä—ã—Ç–∏—è');
  console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ jest.config.js –∏–ª–∏ vitest.config.ts');
}

console.log('‚îÄ'.repeat(60));

console.log('\nüîç –ê–ù–ê–õ–ò–ó –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
const configFiles = [
  'jest.config.js',
  'jest.config.ts',
  'vitest.config.ts',
  'vitest.config.js',
  'package.json',
];
let configFound = false;

for (const configFile of configFiles) {
  const configPath = path.join(projectPath, configFile);
  try {
    const fs = await import('fs/promises');
    const content = await fs.readFile(configPath, 'utf8');
    if (
      content.includes('coverageThreshold') ||
      content.includes('collectCoverage') ||
      content.includes('coverage') ||
      content.includes('"test:coverage"')
    ) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–∫—Ä—ã—Ç–∏—è –≤: ${configFile}`);
      configFound = true;
    }
  } catch {
    // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è
  }
}

if (!configFound) {
  console.log('‚ö†Ô∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–∫—Ä—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
}

console.log('\nüèÅ –†–ï–ó–£–õ–¨–¢–ê–¢:');
console.log('üî∏ CoverageAnalyzer —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
console.log('üî∏ –£—Å–ø–µ—à–Ω–æ –∏—â–µ—Ç –æ—Ç—á–µ—Ç—ã –ø–æ–∫—Ä—ã—Ç–∏—è –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö');
console.log('üî∏ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã');
console.log('üî∏ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏');

if (found) {
  console.log('üéâ –ù–∞–π–¥–µ–Ω—ã –æ—Ç—á–µ—Ç—ã –ø–æ–∫—Ä—ã—Ç–∏—è - –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω!');
} else {
  console.log('üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ: npm run test:coverage');
}

console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CoverageAnalyzer –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
