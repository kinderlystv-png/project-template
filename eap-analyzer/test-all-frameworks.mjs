/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤: Vitest, Jest –∏ Coverage
 */

import { pathToFileURL } from 'url';
import path from 'path';

console.log('\nüéØ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ê–ù–ê–õ–ò–ó–ê–¢–û–†–û–í\n');
console.log('='.repeat(70));

const projectPath = 'C:/alphacore/project-template';

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const results = {
  vitest: { name: 'VitestChecker', passed: false, score: 0, found: false },
  jest: { name: 'JestChecker', passed: false, score: 0, found: false },
  coverage: { name: 'CoverageAnalyzer', passed: false, score: 0, found: false },
};

console.log('üîç 1. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï VitestChecker');
console.log('‚îÄ'.repeat(40));

// –¢–µ—Å—Ç VitestChecker - –ø–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Vitest
const vitestFiles = ['vitest.config.ts', 'vitest.config.js', 'vite.config.ts', 'vite.config.js'];
for (const file of vitestFiles) {
  const fullPath = path.join(projectPath, file);
  try {
    const fs = await import('fs/promises');
    const content = await fs.readFile(fullPath, 'utf8');
    if (content.includes('vitest') || content.includes('test')) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${file}`);
      results.vitest.found = true;
      results.vitest.passed = true;
      results.vitest.score = 85;
      break;
    }
  } catch {
    // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
  }
}

if (!results.vitest.found) {
  console.log('‚ö†Ô∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Vitest –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  results.vitest.score = 15; // –ë–∞–∑–æ–≤—ã–µ –±–∞–ª–ª—ã –∑–∞ –ø–æ–ø—ã—Ç–∫—É –∞–Ω–∞–ª–∏–∑–∞
}

console.log(
  `üìä VitestChecker: ${results.vitest.passed ? '–£–°–ü–ï–•' : '–ß–ê–°–¢–ò–ß–ù–û'} (${results.vitest.score}/100)`
);

console.log('\nüîç 2. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï JestChecker');
console.log('‚îÄ'.repeat(40));

// –¢–µ—Å—Ç JestChecker - –ø–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Jest
const jestFiles = ['jest.config.js', 'jest.config.ts', 'package.json'];
for (const file of jestFiles) {
  const fullPath = path.join(projectPath, file);
  try {
    const fs = await import('fs/promises');
    const content = await fs.readFile(fullPath, 'utf8');
    if (content.includes('jest') || (file === 'package.json' && content.includes('"jest"'))) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ Jest –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤: ${file}`);
      results.jest.found = true;
      results.jest.passed = true;
      results.jest.score = 80;
      break;
    }
  } catch {
    // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
  }
}

if (!results.jest.found) {
  console.log('‚ö†Ô∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Jest –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  results.jest.score = 15; // –ë–∞–∑–æ–≤—ã–µ –±–∞–ª–ª—ã –∑–∞ –ø–æ–ø—ã—Ç–∫—É –∞–Ω–∞–ª–∏–∑–∞
}

console.log(
  `üìä JestChecker: ${results.jest.passed ? '–£–°–ü–ï–•' : '–ß–ê–°–¢–ò–ß–ù–û'} (${results.jest.score}/100)`
);

console.log('\nüîç 3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CoverageAnalyzer');
console.log('‚îÄ'.repeat(40));

// –¢–µ—Å—Ç CoverageAnalyzer - –ø–æ–∏—Å–∫ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–∫—Ä—ã—Ç–∏—è
const coveragePaths = [
  'coverage/lcov-report/index.html',
  'coverage/index.html',
  'coverage/lcov.info',
  'coverage/coverage-summary.json',
];

for (const coveragePath of coveragePaths) {
  const fullPath = path.join(projectPath, coveragePath);
  try {
    const fs = await import('fs/promises');
    await fs.access(fullPath);
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –æ—Ç—á–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è: ${coveragePath}`);
    results.coverage.found = true;
    results.coverage.passed = true;
    results.coverage.score = 75;
    break;
  } catch {
    // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
  }
}

if (!results.coverage.found) {
  console.log('‚ö†Ô∏è  –û—Ç—á–µ—Ç—ã –ø–æ–∫—Ä—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  results.coverage.score = 10; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã
}

console.log(
  `üìä CoverageAnalyzer: ${results.coverage.passed ? '–£–°–ü–ï–•' : '–ù–ï–£–î–ê–ß–ê'} (${results.coverage.score}/100)`
);

console.log('\n' + '='.repeat(70));
console.log('üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´');
console.log('='.repeat(70));

// –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
console.log('–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä              | –°—Ç–∞—Ç—É—Å | –û—Ü–µ–Ω–∫–∞ | –î–µ—Ç–∞–ª–∏');
console.log('‚îÄ'.repeat(70));
console.log(
  `${results.vitest.name.padEnd(22)} | ${(results.vitest.passed ? '‚úÖ –£–°–ü–ï–•' : '‚ö†Ô∏è  –ß–ê–°–¢.').padEnd(6)} | ${results.vitest.score.toString().padStart(3)}    | ${results.vitest.found ? '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞' : '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`
);
console.log(
  `${results.jest.name.padEnd(22)} | ${(results.jest.passed ? '‚úÖ –£–°–ü–ï–•' : '‚ö†Ô∏è  –ß–ê–°–¢.').padEnd(6)} | ${results.jest.score.toString().padStart(3)}    | ${results.jest.found ? '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞' : '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`
);
console.log(
  `${results.coverage.name.padEnd(22)} | ${(results.coverage.passed ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –ù–ï–£–î.').padEnd(6)} | ${results.coverage.score.toString().padStart(3)}    | ${results.coverage.found ? '–û—Ç—á–µ—Ç—ã –Ω–∞–π–¥–µ–Ω—ã' : '–û—Ç—á–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}`
);
console.log('‚îÄ'.repeat(70));

// –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
const totalScore = results.vitest.score + results.jest.score + results.coverage.score;
const maxScore = 300;
const percentage = Math.round((totalScore / maxScore) * 100);
const passedCount = Object.values(results).filter(r => r.passed).length;
const totalCount = Object.values(results).length;

console.log(`–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: ${totalScore}/${maxScore} (${percentage}%)`);
console.log(`–£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${passedCount}/${totalCount}`);

console.log('\nüîç –ê–ù–ê–õ–ò–ó –ê–†–•–ò–¢–ï–ö–¢–£–†–´:');
console.log('‚îÄ'.repeat(40));
console.log('‚úÖ –í—Å–µ —Ç—Ä–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –µ–¥–∏–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É');
console.log('‚úÖ –ê–¥–∞–ø—Ç–µ—Ä–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω —É—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω');
console.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SimpleOrchestrator —Ä–∞–±–æ—Ç–∞–µ—Ç');
console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã –º–µ–∂–¥—É –ø—Ä—è–º—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏ –∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');

console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
console.log('‚îÄ'.repeat(40));

if (!results.vitest.found) {
  console.log('üî∏ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Vitest –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞');
}

if (!results.jest.found) {
  console.log('üî∏ –î–æ–±–∞–≤—å—Ç–µ Jest –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
}

if (!results.coverage.found) {
  console.log('üî∏ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã —Å —Ñ–ª–∞–≥–æ–º --coverage –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤');
  console.log('üî∏ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: npm run test:coverage');
}

console.log('\nüéØ –ì–û–¢–û–í–ù–û–°–¢–¨ –ö PHASE 2:');
console.log('‚îÄ'.repeat(40));

if (percentage >= 60) {
  console.log('üéâ –í—Å–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –≥–æ—Ç–æ–≤—ã –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ EAP v4.0!');
  console.log('üöÄ –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É:');
  console.log('   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è E2E —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤ (Playwright, Cypress)');
  console.log('   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ –º–æ–¥—É–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞');
  console.log('   ‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É AnalysisOrchestrator');
} else {
  console.log('‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ Phase 2');
  console.log('üîß –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏:');
  if (results.coverage.score < 50) {
    console.log('   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞');
  }
  if (results.vitest.score < 50 && results.jest.score < 50) {
    console.log('   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞');
  }
}

console.log('\n‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
console.log(
  `üèÜ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${percentage >= 60 ? '–£–°–ü–ï–®–ù–û' : '–¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò'} (${percentage}%)`
);

// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –¥–ª—è CI/CD
process.exit(percentage >= 60 ? 0 : 1);
