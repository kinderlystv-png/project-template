/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ v2.0
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞
 */

import { OptimizedProjectAnalyzer } from './src/optimized-analyzer.js';
import * as fs from 'fs';
import * as path from 'path';

async function runOptimizedDemo() {
  console.log('üöÄ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê v2.0 ===');
  console.log(
    '‚ú® –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ + –°–Ω–∏–∂–µ–Ω–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥ + –õ—É—á—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n'
  );

  try {
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    const analyzer = new OptimizedProjectAnalyzer(true);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é EAP
    const projectPath = '.';

    console.log('üìä –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...\n');
    const startTime = Date.now();

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
    const result = await analyzer.analyze(projectPath);

    const endTime = Date.now();
    const analysisTime = endTime - startTime;

    console.log('\nüìã === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê ===\n');

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`   üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${result.totalFiles}`);
    console.log(`   üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${result.analyzedFiles}`);
    console.log(`   ‚è±Ô∏è  –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: ${analysisTime}ms\n`);

    console.log('üí∞ –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –î–û–õ–ì:');
    console.log(`   üí∏ –û–±—â–∏–π –¥–æ–ª–≥: ${result.technicalDebt.totalHours} —á–∞—Å–æ–≤`);
    console.log(`   üî• –ì–æ—Ä—è—á–∏—Ö —Ç–æ—á–µ–∫: ${result.technicalDebt.hotspots.length}\n`);

    console.log('   üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–≥–∞:');
    result.technicalDebt.categories.forEach(category => {
      const impact = category.impact === 'High' ? 'üî¥' : category.impact === 'Medium' ? 'üü°' : 'üü¢';
      console.log(
        `      ${impact} ${category.name}: ${category.hours} —á–∞—Å–æ–≤ (${category.impact} impact)`
      );
    });

    if (result.technicalDebt.hotspots.length > 0) {
      console.log('\n   üî• –ì–æ—Ä—è—á–∏–µ —Ç–æ—á–∫–∏:');
      result.technicalDebt.hotspots.forEach(hotspot => {
        console.log(`      ‚Ä¢ ${hotspot.file}: ${hotspot.hours} —á–∞—Å–æ–≤ (${hotspot.issues} –ø—Ä–æ–±–ª–µ–º)`);
      });
    }

    console.log('\nüìà –°–õ–û–ñ–ù–û–°–¢–¨ –ö–û–î–ê:');
    console.log(`   üìä –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: ${result.complexity.average}`);
    console.log(`   üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: ${result.complexity.highest}`);
    console.log(
      `   üîç –§–∞–π–ª–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é: ${result.complexity.files.filter(f => f.complexity > result.complexity.average * 1.5).length}`
    );

    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    result.recommendations.forEach(recommendation => {
      console.log(`   ${recommendation}`);
    });

    // –û—Ü–µ–Ω–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π
    console.log('\nüéØ –û–¶–ï–ù–ö–ê –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:');
    const originalDebt = 585; // –ò–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    const currentDebt = result.technicalDebt.totalHours;
    const improvement = originalDebt - currentDebt;
    const improvementPercent = Math.round((improvement / originalDebt) * 100);

    if (improvement > 0) {
      console.log(
        `   ‚úÖ –°–Ω–∏–∂–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞: -${improvement} —á–∞—Å–æ–≤ (${improvementPercent}%)`
      );
      console.log(`   üéâ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —É–ª—É—á—à–µ–Ω–∞! ROI —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.`);
    } else {
      console.log(`   üìä –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–æ–ª–≥–∞: ${currentDebt} —á–∞—Å–æ–≤`);
      console.log(`   üí° –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —É–ª—É—á—à–µ–Ω–∏—è: ${Math.abs(improvement)} —á–∞—Å–æ–≤`);
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    console.log('\nüíæ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...');
    const report = await analyzer.generateReport(result);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    const reportsDir = './reports';
    if (!fs.existsSync(reportsDir)) {
      fs.mkdirSync(reportsDir, { recursive: true });
    }

    const reportPath = path.join(reportsDir, 'optimized-analysis-report.md');
    fs.writeFileSync(reportPath, report, 'utf-8');

    console.log(`   üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);

    console.log('\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìà –ö–õ–Æ–ß–ï–í–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:');
    console.log('   ‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–∏–Ω—Ü–∏–ø Single Responsibility');
    console.log('   ‚úÖ –£—Å—Ç—Ä–∞–Ω–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞');
    console.log('   ‚úÖ –£–ø—Ä–æ—â–µ–Ω—ã —Å–ª–æ–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã');
    console.log('   ‚úÖ –£–ª—É—á—à–µ–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
    console.log('   ‚úÖ –°–Ω–∏–∂–µ–Ω —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥');

    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ
if (import.meta.url === `file://${process.argv[1]}`) {
  runOptimizedDemo()
    .then(() => {
      console.log('\n‚úÖ –î–µ–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      process.exit(0);
    })
    .catch(error => {
      console.error('\n‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ:', error);
      process.exit(1);
    });
}

export { runOptimizedDemo };
