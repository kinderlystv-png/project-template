/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ VitestChecker —Å AnalysisOrchestrator
 */

import { AnalysisOrchestrator } from './src/core/orchestrator.js';
import { VitestChecker } from './src/checkers/testing/checkers/VitestChecker.js';
import { Project } from './src/types/Project.js';

async function testVitestIntegration() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ VitestChecker —Å AnalysisOrchestrator\n');

  // 1. –°–æ–∑–¥–∞–µ–º AnalysisOrchestrator
  const orchestrator = new AnalysisOrchestrator(2); // 2 –ø–æ—Ç–æ–∫–∞

  // 2. –°–æ–∑–¥–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º VitestChecker
  const vitestChecker = new VitestChecker();
  orchestrator.registerChecker('vitest-testing', vitestChecker);

  console.log('‚úÖ VitestChecker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ AnalysisOrchestrator\n');

  // 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
  const testProject: Project = {
    name: 'test-project',
    path: process.cwd(), // –¢–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç
    version: '1.0.0',
    dependencies: {},
    devDependencies: {},
    files: [],
  };

  try {
    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ VitestChecker
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ VitestChecker...');
    const directResults = await vitestChecker.check(testProject);

    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${directResults.length}`);
    directResults.forEach((result, index) => {
      console.log(
        `   ${index + 1}. ${result.name}: ${result.passed ? '‚úÖ' : '‚ùå'} (${result.score}/${result.maxScore})`
      );
      console.log(`      ${result.description}`);
      if (result.details?.recommendations && result.details.recommendations.length > 0) {
        console.log(`      üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: ${result.details.recommendations.join(', ')}`);
      }
    });

    console.log('\n' + '='.repeat(50) + '\n');

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ AnalysisOrchestrator
    console.log('üé≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ AnalysisOrchestrator...');
    const fullAnalysis = await orchestrator.analyzeProject(testProject.path, false);

    console.log(`üìã –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${fullAnalysis.checkResults.length}`);

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç VitestChecker
    const vitestResults = fullAnalysis.checkResults.filter(
      result => result.id?.startsWith('vitest-') || result.category === 'Testing'
    );

    console.log(`üîß –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç VitestChecker: ${vitestResults.length}`);
    vitestResults.forEach((result, index) => {
      console.log(
        `   ${index + 1}. ${result.name}: ${result.passed ? '‚úÖ' : '‚ùå'} (${result.score}/${result.maxScore})`
      );
      console.log(`      –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${result.category}, –í–∞–∂–Ω–æ—Å—Ç—å: ${result.severity}`);
    });

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\nüìä –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:');
    console.log(`   - –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤: ${directResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
    console.log(`   - –ß–µ—Ä–µ–∑ Orchestrator: ${vitestResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);

    const compatible = directResults.length === vitestResults.length;
    console.log(`   - –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: ${compatible ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`);

    if (compatible) {
      console.log('\nüéâ –£–°–ü–ï–•: VitestChecker —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å AnalysisOrchestrator!');
    } else {
      console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–∞–∑–ª–∏—á–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö');
    }

    // 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\nüîç –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:');
    const resultTypes = new Set(directResults.map(r => typeof r.passed));
    const severityTypes = new Set(directResults.map(r => r.severity));

    console.log(`   - –¢–∏–ø—ã passed: ${Array.from(resultTypes).join(', ')}`);
    console.log(`   - –£—Ä–æ–≤–Ω–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏: ${Array.from(severityTypes).join(', ')}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    const hasRequiredFields = directResults.every(
      r =>
        r.id &&
        r.name &&
        r.description !== undefined &&
        typeof r.passed === 'boolean' &&
        typeof r.score === 'number' &&
        typeof r.maxScore === 'number'
    );

    console.log(`   - –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${hasRequiredFields ? '‚úÖ' : '‚ùå'}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    if (error instanceof Error) {
      console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
      console.error('   –°—Ç–µ–∫:', error.stack);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testVitestIntegration().catch(console.error);
