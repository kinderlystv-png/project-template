/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö E2E –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤: Playwright –∏ Cypress
 */

import { pathToFileURL } from 'url';
import path from 'path';

console.log('\nüéØ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï E2E –ê–ù–ê–õ–ò–ó–ê–¢–û–†–û–í (Phase 2)\n');
console.log('='.repeat(70));

const projectPath = 'C:/alphacore/project-template';

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const results = {
  playwright: { name: 'PlaywrightChecker', passed: false, score: 0, found: false, tests: 0 },
  cypress: { name: 'CypressChecker', passed: false, score: 0, found: false, tests: 0 }
};

console.log('üé≠ 1. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PlaywrightChecker');
console.log('‚îÄ'.repeat(40));

// –¢–µ—Å—Ç PlaywrightChecker
try {
  const fs = await import('fs/promises');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
  const packageJsonPath = path.join(projectPath, 'package.json');
  const packageContent = await fs.readFile(packageJsonPath, 'utf8');
  const packageJson = JSON.parse(packageContent);

  const hasPlaywright = !!(
    packageJson.dependencies?.['@playwright/test'] ||
    packageJson.devDependencies?.['@playwright/test'] ||
    packageJson.dependencies?.['playwright'] ||
    packageJson.devDependencies?.['playwright']
  );

  if (hasPlaywright) {
    console.log('‚úÖ Playwright –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞');
    results.playwright.found = true;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const configFiles = ['playwright.config.ts', 'playwright.config.js'];
    let configFound = false;
    let configData = {};

    for (const configFile of configFiles) {
      const configPath = path.join(projectPath, configFile);
      try {
        await fs.access(configPath);
        const content = await fs.readFile(configPath, 'utf8');

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const testDirMatch = content.match(/testDir:\s*['"`]([^'"`]+)['"`]/);
        const testDir = testDirMatch ? testDirMatch[1] : './tests/e2e';

        // –°—á–∏—Ç–∞–µ–º —Ç–µ—Å—Ç—ã
        const testDirPath = path.join(projectPath, testDir);
        async function countTests(dirPath) {
          let count = 0;
          try {
            const entries = await fs.readdir(dirPath, { withFileTypes: true });
            for (const entry of entries) {
              const fullPath = path.join(dirPath, entry.name);
              if (entry.isDirectory()) {
                count += await countTests(fullPath);
              } else if (entry.name.endsWith('.spec.ts') || entry.name.endsWith('.test.ts')) {
                count++;
              }
            }
          } catch {}
          return count;
        }

        results.playwright.tests = await countTests(testDirPath);

        configData = {
          testDir,
          hasReports: content.includes('reporter') && content.includes('html'),
          parallelConfig: content.includes('fullyParallel'),
          retryConfig: content.includes('retries'),
          browsers: content.includes('webkit') ? 3 : (content.includes('firefox') ? 2 : 1)
        };

        configFound = true;
        console.log(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: ${configFile}`);
        console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤: ${configData.testDir}`);
        console.log(`üìù –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${results.playwright.tests}`);
        break;
      } catch {}
    }

    if (configFound && results.playwright.tests > 0) {
      // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫—É
      let score = 40;
      if (configData.hasReports) score += 15;
      if (configData.parallelConfig) score += 10;
      if (configData.retryConfig) score += 10;
      if (configData.browsers >= 2) score += 10;
      if (results.playwright.tests >= 3) score += 10;

      results.playwright.score = Math.min(score, 100);
      results.playwright.passed = score >= 70;

      console.log(`üìä –û—Ü–µ–Ω–∫–∞: ${results.playwright.score}/100`);
    } else {
      results.playwright.score = configFound ? 30 : 15;
      console.log(`‚ö†Ô∏è  –û—Ü–µ–Ω–∫–∞: ${results.playwright.score}/100 (${configFound ? '–Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤' : '–Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'})`);
    }
  } else {
    console.log('‚ùå Playwright –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    results.playwright.score = 5;
  }
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Playwright:', error.message);
  results.playwright.score = 0;
}

console.log(`üìä PlaywrightChecker: ${results.playwright.passed ? '–£–°–ü–ï–•' : '–ß–ê–°–¢–ò–ß–ù–û'} (${results.playwright.score}/100)`);

console.log('\nüå≤ 2. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CypressChecker');
console.log('‚îÄ'.repeat(40));

// –¢–µ—Å—Ç CypressChecker
try {
  const fs = await import('fs/promises');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
  const packageJsonPath = path.join(projectPath, 'package.json');
  const packageContent = await fs.readFile(packageJsonPath, 'utf8');
  const packageJson = JSON.parse(packageContent);

  const hasCypress = !!(
    packageJson.dependencies?.['cypress'] ||
    packageJson.devDependencies?.['cypress']
  );

  if (hasCypress) {
    console.log('‚úÖ Cypress –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞');
    results.cypress.found = true;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const configFiles = ['cypress.config.ts', 'cypress.config.js', 'cypress.json'];
    let configFound = false;

    for (const configFile of configFiles) {
      const configPath = path.join(projectPath, configFile);
      try {
        await fs.access(configPath);
        configFound = true;
        console.log(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: ${configFile}`);
        break;
      } catch {}
    }

    // –°—á–∏—Ç–∞–µ–º —Ç–µ—Å—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
    const testDirs = ['cypress/e2e', 'cypress/integration', 'cypress/tests'];
    for (const testDir of testDirs) {
      try {
        const testDirPath = path.join(projectPath, testDir);
        const files = await fs.readdir(testDirPath);
        const cypressTests = files.filter(f => f.endsWith('.cy.ts') || f.endsWith('.cy.js') || f.endsWith('.spec.ts'));
        results.cypress.tests += cypressTests.length;
        if (cypressTests.length > 0) {
          console.log(`üìÅ ${testDir}: –Ω–∞–π–¥–µ–Ω–æ ${cypressTests.length} —Ç–µ—Å—Ç–æ–≤`);
        }
      } catch {}
    }

    console.log(`üìù –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${results.cypress.tests}`);

    if (configFound && results.cypress.tests > 0) {
      // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫—É
      let score = 40;
      if (results.cypress.tests >= 3) score += 15;
      if (results.cypress.tests >= 10) score += 10;

      results.cypress.score = Math.min(score, 100);
      results.cypress.passed = score >= 70;
    } else {
      results.cypress.score = configFound ? 30 : 15;
    }

    console.log(`üìä –û—Ü–µ–Ω–∫–∞: ${results.cypress.score}/100`);
  } else {
    console.log('‚ùå Cypress –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    results.cypress.score = 5;
  }
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Cypress:', error.message);
  results.cypress.score = 0;
}

console.log(`üìä CypressChecker: ${results.cypress.passed ? '–£–°–ü–ï–•' : '–ß–ê–°–¢–ò–ß–ù–û/–ù–ï–£–î–ê–ß–ê'} (${results.cypress.score}/100)`);

console.log('\n' + '='.repeat(70));
console.log('üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ E2E –ê–ù–ê–õ–ò–ó–ê–¢–û–†–û–í');
console.log('='.repeat(70));

// –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
console.log('E2E –§—Ä–µ–π–º–≤–æ—Ä–∫           | –°—Ç–∞—Ç—É—Å | –û—Ü–µ–Ω–∫–∞ | –¢–µ—Å—Ç—ã | –î–µ—Ç–∞–ª–∏');
console.log('‚îÄ'.repeat(70));
console.log(`${results.playwright.name.padEnd(22)} | ${(results.playwright.passed ? '‚úÖ –£–°–ü–ï–•' : results.playwright.score >= 30 ? '‚ö†Ô∏è  –ß–ê–°–¢.' : '‚ùå –ù–ï–£–î.').padEnd(6)} | ${results.playwright.score.toString().padStart(3)}    | ${results.playwright.tests.toString().padStart(3)}   | ${results.playwright.found ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç' : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
console.log(`${results.cypress.name.padEnd(22)} | ${(results.cypress.passed ? '‚úÖ –£–°–ü–ï–•' : results.cypress.score >= 30 ? '‚ö†Ô∏è  –ß–ê–°–¢.' : '‚ùå –ù–ï–£–î.').padEnd(6)} | ${results.cypress.score.toString().padStart(3)}    | ${results.cypress.tests.toString().padStart(3)}   | ${results.cypress.found ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω –Ω–æ –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤' : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
console.log('‚îÄ'.repeat(70));

// –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
const totalScore = results.playwright.score + results.cypress.score;
const maxScore = 200;
const percentage = Math.round((totalScore / maxScore) * 100);
const passedCount = Object.values(results).filter(r => r.passed).length;
const installedCount = Object.values(results).filter(r => r.found).length;
const totalCount = Object.values(results).length;

console.log(`–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: ${totalScore}/${maxScore} (${percentage}%)`);
console.log(`–£—Å–ø–µ—à–Ω—ã—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤: ${passedCount}/${totalCount}`);
console.log(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤: ${installedCount}/${totalCount}`);

console.log('\nüîç –ê–ù–ê–õ–ò–ó E2E –≠–ö–û–°–ò–°–¢–ï–ú–´:');
console.log('‚îÄ'.repeat(40));

if (results.playwright.found) {
  console.log('‚úÖ Playwright –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É');
  console.log(`   ‚Ä¢ ${results.playwright.tests} E2E —Ç–µ—Å—Ç–æ–≤');
  console.log('   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤');
  console.log('   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –æ—Ç—á–µ—Ç—ã –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å');
} else {
  console.log('‚ö†Ô∏è  Playwright –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
}

if (results.cypress.found) {
  console.log('‚ö†Ô∏è  Cypress —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
  console.log(`   ‚Ä¢ ${results.cypress.tests} —Ç–µ—Å—Ç–æ–≤ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ)`);
} else {
  console.log('‚ùå Cypress –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
}

console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û E2E:');
console.log('‚îÄ'.repeat(40));

if (!results.cypress.found) {
  console.log('üî∏ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É Cypress –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã Playwright');
  console.log('üî∏ –ö–æ–º–∞–Ω–¥–∞: npm install --save-dev cypress');
}

if (results.playwright.tests < 5) {
  console.log('üî∏ –£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ–∫—Ä—ã—Ç–∏–µ Playwright —Ç–µ—Å—Ç–∞–º–∏');
  console.log('üî∏ –î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤');
}

if (installedCount === 0) {
  console.log('üî∏ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω E2E —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
}

console.log('\nüéØ –ì–û–¢–û–í–ù–û–°–¢–¨ –ö PHASE 2.1:');
console.log('‚îÄ'.repeat(40));

if (percentage >= 50) {
  console.log('üéâ E2E –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –≥–æ—Ç–æ–≤—ã –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏!');
  console.log('üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ unified E2E analyzer');
  console.log('   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞–º–∏');
  console.log('   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ TestingAnalyzer');
} else if (percentage >= 25) {
  console.log('‚ö†Ô∏è  –ß–∞—Å—Ç–∏—á–Ω–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å E2E –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤');
  console.log('üîß –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏:');
  console.log('   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö E2E —Ç–µ—Å—Ç–æ–≤');
  console.log('   ‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤');
} else {
  console.log('‚ùå E2E –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã —Ç—Ä–µ–±—É—é—Ç –±–∞–∑–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
  console.log('üîß –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏:');
  console.log('   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ E2E —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤');
  console.log('   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ E2E —Ç–µ—Å—Ç–æ–≤');
}

console.log('\nüèÜ –°–¢–ê–¢–£–° PHASE 2:');
console.log('‚îÄ'.repeat(40));

const phase2Status = percentage >= 50 ? '–£–°–ü–ï–®–ù–û' : percentage >= 25 ? '–ß–ê–°–¢–ò–ß–ù–û' : '–¢–†–ï–ë–£–ï–¢ –†–ê–ë–û–¢–´';
const phase2Color = percentage >= 50 ? 'üéâ' : percentage >= 25 ? '‚ö†Ô∏è' : '‚ùå';

console.log(`${phase2Color} Phase 2 (E2E –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã): ${phase2Status} (${percentage}%)`);

console.log('\n‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ E2E –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
console.log(`üèÜ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${phase2Status} (${percentage}%)`);

// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –¥–ª—è CI/CD
process.exit(percentage >= 25 ? 0 : 1);
