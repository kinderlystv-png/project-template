/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç PlaywrightChecker –±–µ–∑ TypeScript (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
 */

import { pathToFileURL } from 'url';
import path from 'path';

console.log('\nüé≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PlaywrightChecker...\n');

const projectPath = 'C:/alphacore/project-template';

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Playwright
console.log('üß™ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ Playwright –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏');

try {
  const fs = await import('fs/promises');
  const packageJsonPath = path.join(projectPath, 'package.json');
  const packageContent = await fs.readFile(packageJsonPath, 'utf8');
  const packageJson = JSON.parse(packageContent);

  const hasPlaywright = !!(
    packageJson.dependencies?.['@playwright/test'] ||
    packageJson.devDependencies?.['@playwright/test'] ||
    packageJson.dependencies?.['playwright'] ||
    packageJson.devDependencies?.['playwright']
  );

  if (hasPlaywright) {
    console.log('‚úÖ Playwright –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö');
  } else {
    console.log('‚ùå Playwright –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö');
  }
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ package.json:', error.message);
}

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
console.log('\nüß™ –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Playwright');

const configFiles = ['playwright.config.ts', 'playwright.config.js'];
let configFound = false;
let configPath = '';

for (const configFile of configFiles) {
  const fullPath = path.join(projectPath, configFile);
  try {
    const fs = await import('fs/promises');
    await fs.access(fullPath);
    configFound = true;
    configPath = configFile;
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${configFile}`);
    break;
  } catch {
    // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
  }
}

if (!configFound) {
  console.log('‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª Playwright –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

// –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
let configAnalysis = {
  testDir: 'tests/e2e',
  hasReports: false,
  browsers: [],
  parallelConfig: false,
  retryConfig: false,
};

if (configFound) {
  console.log('\nüß™ –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');

  try {
    const fs = await import('fs/promises');
    const configContent = await fs.readFile(path.join(projectPath, configPath), 'utf8');

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const testDirMatch = configContent.match(/testDir:\s*['"`]([^'"`]+)['"`]/);
    if (testDirMatch) {
      configAnalysis.testDir = testDirMatch[1];
      console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤: ${configAnalysis.testDir}`);
    }

    configAnalysis.hasReports =
      configContent.includes('reporter') &&
      (configContent.includes('html') || configContent.includes('junit'));
    console.log(`üìä –û—Ç—á–µ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: ${configAnalysis.hasReports ? '–¥–∞' : '–Ω–µ—Ç'}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—Ä–∞—É–∑–µ—Ä—ã
    if (configContent.includes('chromium')) configAnalysis.browsers.push('chromium');
    if (configContent.includes('firefox')) configAnalysis.browsers.push('firefox');
    if (configContent.includes('webkit')) configAnalysis.browsers.push('webkit');
    if (configAnalysis.browsers.length === 0) configAnalysis.browsers.push('chromium');

    console.log(`üåê –ë—Ä–∞—É–∑–µ—Ä—ã: ${configAnalysis.browsers.join(', ')}`);

    configAnalysis.parallelConfig =
      configContent.includes('fullyParallel') || configContent.includes('workers');
    console.log(`‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å: ${configAnalysis.parallelConfig ? '–¥–∞' : '–Ω–µ—Ç'}`);

    configAnalysis.retryConfig = configContent.includes('retries');
    console.log(`üîÑ Retry –º–µ—Ö–∞–Ω–∏–∑–º: ${configAnalysis.retryConfig ? '–¥–∞' : '–Ω–µ—Ç'}`);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
  }
}

// –¢–µ—Å—Ç 4: –ü–æ–¥—Å—á–µ—Ç —Ç–µ—Å—Ç–æ–≤
console.log('\nüß™ –¢–µ—Å—Ç 4: –ü–æ–¥—Å—á–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤');

let testsFound = 0;

try {
  const fs = await import('fs/promises');
  const testDirPath = path.join(projectPath, configAnalysis.testDir);

  async function countTestsRecursively(dirPath) {
    let count = 0;
    try {
      const entries = await fs.readdir(dirPath, { withFileTypes: true });

      for (const entry of entries) {
        const fullPath = path.join(dirPath, entry.name);
        if (entry.isDirectory()) {
          count += await countTestsRecursively(fullPath);
        } else if (
          entry.name.endsWith('.spec.ts') ||
          entry.name.endsWith('.spec.js') ||
          entry.name.endsWith('.test.ts') ||
          entry.name.endsWith('.test.js')
        ) {
          count++;
        }
      }
    } catch {
      // –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞
    }
    return count;
  }

  testsFound = await countTestsRecursively(testDirPath);
  console.log(`üìù –ù–∞–π–¥–µ–Ω–æ E2E —Ç–µ—Å—Ç–æ–≤: ${testsFound}`);
} catch (error) {
  console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ç–µ—Å—Ç—ã:', error.message);
}

// –í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫—É
console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê PLAYWRIGHT:');
console.log('‚îÄ'.repeat(60));

let score = 0;
let passed = false;

if (!configFound) {
  score = 15;
  console.log('‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç: –ù–ï–£–î–ê–ß–ê');
  console.log(`üìä –û—Ü–µ–Ω–∫–∞: ${score}/100`);
  console.log('üìù –°–æ–æ–±—â–µ–Ω–∏–µ: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª Playwright –Ω–µ –Ω–∞–π–¥–µ–Ω');
  console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('   ‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ playwright.config.ts');
  console.log('   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤');
} else if (testsFound === 0) {
  score = 30;
  console.log('‚ö†Ô∏è  –†–µ–∑—É–ª—å—Ç–∞—Ç: –ß–ê–°–¢–ò–ß–ù–û');
  console.log(`üìä –û—Ü–µ–Ω–∫–∞: ${score}/100`);
  console.log('üìù –°–æ–æ–±—â–µ–Ω–∏–µ: Playwright –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ E2E —Ç–µ—Å—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
  console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log(`   ‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ E2E —Ç–µ—Å—Ç—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${configAnalysis.testDir}`);
  console.log('   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .spec.ts');
} else {
  score = 40; // –ë–∞–∑–æ–≤—ã–µ –±–∞–ª–ª—ã

  if (configAnalysis.hasReports) score += 15;
  if (configAnalysis.parallelConfig) score += 10;
  if (configAnalysis.retryConfig) score += 10;
  if (configAnalysis.browsers.length >= 2) score += 10;
  if (testsFound >= 3) score += 10;
  if (testsFound >= 10) score += 5;

  passed = score >= 70;

  console.log(`${passed ? '‚úÖ' : '‚ö†Ô∏è'} –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passed ? '–£–°–ü–ï–•' : '–ß–ê–°–¢–ò–ß–ù–û'}`);
  console.log(`üìä –û—Ü–µ–Ω–∫–∞: ${Math.min(score, 100)}/100`);
  console.log(
    `üìù –°–æ–æ–±—â–µ–Ω–∏–µ: Playwright E2E: –Ω–∞–π–¥–µ–Ω–æ ${testsFound} —Ç–µ—Å—Ç–æ–≤, ${configAnalysis.browsers.length} –±—Ä–∞—É–∑–µ—Ä–æ–≤`
  );

  console.log('üìã –î–µ—Ç–∞–ª–∏:');
  console.log(`   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${testsFound}`);
  console.log(`   ‚Ä¢ –ë—Ä–∞—É–∑–µ—Ä—ã: ${configAnalysis.browsers.join(', ')}`);
  console.log(`   ‚Ä¢ –û—Ç—á–µ—Ç—ã: ${configAnalysis.hasReports ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'}`);
  console.log(`   ‚Ä¢ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å: ${configAnalysis.parallelConfig ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}`);
  console.log(`   ‚Ä¢ Retry: ${configAnalysis.retryConfig ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);

  if (!passed) {
    console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    if (!configAnalysis.hasReports) {
      console.log('   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤ (HTML, JUnit)');
    }
    if (!configAnalysis.parallelConfig) {
      console.log('   ‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤');
    }
    if (testsFound < 5) {
      console.log('   ‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ–∫—Ä—ã—Ç–∏–µ E2E —Ç–µ—Å—Ç–∞–º–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤');
    }
  }
}

console.log('‚îÄ'.repeat(60));

console.log('\nüé≠ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
if (passed) {
  console.log('üéâ PlaywrightChecker: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç—ã –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!');
} else if (score >= 30) {
  console.log('üîß PlaywrightChecker: –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, —Ç—Ä–µ–±—É—é—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏—è');
} else {
  console.log('‚ö†Ô∏è  PlaywrightChecker: —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞');
}

console.log(`üèÜ –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: ${Math.min(score, 100)}/100`);
console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PlaywrightChecker –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
