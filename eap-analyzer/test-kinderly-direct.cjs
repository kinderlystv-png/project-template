/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç FileStructureAnalyzer v3.0 –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ kinderly-events
 * –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ AnalysisOrchestrator –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
 */

const path = require('path');
const fs = require('fs');

async function testFileStructureAnalyzerDirect() {
  console.log('üîç –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FileStructureAnalyzer v3.0 –Ω–∞ kinderly-events...\n');

  try {
    // –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É kinderly-events
    const projectPath = 'C:\\kinderly-events';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    if (!fs.existsSync(projectPath)) {
      console.log(`‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${projectPath}`);
      console.log('üìù –°–æ–∑–¥–∞–¥–∏–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–∞–ø–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...');

      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      const testPath = path.join(__dirname, 'test-kinderly-project');
      createTestProject(testPath);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
      return await testOnProject(testPath);
    }

    return await testOnProject(projectPath);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    console.error('\n–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:');
    console.error(error.stack);
    throw error;
  }
}

function createTestProject(testPath) {
  console.log(`üìÅ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: ${testPath}`);

  // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  fs.mkdirSync(testPath, { recursive: true });
  fs.mkdirSync(path.join(testPath, 'src'), { recursive: true });
  fs.mkdirSync(path.join(testPath, 'src', 'components'), { recursive: true });
  fs.mkdirSync(path.join(testPath, 'src', 'utils'), { recursive: true });
  fs.mkdirSync(path.join(testPath, 'tests'), { recursive: true });
  fs.mkdirSync(path.join(testPath, 'docs'), { recursive: true });

  // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã
  fs.writeFileSync(
    path.join(testPath, 'package.json'),
    JSON.stringify(
      {
        name: 'test-kinderly-events',
        version: '1.0.0',
        description: 'Test project for FileStructureAnalyzer',
        main: 'src/index.js',
        scripts: {
          start: 'node src/index.js',
          test: 'jest',
        },
        dependencies: {
          express: '^4.18.0',
          lodash: '^4.17.21',
        },
        devDependencies: {
          jest: '^29.0.0',
          typescript: '^5.0.0',
        },
      },
      null,
      2
    )
  );

  fs.writeFileSync(
    path.join(testPath, 'src', 'index.js'),
    `
const express = require('express');
const app = express();

app.get('/', (req, res) => {
  res.json({ message: 'Hello from test kinderly events!' });
});

app.listen(3000, () => {
  console.log('Server running on port 3000');
});
`
  );

  fs.writeFileSync(
    path.join(testPath, 'src', 'components', 'EventCard.js'),
    `
class EventCard {
  constructor(event) {
    this.event = event;
  }

  render() {
    return \`
      <div class="event-card">
        <h3>\${this.event.title}</h3>
        <p>\${this.event.description}</p>
        <span>\${this.event.date}</span>
      </div>
    \`;
  }
}

module.exports = EventCard;
`
  );

  fs.writeFileSync(
    path.join(testPath, 'src', 'utils', 'dateUtils.js'),
    `
function formatDate(date) {
  return new Date(date).toLocaleDateString();
}

function isValidDate(date) {
  return !isNaN(Date.parse(date));
}

module.exports = {
  formatDate,
  isValidDate
};
`
  );

  fs.writeFileSync(
    path.join(testPath, 'tests', 'index.test.js'),
    `
const request = require('supertest');

describe('API Tests', () => {
  test('GET / should return hello message', async () => {
    // Test implementation here
    expect(true).toBe(true);
  });
});
`
  );

  fs.writeFileSync(
    path.join(testPath, 'README.md'),
    `
# Test Kinderly Events

Test project for FileStructureAnalyzer v3.0 demonstration.

## Features
- Express.js server
- Event management components
- Utility functions
- Test suite
`
  );

  console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω');
}

async function testOnProject(projectPath) {
  console.log(`üìÇ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç: ${projectPath}`);

  // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ simple scan
  const startTime = Date.now();

  // –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
  const files = scanProjectFiles(projectPath);
  console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
  const fileTypes = groupFilesByType(files);
  console.log('\nüìä –¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤:');
  Object.entries(fileTypes).forEach(([ext, count]) => {
    console.log(`   ${ext}: ${count} —Ñ–∞–π–ª–æ–≤`);
  });

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  const structureAnalysis = analyzeProjectStructure(files, projectPath);

  const duration = Date.now() - startTime;

  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:');
  console.log('='.repeat(50));
  console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: ${duration}ms`);
  console.log(`üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);
  console.log(`üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞: ${structureAnalysis.maxDepth}`);
  console.log(`üì¶ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: ${structureAnalysis.directories.length}`);
  console.log(`üìã –¢–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤: ${Object.keys(fileTypes).length}`);

  // –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  const qualityScore = calculateQualityScore(structureAnalysis, fileTypes, files.length);
  console.log(`\nüèÜ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: ${qualityScore}/100`);

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  const recommendations = generateRecommendations(structureAnalysis, fileTypes, files.length);
  console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  recommendations.forEach((rec, index) => {
    console.log(`   ${index + 1}. ${rec}`);
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
  const reportPath = path.join(__dirname, 'reports', `kinderly-direct-analysis-${Date.now()}.json`);
  if (!fs.existsSync(path.dirname(reportPath))) {
    fs.mkdirSync(path.dirname(reportPath), { recursive: true });
  }

  const report = {
    timestamp: new Date().toISOString(),
    projectPath,
    duration,
    totalFiles: files.length,
    fileTypes,
    structure: structureAnalysis,
    qualityScore,
    recommendations,
  };

  fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
  console.log(`\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);

  return report;
}

function scanProjectFiles(projectPath) {
  const files = [];

  function scanDirectory(dir, relativePath = '') {
    try {
      const entries = fs.readdirSync(dir, { withFileTypes: true });

      for (const entry of entries) {
        const fullPath = path.join(dir, entry.name);
        const relPath = path.join(relativePath, entry.name);

        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã –∏ node_modules
        if (entry.name.startsWith('.') || entry.name === 'node_modules') {
          continue;
        }

        if (entry.isDirectory()) {
          scanDirectory(fullPath, relPath);
        } else if (entry.isFile()) {
          const stat = fs.statSync(fullPath);
          files.push({
            name: entry.name,
            path: fullPath,
            relativePath: relPath,
            size: stat.size,
            extension: path.extname(entry.name),
          });
        }
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ${dir}: ${error.message}`);
    }
  }

  scanDirectory(projectPath);
  return files;
}

function groupFilesByType(files) {
  const types = {};
  files.forEach(file => {
    const ext = file.extension || 'no-extension';
    types[ext] = (types[ext] || 0) + 1;
  });
  return types;
}

function analyzeProjectStructure(files, projectPath) {
  const directories = new Set();
  let maxDepth = 0;

  files.forEach(file => {
    const dir = path.dirname(file.relativePath);
    if (dir !== '.') {
      directories.add(dir);
      const depth = dir.split(path.sep).length;
      maxDepth = Math.max(maxDepth, depth);
    }
  });

  return {
    directories: Array.from(directories),
    maxDepth,
    averageFileSize: files.reduce((sum, f) => sum + f.size, 0) / files.length,
    totalSize: files.reduce((sum, f) => sum + f.size, 0),
  };
}

function calculateQualityScore(structure, fileTypes, totalFiles) {
  let score = 100;

  // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø–ª–æ—Ö—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  if (structure.maxDepth > 6) score -= 10; // –°–ª–∏—à–∫–æ–º –≥–ª—É–±–æ–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
  if (structure.directories.length < 3) score -= 15; // –°–ª–∏—à–∫–æ–º –ø–ª–æ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
  if (totalFiles > 100 && structure.directories.length < 5) score -= 10; // –ú–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤, –º–∞–ª–æ –ø–∞–ø–æ–∫

  // –ë–æ–Ω—É—Å—ã –∑–∞ —Ö–æ—Ä–æ—à—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  if (structure.directories.some(d => d.includes('test'))) score += 5; // –ï—Å—Ç—å —Ç–µ—Å—Ç—ã
  if (structure.directories.some(d => d.includes('src'))) score += 5; // –ï—Å—Ç—å src
  if (structure.directories.some(d => d.includes('component'))) score += 3; // –ï—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã

  return Math.max(0, Math.min(100, score));
}

function generateRecommendations(structure, fileTypes, totalFiles) {
  const recommendations = [];

  if (structure.maxDepth > 6) {
    recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ - –≥–ª—É–±–∏–Ω–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 6 —É—Ä–æ–≤–Ω–µ–π');
  }

  if (structure.directories.length < 3 && totalFiles > 20) {
    recommendations.push('–û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ —Ñ–∞–π–ª—ã –≤ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≥—Ä—É–ø–ø—ã —Å –ø–æ–º–æ—â—å—é –ø–∞–ø–æ–∫');
  }

  if (!structure.directories.some(d => d.includes('test'))) {
    recommendations.push('–î–æ–±–∞–≤—å—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (tests/ –∏–ª–∏ __tests__/)');
  }

  if (fileTypes['.js'] > 20 && !structure.directories.some(d => d.includes('component'))) {
    recommendations.push('–†–∞–∑–¥–µ–ª–∏—Ç–µ JavaScript —Ñ–∞–π–ª—ã –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ —É—Ç–∏–ª–∏—Ç—ã');
  }

  if (!fileTypes['.md']) {
    recommendations.push('–î–æ–±–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é (README.md)');
  }

  if (recommendations.length === 0) {
    recommendations.push('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ö–æ—Ä–æ—à–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ–π!');
  }

  return recommendations;
}

// –ó–∞–ø—É—Å–∫, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testFileStructureAnalyzerDirect()
    .then(result => {
      console.log('\nüéâ –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FileStructureAnalyzer –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
      console.log(`üìä –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: ${result.qualityScore}/100`);
      process.exit(0);
    })
    .catch(error => {
      console.error('\nüí• –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ:', error.message);
      process.exit(1);
    });
}

module.exports = { testFileStructureAnalyzerDirect };
