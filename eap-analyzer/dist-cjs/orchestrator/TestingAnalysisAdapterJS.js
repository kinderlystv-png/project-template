'use strict';
/**
 * TestingAnalysisAdapter - JavaScript –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * Phase 4.1: –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å AnalysisOrchestrator
 */
Object.defineProperty(exports, '__esModule', { value: true });
exports.TestingAnalysisAdapter = void 0;
const ProcessIsolatedAnalyzerJS_js_1 = require('./ProcessIsolatedAnalyzerJS.js');
/**
 * –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ UnifiedTestingAnalyzer —Å –æ—Å–Ω–æ–≤–Ω—ã–º AnalysisOrchestrator
 */
class TestingAnalysisAdapter {
  constructor(orchestratorContext) {
    this.orchestratorContext = orchestratorContext;
    this.isolatedAnalyzer = new ProcessIsolatedAnalyzerJS_js_1.ProcessIsolatedAnalyzer();
    this.config = {
      enableFallback: true,
      fallbackStrategy: 'basic',
      performanceTracking: true,
      maxRetries: 2,
      retryDelayMs: 1000,
    };
    this.metrics = {
      totalAnalyses: 0,
      successfulAnalyses: 0,
      failedAnalyses: 0,
      fallbackUsed: 0,
      averageResponseTime: 0,
    };
  }
  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç UnifiedTestingAnalyzer —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ ComponentResult
   */
  async analyzeComponent(componentId, context) {
    const startTime = Date.now();
    this.metrics.totalAnalyses++;
    try {
      console.log(`üìä –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${componentId}`);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
      const isAvailable = await this.isolatedAnalyzer.checkAvailability();
      if (!isAvailable) {
        console.warn('‚ö†Ô∏è –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
        return await this.createFallbackResult(componentId, context);
      }
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
      let lastError;
      for (let attempt = 1; attempt <= this.config.maxRetries; attempt++) {
        try {
          console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${this.config.maxRetries}`);
          const rawResult = await this.isolatedAnalyzer.runUnifiedAnalysis({
            projectPath: context.projectPath || this.orchestratorContext.projectPath,
            componentId: componentId,
            analysisType: 'testing',
          });
          // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è AnalysisOrchestrator
          const adaptedResult = await this.adaptResultForOrchestrator(
            rawResult,
            componentId,
            context
          );
          this.metrics.successfulAnalyses++;
          this.updateMetrics(startTime);
          console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ${componentId} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
          return adaptedResult;
        } catch (error) {
          lastError = error;
          console.warn(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
          if (attempt < this.config.maxRetries) {
            await this.sleep(this.config.retryDelayMs * attempt);
          }
        }
      }
      // –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      console.error(`‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ—É–¥–∞—á–Ω—ã –¥–ª—è ${componentId}:`, lastError);
      this.metrics.failedAnalyses++;
      if (this.config.enableFallback) {
        this.metrics.fallbackUsed++;
        return await this.createFallbackResult(componentId, context, lastError);
      } else {
        throw lastError;
      }
    } catch (error) {
      this.metrics.failedAnalyses++;
      this.updateMetrics(startTime);
      console.error(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ${componentId}:`, error);
      throw error;
    }
  }
  /**
   * –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç UnifiedTestingAnalyzer –¥–ª—è AnalysisOrchestrator
   */
  async adaptResultForOrchestrator(rawResult, componentId, context) {
    console.log(`üîÑ –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${componentId}`);
    // –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ComponentResult
    const adaptedResult = {
      componentId: componentId,
      analysisType: 'testing',
      timestamp: new Date().toISOString(),
      status: this.determineStatus(rawResult),
      // –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      summary: this.createSummary(rawResult),
      details: this.formatDetails(rawResult),
      // –ú–µ—Ç—Ä–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      metrics: this.extractMetrics(rawResult),
      recommendations: this.extractRecommendations(rawResult),
      // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      metadata: {
        analysisVersion: rawResult.version || '1.0.0',
        analyzerType: 'UnifiedTestingAnalyzer',
        processingTime: rawResult.processingTime || 0,
        isolatedExecution: true,
        adaptedAt: Date.now(),
      },
      // –ü—Ä–æ–±–ª–µ–º—ã –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
      issues: this.extractIssues(rawResult),
      warnings: this.extractWarnings(rawResult),
      // –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      context: {
        originalResult: rawResult,
        adapterVersion: '1.0.0',
        orchestratorContext: this.getOrchestratorContextSummary(),
      },
    };
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${componentId}: —Å—Ç–∞—Ç—É—Å=${adaptedResult.status}`);
    return adaptedResult;
  }
  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
   */
  determineStatus(rawResult) {
    if (!rawResult || typeof rawResult !== 'object') {
      return 'error';
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
    if (rawResult.critical_issues && rawResult.critical_issues.length > 0) {
      return 'critical';
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏
    const coverage = rawResult.test_coverage?.overall_percentage || 0;
    if (coverage < 30) {
      return 'poor';
    } else if (coverage < 70) {
      return 'warning';
    } else if (coverage >= 90) {
      return 'excellent';
    } else {
      return 'good';
    }
  }
  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –∞–Ω–∞–ª–∏–∑–∞
   */
  createSummary(rawResult) {
    const testFiles = rawResult.test_files?.length || 0;
    const coverage = rawResult.test_coverage?.overall_percentage || 0;
    const issues = (rawResult.issues || []).length;
    return {
      testFilesFound: testFiles,
      overallCoverage: coverage,
      issuesDetected: issues,
      overallHealth: this.calculateHealthScore(rawResult),
      keyFindings: this.extractKeyFindings(rawResult),
    };
  }
  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
   */
  formatDetails(rawResult) {
    return {
      testingFrameworks: rawResult.frameworks || [],
      testFiles: rawResult.test_files || [],
      coverage: rawResult.test_coverage || {},
      performance: rawResult.performance_metrics || {},
      configuration: rawResult.configuration || {},
      dependencies: rawResult.testing_dependencies || [],
    };
  }
  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  extractMetrics(rawResult) {
    return {
      test_count: rawResult.test_count || 0,
      coverage_percentage: rawResult.test_coverage?.overall_percentage || 0,
      performance_score: rawResult.performance_score || 0,
      complexity_score: rawResult.complexity_score || 0,
      maintainability_index: rawResult.maintainability_index || 0,
    };
  }
  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   */
  extractRecommendations(rawResult) {
    const recommendations = rawResult.recommendations || [];
    return recommendations.map(rec => ({
      type: rec.type || 'improvement',
      priority: rec.priority || 'medium',
      description: rec.description || rec.message || String(rec),
      category: rec.category || 'testing',
      effort: rec.effort || 'unknown',
    }));
  }
  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã
   */
  extractIssues(rawResult) {
    const issues = rawResult.issues || rawResult.critical_issues || [];
    return issues.map(issue => ({
      id: issue.id || `issue_${Date.now()}_${Math.random().toString(36).substring(7)}`,
      severity: issue.severity || 'medium',
      type: issue.type || 'testing',
      description: issue.description || issue.message || String(issue),
      location: issue.location || issue.file || 'unknown',
      suggestion: issue.suggestion || null,
    }));
  }
  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
   */
  extractWarnings(rawResult) {
    const warnings = rawResult.warnings || [];
    return warnings.map(warning => ({
      type: warning.type || 'general',
      message: warning.message || String(warning),
      impact: warning.impact || 'low',
    }));
  }
  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–∏–π –±–∞–ª–ª "–∑–¥–æ—Ä–æ–≤—å—è" –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   */
  calculateHealthScore(rawResult) {
    let score = 100;
    // –°–Ω–∏–∂–∞–µ–º –∑–∞ –Ω–∏–∑–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ
    const coverage = rawResult.test_coverage?.overall_percentage || 0;
    score -= Math.max(0, 90 - coverage);
    // –°–Ω–∏–∂–∞–µ–º –∑–∞ –ø—Ä–æ–±–ª–µ–º—ã
    const issues = (rawResult.issues || []).length;
    score -= issues * 5;
    // –°–Ω–∏–∂–∞–µ–º –∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    const criticalIssues = (rawResult.critical_issues || []).length;
    score -= criticalIssues * 15;
    return Math.max(0, Math.min(100, score));
  }
  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏
   */
  extractKeyFindings(rawResult) {
    const findings = [];
    const coverage = rawResult.test_coverage?.overall_percentage || 0;
    if (coverage < 50) {
      findings.push(`–ù–∏–∑–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏: ${coverage}%`);
    }
    const testFiles = rawResult.test_files?.length || 0;
    if (testFiles === 0) {
      findings.push('–¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    const frameworks = rawResult.frameworks || [];
    if (frameworks.length > 0) {
      findings.push(`–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏: ${frameworks.join(', ')}`);
    }
    return findings;
  }
  /**
   * –°–æ–∑–¥–∞–µ—Ç fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
   */
  async createFallbackResult(componentId, context, originalError = null) {
    console.log(`üîÑ –°–æ–∑–¥–∞–Ω–∏–µ fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è: ${componentId}`);
    const fallbackResult = {
      componentId: componentId,
      analysisType: 'testing',
      timestamp: new Date().toISOString(),
      status: 'warning',
      summary: {
        testFilesFound: 0,
        overallCoverage: 0,
        issuesDetected: 1,
        overallHealth: 30,
        keyFindings: ['–û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'],
      },
      details: {
        testingFrameworks: [],
        testFiles: [],
        coverage: {},
        performance: {},
        configuration: {},
        dependencies: [],
      },
      metrics: {
        test_count: 0,
        coverage_percentage: 0,
        performance_score: 0,
        complexity_score: 0,
        maintainability_index: 0,
      },
      recommendations: [
        {
          type: 'critical',
          priority: 'high',
          description: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
          category: 'infrastructure',
          effort: 'medium',
        },
      ],
      issues: [
        {
          id: `fallback_${Date.now()}`,
          severity: 'medium',
          type: 'infrastructure',
          description: '–û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
          location: componentId,
          suggestion: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é UnifiedTestingAnalyzer',
        },
      ],
      warnings: [
        {
          type: 'fallback',
          message: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞',
          impact: 'medium',
        },
      ],
      metadata: {
        analysisVersion: '1.0.0-fallback',
        analyzerType: 'FallbackAnalyzer',
        processingTime: 0,
        isolatedExecution: false,
        adaptedAt: Date.now(),
        fallbackReason: originalError?.message || 'Unknown error',
      },
      context: {
        originalResult: null,
        adapterVersion: '1.0.0',
        fallbackStrategy: this.config.fallbackStrategy,
        orchestratorContext: this.getOrchestratorContextSummary(),
      },
    };
    console.log(`‚úÖ Fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è ${componentId}`);
    return fallbackResult;
  }
  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
   */
  getOrchestratorContextSummary() {
    return {
      projectPath: this.orchestratorContext?.projectPath || 'unknown',
      timestamp: Date.now(),
      adaptersActive: ['TestingAnalysisAdapter'],
    };
  }
  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  updateMetrics(startTime) {
    const executionTime = Date.now() - startTime;
    this.metrics.averageResponseTime =
      (this.metrics.averageResponseTime * (this.metrics.totalAnalyses - 1) + executionTime) /
      this.metrics.totalAnalyses;
  }
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
   */
  async checkComponent(componentId) {
    try {
      const isAvailable = await this.isolatedAnalyzer.checkAvailability();
      return {
        componentId: componentId,
        available: isAvailable,
        adapterReady: true,
        lastCheck: new Date().toISOString(),
      };
    } catch (error) {
      return {
        componentId: componentId,
        available: false,
        adapterReady: false,
        error: error.message,
        lastCheck: new Date().toISOString(),
      };
    }
  }
  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–∞–ø—Ç–µ—Ä–∞
   */
  getAdapterStats() {
    return {
      ...this.metrics,
      isolatedAnalyzerStats: this.isolatedAnalyzer.getPerformanceStats(),
      configuredAt: Date.now(),
    };
  }
  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–¥–∞–ø—Ç–µ—Ä–∞
   */
  updateConfig(updates) {
    Object.assign(this.config, updates);
    console.log('üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è TestingAnalysisAdapter –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', updates);
  }
  /**
   * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
   */
  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}
exports.TestingAnalysisAdapter = TestingAnalysisAdapter;
//# sourceMappingURL=TestingAnalysisAdapterJS.js.map
