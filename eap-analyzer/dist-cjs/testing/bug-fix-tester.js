"use strict";
/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±–∞–≥–æ–≤ EAP
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞ –¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BugFixTester = void 0;
const fs = __importStar(require("fs"));
const analyzer_js_1 = require("../analyzer.js");
const duplication_detector_js_1 = require("../modules/structure-analyzer/duplication-detector.js");
const file_classifier_js_1 = require("../modules/structure-analyzer/file-classifier.js");
const complexity_calculator_js_1 = require("../modules/structure-analyzer/complexity-calculator.js");
class BugFixTester {
    duplicationDetector;
    fileClassifier;
    complexityCalculator;
    constructor() {
        this.duplicationDetector = new duplication_detector_js_1.ImprovedDuplicationDetector();
        this.fileClassifier = new file_classifier_js_1.SmartFileClassifier();
        this.complexityCalculator = new complexity_calculator_js_1.ImprovedComplexityCalculator();
    }
    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
     */
    async runAllTests() {
        console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±–∞–≥–æ–≤...\n');
        const duplicationTests = await this.testDuplicationFixes();
        const complexityTests = await this.testComplexityFixes();
        const classificationTests = await this.testClassificationFixes();
        const totalPassed = duplicationTests.passed + complexityTests.passed + classificationTests.passed;
        const totalFailed = duplicationTests.failed + complexityTests.failed + classificationTests.failed;
        const results = {
            duplicationTests,
            complexityTests,
            classificationTests,
            summary: {
                totalPassed,
                totalFailed,
                success: totalFailed === 0,
            },
        };
        this.printResults(results);
        return results;
    }
    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
     */
    async testDuplicationFixes() {
        console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –¥—É–ø–ª–∏–∫–∞—Ü–∏–∏...');
        const tests = [];
        let passed = 0;
        let failed = 0;
        // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
        try {
            const testFiles = [
                { path: 'file1.js', content: 'function hello() { console.log("Hello"); }', lines: 1 },
                { path: 'file2.js', content: 'function hello() { console.log("Hello"); }', lines: 1 },
            ];
            const result = await this.duplicationDetector.calculateDuplication(testFiles);
            const percentage = result.percentage;
            const test = {
                test: '–ü—Ä–æ—Ü–µ–Ω—Ç –¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100%',
                expected: '<= 100%',
                actual: `${percentage}%`,
                passed: percentage <= 100,
            };
            if (test.passed)
                passed++;
            else
                failed++;
            tests.push(test);
        }
        catch (error) {
            tests.push({
                test: '–ü—Ä–æ—Ü–µ–Ω—Ç –¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100%',
                expected: '<= 100%',
                actual: `Error: ${error}`,
                passed: false,
            });
            failed++;
        }
        // –¢–µ—Å—Ç 2: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        try {
            const testFiles = [
                {
                    path: 'dist/bundle.min.js',
                    content: '!function(e){var t={};function n(r){if(t[r])return t[r].exports;',
                    lines: 1,
                },
                {
                    path: 'src/main.js',
                    content: 'import { app } from "./app.js"; app.mount("#app");',
                    lines: 1,
                },
            ];
            const result = await this.duplicationDetector.calculateDuplication(testFiles);
            const test = {
                test: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –∏—Å–∫–ª—é—á–∞—Ç—å—Å—è –∏–∑ –∞–Ω–∞–ª–∏–∑–∞',
                expected: '—Ç–æ–ª—å–∫–æ src —Ñ–∞–π–ª—ã',
                actual: `–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${result.analysisMetadata.analyzedFiles} —Ñ–∞–π–ª–æ–≤`,
                passed: result.analysisMetadata.analyzedFiles === 1,
            };
            if (test.passed)
                passed++;
            else
                failed++;
            tests.push(test);
        }
        catch (error) {
            tests.push({
                test: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –∏—Å–∫–ª—é—á–∞—Ç—å—Å—è –∏–∑ –∞–Ω–∞–ª–∏–∑–∞',
                expected: '—Ç–æ–ª—å–∫–æ src —Ñ–∞–π–ª—ã',
                actual: `Error: ${error}`,
                passed: false,
            });
            failed++;
        }
        // –¢–µ—Å—Ç 3: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞
        try {
            const testFiles = [
                {
                    path: 'file1.js',
                    content: `function hello() {
    console.log("Hello");
}`,
                    lines: 3,
                },
                {
                    path: 'file2.js',
                    content: `function hello(){console.log("Hello");}`,
                    lines: 1,
                },
            ];
            const result = await this.duplicationDetector.calculateDuplication(testFiles);
            const test = {
                test: '–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã —Å —Ä–∞–∑–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º',
                expected: '> 0% –¥—É–ø–ª–∏–∫–∞—Ü–∏–∏',
                actual: `${result.percentage}% –¥—É–ø–ª–∏–∫–∞—Ü–∏–∏`,
                passed: result.percentage > 0,
            };
            if (test.passed)
                passed++;
            else
                failed++;
            tests.push(test);
        }
        catch (error) {
            tests.push({
                test: '–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã —Å —Ä–∞–∑–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º',
                expected: '> 0% –¥—É–ø–ª–∏–∫–∞—Ü–∏–∏',
                actual: `Error: ${error}`,
                passed: false,
            });
            failed++;
        }
        return { passed, failed, details: tests };
    }
    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
     */
    async testComplexityFixes() {
        console.log('üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏...');
        const tests = [];
        let passed = 0;
        let failed = 0;
        // –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Ä–∞–∑—É–º–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        try {
            const simpleCode = `
function add(a, b) {
  return a + b;
}`;
            const result = await this.complexityCalculator.calculateComplexity('test.js', simpleCode, file_classifier_js_1.FileCategory.SOURCE);
            const test = {
                test: '–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –Ω–∏–∑–∫—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å',
                expected: '< 5',
                actual: result.metrics.cyclomatic,
                passed: result.metrics.cyclomatic < 5,
            };
            if (test.passed)
                passed++;
            else
                failed++;
            tests.push(test);
        }
        catch (error) {
            tests.push({
                test: '–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –Ω–∏–∑–∫—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å',
                expected: '< 5',
                actual: `Error: ${error}`,
                passed: false,
            });
            failed++;
        }
        // –¢–µ—Å—Ç 2: –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å—Å—è
        try {
            const minifiedCode = '!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).MyLibrary=t()}(this,function(){"use strict";var e=function(){return"Hello World"};return e});';
            const result = await this.complexityCalculator.calculateComplexity('bundle.min.js', minifiedCode, file_classifier_js_1.FileCategory.GENERATED);
            const test = {
                test: '–ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å—Å—è',
                expected: 'shouldAnalyze: false',
                actual: `shouldAnalyze: ${result.shouldAnalyze}`,
                passed: !result.shouldAnalyze,
            };
            if (test.passed)
                passed++;
            else
                failed++;
            tests.push(test);
        }
        catch (error) {
            tests.push({
                test: '–ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å—Å—è',
                expected: 'shouldAnalyze: false',
                actual: `Error: ${error}`,
                passed: false,
            });
            failed++;
        }
        // –¢–µ—Å—Ç 3: –§—É–Ω–∫—Ü–∏—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        try {
            const complexCode = `
function processData(data) {
  if (!data) {
    return null;
  }

  if (data.length > 100) {
    return data.slice(0, 100);
  }

  for (let i = 0; i < data.length; i++) {
    if (data[i] && data[i].value > 0) {
      data[i].processed = true;
    }
  }

  return data;
}`;
            const result = await this.complexityCalculator.calculateComplexity('processor.js', complexCode, file_classifier_js_1.FileCategory.SOURCE);
            const test = {
                test: '–§—É–Ω–∫—Ü–∏—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å',
                expected: '5-15',
                actual: result.metrics.cyclomatic,
                passed: result.metrics.cyclomatic >= 5 && result.metrics.cyclomatic <= 15,
            };
            if (test.passed)
                passed++;
            else
                failed++;
            tests.push(test);
        }
        catch (error) {
            tests.push({
                test: '–§—É–Ω–∫—Ü–∏—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å',
                expected: '5-15',
                actual: `Error: ${error}`,
                passed: false,
            });
            failed++;
        }
        return { passed, failed, details: tests };
    }
    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
     */
    async testClassificationFixes() {
        console.log('üìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤...');
        const tests = [];
        let passed = 0;
        let failed = 0;
        // –¢–µ—Å—Ç 1: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        try {
            const result = await this.fileClassifier.classifyFiles(['src/components/Button.tsx']);
            const classification = result.get('src/components/Button.tsx');
            const test = {
                test: '–ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ SOURCE',
                expected: file_classifier_js_1.FileCategory.SOURCE,
                actual: classification?.category,
                passed: classification?.category === file_classifier_js_1.FileCategory.SOURCE,
            };
            if (test.passed)
                passed++;
            else
                failed++;
            tests.push(test);
        }
        catch (error) {
            tests.push({
                test: '–ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ SOURCE',
                expected: file_classifier_js_1.FileCategory.SOURCE,
                actual: `Error: ${error}`,
                passed: false,
            });
            failed++;
        }
        // –¢–µ—Å—Ç 2: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        try {
            const result = await this.fileClassifier.classifyFiles(['dist/bundle.js']);
            const classification = result.get('dist/bundle.js');
            const test = {
                test: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ GENERATED',
                expected: file_classifier_js_1.FileCategory.GENERATED,
                actual: classification?.category,
                passed: classification?.category === file_classifier_js_1.FileCategory.GENERATED,
            };
            if (test.passed)
                passed++;
            else
                failed++;
            tests.push(test);
        }
        catch (error) {
            tests.push({
                test: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ GENERATED',
                expected: file_classifier_js_1.FileCategory.GENERATED,
                actual: `Error: ${error}`,
                passed: false,
            });
            failed++;
        }
        // –¢–µ—Å—Ç 3: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è vendor —Ñ–∞–π–ª–æ–≤
        try {
            const result = await this.fileClassifier.classifyFiles(['node_modules/react/index.js']);
            const classification = result.get('node_modules/react/index.js');
            const test = {
                test: 'Vendor —Ñ–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ VENDOR',
                expected: file_classifier_js_1.FileCategory.VENDOR,
                actual: classification?.category,
                passed: classification?.category === file_classifier_js_1.FileCategory.VENDOR,
            };
            if (test.passed)
                passed++;
            else
                failed++;
            tests.push(test);
        }
        catch (error) {
            tests.push({
                test: 'Vendor —Ñ–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ VENDOR',
                expected: file_classifier_js_1.FileCategory.VENDOR,
                actual: `Error: ${error}`,
                passed: false,
            });
            failed++;
        }
        return { passed, failed, details: tests };
    }
    /**
     * –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
     */
    printResults(results) {
        console.log('\n' + '='.repeat(60));
        console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô');
        console.log('='.repeat(60));
        // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        console.log('\nüîÑ –¢–µ—Å—Ç—ã –¥—É–ø–ª–∏–∫–∞—Ü–∏–∏:');
        console.log(`   ‚úÖ –ü—Ä–æ—à–ª–æ: ${results.duplicationTests.passed}`);
        console.log(`   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${results.duplicationTests.failed}`);
        console.log('\nüìä –¢–µ—Å—Ç—ã —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:');
        console.log(`   ‚úÖ –ü—Ä–æ—à–ª–æ: ${results.complexityTests.passed}`);
        console.log(`   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${results.complexityTests.failed}`);
        console.log('\nüìÅ –¢–µ—Å—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:');
        console.log(`   ‚úÖ –ü—Ä–æ—à–ª–æ: ${results.classificationTests.passed}`);
        console.log(`   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${results.classificationTests.failed}`);
        // –û–±—â–∏–π –∏—Ç–æ–≥
        console.log('\n' + '='.repeat(60));
        console.log('üéØ –û–ë–©–ò–ô –ò–¢–û–ì:');
        console.log(`   ‚úÖ –í—Å–µ–≥–æ –ø—Ä–æ—à–ª–æ: ${results.summary.totalPassed}`);
        console.log(`   ‚ùå –í—Å–µ–≥–æ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: ${results.summary.totalFailed}`);
        console.log(`   ${results.summary.success ? 'üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò!' : '‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´'}`);
        // –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        if (results.summary.totalFailed > 0) {
            console.log('\n‚ùå –î–ï–¢–ê–õ–ò –ü–†–û–í–ê–õ–ï–ù–ù–´–• –¢–ï–°–¢–û–í:');
            [
                ...results.duplicationTests.details,
                ...results.complexityTests.details,
                ...results.classificationTests.details,
            ]
                .filter(test => !test.passed)
                .forEach(test => {
                console.log(`\n   ${test.test}`);
                console.log(`   –û–∂–∏–¥–∞–ª–æ—Å—å: ${test.expected}`);
                console.log(`   –ü–æ–ª—É—á–µ–Ω–æ: ${test.actual}`);
            });
        }
        console.log('\n' + '='.repeat(60));
    }
    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
     */
    async testRealProject(projectPath) {
        console.log(`\nüî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞: ${projectPath}`);
        if (!fs.existsSync(projectPath)) {
            console.log('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }
        try {
            const analyzer = new analyzer_js_1.GoldenStandardAnalyzer();
            const result = await analyzer.analyzeProject(projectPath);
            console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:');
            console.log(`   –û–±—â–∏–π –±–∞–ª–ª: ${result.summary.percentage.toFixed(1)}%`);
            console.log(`   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: ${result.summary.criticalIssues}`);
            console.log(`   –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: ${result.duration}–º—Å`);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ–ª—å—à–µ –Ω–µ—Ç impossible –º–µ—Ç—Ä–∏–∫
            const hasImpossibleMetrics = result.components.some(component => component.score > 100);
            if (hasImpossibleMetrics) {
                console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏!');
            }
            else {
                console.log('‚úÖ –ù–µ–≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
            }
        }
        catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: ${error}`);
        }
    }
}
exports.BugFixTester = BugFixTester;
//# sourceMappingURL=bug-fix-tester.js.map