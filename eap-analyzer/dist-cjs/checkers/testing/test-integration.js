#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ EnhancedJestChecker —Å UnifiedTestingAnalyzer
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞
 */

const { UnifiedTestingAnalyzer } = require('./UnifiedTestingAnalyzer.js');

async function testIntegration() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Jest –∞–Ω–∞–ª–∏–∑–∞...\n');

  const analyzer = new UnifiedTestingAnalyzer();

  // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const mockFiles = [
    'src/components/Button.test.js',
    'src/utils/helpers.spec.js',
    'tests/setup.js',
    '__tests__/integration.test.js',
    'jest.config.js',
    'package.json',
    'src/components/Button.js',
    'src/utils/helpers.js',
  ];

  const mockPackageJson = {
    devDependencies: {
      jest: '^29.0.0',
      '@testing-library/react': '^13.0.0',
      '@testing-library/jest-dom': '^5.0.0',
    },
    scripts: {
      test: 'jest',
      'test:watch': 'jest --watch',
      'test:coverage': 'jest --coverage',
    },
  };

  try {
    console.log('üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–µ —Ñ–∞–π–ª—ã:', mockFiles.join(', '));
    console.log('üì¶ Jest –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö');
    console.log('\n‚è≥ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞...\n');

    const results = await analyzer.analyze(mockFiles, mockPackageJson);

    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${results.length}\n`);

    results.forEach((result, index) => {
      console.log(`--- –†–µ–∑—É–ª—å—Ç–∞—Ç ${index + 1} ---`);
      console.log(`ID: ${result.id}`);
      console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${result.name}`);
      console.log(`–û–ø–∏—Å–∞–Ω–∏–µ: ${result.description}`);
      console.log(`–ü—Ä–æ–π–¥–µ–Ω: ${result.passed ? '‚úÖ' : '‚ùå'}`);
      console.log(`–û—Ü–µ–Ω–∫–∞: ${result.score}/${result.maxScore}`);
      console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${result.message}`);
      console.log(`–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:`);
      result.recommendations.forEach(rec => {
        console.log(`  ‚Ä¢ ${rec}`);
      });
      console.log(`–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${result.duration}ms`);
      console.log(`–í—Ä–µ–º—è: ${result.timestamp.toISOString()}`);
      console.log('');
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ EnhancedJestChecker –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
    const jestResult = results.find(r => r.id === 'enhanced-jest-analysis');
    const unifiedResult = results.find(r => r.id === 'unified-testing-analysis');

    if (jestResult) {
      console.log('üéØ EnhancedJestChecker —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω!');
      console.log(`   - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ Jest –≤—ã–ø–æ–ª–Ω–µ–Ω`);
      console.log(`   - –û—Ü–µ–Ω–∫–∞ –æ—Ç EnhancedJestChecker: ${jestResult.score}/100`);
    }

    if (unifiedResult) {
      console.log('üîÑ UnifiedTestingAnalyzer —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
      console.log(`   - –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: ${unifiedResult.score}/100`);
      console.log(`   - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${unifiedResult.duration}ms`);
    }

    console.log('\nüéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:');
    console.error(error.message);
    console.error('Stack trace:');
    console.error(error.stack);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testIntegration();
}

module.exports = { testIntegration };
