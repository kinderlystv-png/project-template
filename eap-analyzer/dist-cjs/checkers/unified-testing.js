'use strict';
/**
 * TestingChecker - –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 *
 * Phase 4.2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è UnifiedTestingAnalyzer —Å AnalysisOrchestrator
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ProcessIsolatedAnalyzer –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
 * UnifiedTestingAnalyzer –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
 */
Object.defineProperty(exports, '__esModule', { value: true });
exports.TestingChecker = void 0;
const ProcessIsolatedAnalyzer_js_1 = require('../orchestrator/ProcessIsolatedAnalyzer.js');
class TestingChecker {
  static analyzer = new ProcessIsolatedAnalyzer_js_1.ProcessIsolatedAnalyzer();
  /**
   * –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å AnalysisOrchestrator
   */
  static async checkComponent(context) {
    const startTime = Date.now();
    try {
      console.log('üß™ –ó–∞–ø—É—Å–∫ UnifiedTestingAnalyzer —á–µ—Ä–µ–∑ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å...');
      // –ó–∞–ø—É—Å–∫–∞–µ–º UnifiedTestingAnalyzer –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
      const analysisResult = await this.analyzer.runUnifiedAnalysis(context);
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç UnifiedTestingAnalyzer –≤ —Ñ–æ—Ä–º–∞—Ç CheckResult[]
      const checkResults = this.convertToCheckResults(analysisResult);
      // –§–æ—Ä–º–∏—Ä—É–µ–º ComponentResult –≤ —Å—Ç–∏–ª–µ EMTChecker
      return this.createComponentResult(checkResults, startTime);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ TestingChecker:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
      return this.createErrorResult(error, startTime);
    }
  }
  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç UnifiedTestingAnalyzer –≤ CheckResult[]
   */
  static convertToCheckResults(analysisResult) {
    const results = [];
    if (!analysisResult) {
      return [
        {
          check: {
            id: 'testing.unified.error',
            name: 'Unified Testing Analysis',
            description: '–ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω - –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞',
            category: 'testing',
            score: 100,
            level: 'high',
            tags: ['unified', 'error'],
          },
          passed: false,
          score: 0,
          maxScore: 100,
          details: '–ê–Ω–∞–ª–∏–∑ –Ω–µ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω',
          duration: 0,
        },
      ];
    }
    try {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
      if (analysisResult.summary) {
        const summary = analysisResult.summary;
        // –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        results.push({
          check: {
            id: 'testing.unified.overall',
            name: 'Unified Testing Overall',
            description: '–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
            category: 'testing',
            score: 100,
            level: 'high',
            tags: ['unified', 'overall'],
          },
          passed: summary.score >= 70, // –ü–æ—Ä–æ–≥ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
          score: summary.score || 0,
          maxScore: 100,
          details: `–û–±—â–∏–π –±–∞–ª–ª: ${summary.score}%`,
          duration: summary.executionTime || 0,
        });
        // –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞
        if (summary.coverage !== undefined) {
          results.push({
            check: {
              id: 'testing.unified.coverage',
              name: 'Code Coverage',
              description: '–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞–º–∏',
              category: 'testing',
              score: 100,
              level: 'high',
              tags: ['coverage', 'quality'],
            },
            passed: summary.coverage >= 75,
            score: summary.coverage || 0,
            maxScore: 100,
            details: `–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞: ${summary.coverage}%`,
            duration: 0,
          });
        }
        // –ö–∞—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤
        if (summary.testQuality !== undefined) {
          results.push({
            check: {
              id: 'testing.unified.quality',
              name: 'Test Quality',
              description: '–ö–∞—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–¥–∞',
              category: 'testing',
              score: 100,
              level: 'medium',
              tags: ['quality', 'tests'],
            },
            passed: summary.testQuality >= 70,
            score: summary.testQuality || 0,
            maxScore: 100,
            details: `–ö–∞—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤: ${summary.testQuality}%`,
            duration: 0,
          });
        }
      }
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      if (analysisResult.details) {
        const details = analysisResult.details;
        // –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ —Ç–µ—Å—Ç–æ–≤
        if (details.testFiles && details.testFiles.length > 0) {
          results.push({
            check: {
              id: 'testing.unified.files',
              name: 'Test Files Analysis',
              description: '–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ —Ç–µ—Å—Ç–æ–≤',
              category: 'testing',
              score: 100,
              level: 'medium',
              tags: ['files', 'structure'],
            },
            passed: details.testFiles.length > 0,
            score: Math.min(details.testFiles.length * 10, 100),
            maxScore: 100,
            details: `–ù–∞–π–¥–µ–Ω–æ ${details.testFiles.length} —Ñ–∞–π–ª–æ–≤ —Ç–µ—Å—Ç–æ–≤`,
            duration: 0,
          });
        }
        // –ê–Ω–∞–ª–∏–∑ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤
        if (details.frameworks && Object.keys(details.frameworks).length > 0) {
          const frameworkCount = Object.keys(details.frameworks).length;
          results.push({
            check: {
              id: 'testing.unified.frameworks',
              name: 'Testing Frameworks',
              description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
              category: 'testing',
              score: 100,
              level: 'medium',
              tags: ['frameworks', 'tools'],
            },
            passed: frameworkCount > 0,
            score: Math.min(frameworkCount * 25, 100),
            maxScore: 100,
            details: `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${frameworkCount} —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤: ${Object.keys(details.frameworks).join(', ')}`,
            duration: 0,
          });
        }
      }
      // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π
      if (results.length === 0) {
        results.push({
          check: {
            id: 'testing.unified.basic',
            name: 'Basic Testing Analysis',
            description: '–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω',
            category: 'testing',
            score: 100,
            level: 'medium',
            tags: ['basic', 'success'],
          },
          passed: true,
          score: 50,
          maxScore: 100,
          details: '–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
          duration: 0,
        });
      }
    } catch (conversionError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', conversionError);
      results.push({
        check: {
          id: 'testing.unified.conversion.error',
          name: 'Result Conversion Error',
          description: '–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞',
          category: 'testing',
          score: 100,
          level: 'high',
          tags: ['error', 'conversion'],
        },
        passed: false,
        score: 0,
        maxScore: 100,
        details: `–û—à–∏–±–∫–∞: ${conversionError.message}`,
        duration: 0,
      });
    }
    return results;
  }
  /**
   * –°–æ–∑–¥–∞–µ—Ç ComponentResult –≤ —Ñ–æ—Ä–º–∞—Ç–µ AnalysisOrchestrator
   */
  static createComponentResult(checkResults, startTime) {
    const passed = checkResults.filter(r => r.passed);
    const failed = checkResults.filter(r => !r.passed);
    const score = passed.reduce((sum, r) => sum + r.score, 0);
    const maxScore = checkResults.reduce((sum, r) => sum + r.maxScore, 0);
    const percentage = maxScore > 0 ? Math.round((score / maxScore) * 100) : 0;
    return {
      component: {
        name: 'Unified Testing Analysis',
        description: '–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞',
        weight: 8, // –≤—ã—Å–æ–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        checks: checkResults.map(r => r.check),
        critical: true,
      },
      score,
      maxScore,
      percentage,
      passed,
      failed,
      warnings: [],
      recommendations: this.generateRecommendations(failed),
      duration: Date.now() - startTime,
    };
  }
  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
   */
  static createErrorResult(error, startTime) {
    const errorCheck = {
      id: 'testing.unified.fatal.error',
      name: 'Testing Analysis Fatal Error',
      description: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
      category: 'testing',
      score: 100,
      level: 'high',
      tags: ['error', 'fatal'],
    };
    const errorResult = {
      check: errorCheck,
      passed: false,
      score: 0,
      maxScore: 100,
      details: `–û—à–∏–±–∫–∞: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
      duration: Date.now() - startTime,
    };
    return {
      component: {
        name: 'Unified Testing Analysis (Error)',
        description: '–ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π',
        weight: 1,
        checks: [errorCheck],
        critical: true,
      },
      score: 0,
      maxScore: 100,
      percentage: 0,
      passed: [],
      failed: [errorResult],
      warnings: [],
      recommendations: [
        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π UnifiedTestingAnalyzer',
        '–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø—É—Ç–µ–π –∫ –º–æ–¥—É–ª—è–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏',
      ],
      duration: Date.now() - startTime,
    };
  }
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ failed checks
   */
  static generateRecommendations(failedChecks) {
    const recommendations = [];
    for (const check of failedChecks) {
      switch (check.check.id) {
        case 'testing.unified.overall':
          recommendations.push('–£–ª—É—á—à–∏—Ç–µ –æ–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∏ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤');
          break;
        case 'testing.unified.coverage':
          recommendations.push('–£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞–º–∏ –¥–æ 75%+');
          break;
        case 'testing.unified.quality':
          recommendations.push('–£–ª—É—á—à–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–¥–∞');
          break;
        case 'testing.unified.files':
          recommendations.push('–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ñ–∞–π–ª–æ–≤ —Ç–µ—Å—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç');
          break;
        case 'testing.unified.frameworks':
          recommendations.push('–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
          break;
        default:
          recommendations.push(`–ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—É: ${check.check.name}`);
      }
    }
    if (recommendations.length === 0) {
      recommendations.push('–°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    }
    return recommendations;
  }
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
   */
  static getPerformanceStats() {
    return (
      this.analyzer['stats'] || {
        totalRuns: 0,
        successfulRuns: 0,
        averageExecutionTime: 0,
        lastExecutionTime: 0,
      }
    );
  }
}
exports.TestingChecker = TestingChecker;
//# sourceMappingURL=unified-testing.js.map
