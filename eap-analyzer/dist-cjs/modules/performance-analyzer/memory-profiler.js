"use strict";
/**
 * –ü—Ä–æ—Ñ–∞–π–ª–µ—Ä –ø–∞–º—è—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
 * –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryProfiler = void 0;
class MemoryProfiler {
    snapshots = [];
    isActive = false;
    intervalId = null;
    SNAPSHOT_INTERVAL = 500; // 500ms
    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
     */
    startProfiling() {
        if (this.isActive) {
            return;
        }
        this.isActive = true;
        this.snapshots = [];
        // –§–æ—Ä—Å–∏—Ä—É–µ–º —Å–±–æ—Ä–∫—É –º—É—Å–æ—Ä–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
        if (global.gc) {
            global.gc();
        }
        // –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–Ω–∏–º–æ–∫
        this.takeSnapshot('initialization');
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —Å–Ω–∏–º–∫–∏
        this.intervalId = setInterval(() => {
            this.takeSnapshot('runtime');
        }, this.SNAPSHOT_INTERVAL);
    }
    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
     */
    stopProfiling() {
        if (!this.isActive) {
            return;
        }
        this.isActive = false;
        if (this.intervalId) {
            clearInterval(this.intervalId);
            this.intervalId = null;
        }
        // –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–Ω–∏–º–æ–∫
        this.takeSnapshot('finalization');
    }
    /**
     * –î–µ–ª–∞–µ—Ç —Å–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–º—è—Ç–∏
     */
    takeSnapshot(phase) {
        const memUsage = process.memoryUsage();
        const snapshot = {
            timestamp: Date.now(),
            heapUsed: Math.round((memUsage.heapUsed / 1024 / 1024) * 100) / 100, // MB
            heapTotal: Math.round((memUsage.heapTotal / 1024 / 1024) * 100) / 100, // MB
            external: Math.round((memUsage.external / 1024 / 1024) * 100) / 100, // MB
            rss: Math.round((memUsage.rss / 1024 / 1024) * 100) / 100, // MB
            arrayBuffers: Math.round((memUsage.arrayBuffers / 1024 / 1024) * 100) / 100, // MB
            phase,
        };
        this.snapshots.push(snapshot);
    }
    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–∞–º—è—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
     */
    analyzeProfile() {
        if (this.snapshots.length === 0) {
            return this.getEmptyResult();
        }
        const heapValues = this.snapshots.map(s => s.heapUsed);
        const peakMemory = Math.max(...heapValues);
        const averageMemory = Math.round((heapValues.reduce((sum, val) => sum + val, 0) / heapValues.length) * 100) / 100;
        const memoryLeaks = this.detectMemoryLeaks();
        const recommendations = this.generateRecommendations(peakMemory, averageMemory, memoryLeaks);
        const efficiency = this.calculateEfficiency(peakMemory, averageMemory, memoryLeaks);
        return {
            snapshots: this.snapshots,
            peakMemory,
            averageMemory,
            memoryLeaks,
            recommendations,
            efficiency,
        };
    }
    /**
     * –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏
     */
    detectMemoryLeaks() {
        const leaks = [];
        if (this.snapshots.length < 3) {
            return leaks;
        }
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã –ø–æ —Ñ–∞–∑–∞–º
        const phases = [...new Set(this.snapshots.map(s => s.phase))];
        for (const phase of phases) {
            const phaseSnapshots = this.snapshots.filter(s => s.phase === phase);
            if (phaseSnapshots.length < 2) {
                continue;
            }
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏
            const firstSnapshot = phaseSnapshots[0];
            const lastSnapshot = phaseSnapshots[phaseSnapshots.length - 1];
            const timeSpanSeconds = (lastSnapshot.timestamp - firstSnapshot.timestamp) / 1000;
            const memoryGrowth = lastSnapshot.heapUsed - firstSnapshot.heapUsed;
            const growthRate = timeSpanSeconds > 0 ? memoryGrowth / timeSpanSeconds : 0;
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å —É—Ç–µ—á–∫–∏
            let severity = 'low';
            let description = `–§–∞–∑–∞ ${phase}: –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏`;
            if (growthRate > 10) {
                severity = 'critical';
                description = `–§–∞–∑–∞ ${phase}: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —É—Ç–µ—á–∫–∞ –ø–∞–º—è—Ç–∏! –†–æ—Å—Ç ${growthRate.toFixed(2)} –ú–ë/—Å`;
            }
            else if (growthRate > 5) {
                severity = 'high';
                description = `–§–∞–∑–∞ ${phase}: —Å–µ—Ä—å–µ–∑–Ω–∞—è —É—Ç–µ—á–∫–∞ –ø–∞–º—è—Ç–∏. –†–æ—Å—Ç ${growthRate.toFixed(2)} –ú–ë/—Å`;
            }
            else if (growthRate > 2) {
                severity = 'medium';
                description = `–§–∞–∑–∞ ${phase}: —É–º–µ—Ä–µ–Ω–Ω–∞—è —É—Ç–µ—á–∫–∞ –ø–∞–º—è—Ç–∏. –†–æ—Å—Ç ${growthRate.toFixed(2)} –ú–ë/—Å`;
            }
            else if (growthRate > 0.5) {
                severity = 'low';
                description = `–§–∞–∑–∞ ${phase}: –Ω–µ–±–æ–ª—å—à–æ–π —Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏. –†–æ—Å—Ç ${growthRate.toFixed(2)} –ú–ë/—Å`;
            }
            if (growthRate > 0.5) {
                leaks.push({
                    phase,
                    growthRate: Math.round(growthRate * 100) / 100,
                    severity,
                    description,
                });
            }
        }
        return leaks;
    }
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏
     */
    generateRecommendations(peak, average, leaks) {
        const recommendations = [];
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏–∫–æ–≤–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        if (peak > 1000) {
            recommendations.push('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ (>1GB). –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö —á–∞—Å—Ç—è–º–∏.');
        }
        else if (peak > 500) {
            recommendations.push('‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ (>500MB). –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
        }
        else if (peak > 200) {
            recommendations.push('üí° –£–º–µ—Ä–µ–Ω–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏. –ú–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.');
        }
        else {
            recommendations.push('‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é. –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤ –Ω–æ—Ä–º–µ.');
        }
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ç–µ—á–∫–∞–º
        const criticalLeaks = leaks.filter(l => l.severity === 'critical');
        const highLeaks = leaks.filter(l => l.severity === 'high');
        if (criticalLeaks.length > 0) {
            recommendations.push('üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –£–¢–ï–ß–ö–ò –ü–ê–ú–Ø–¢–ò! –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ü–∏–∫–ª—ã –∏ –∑–∞–º—ã–∫–∞–Ω–∏—è.');
        }
        if (highLeaks.length > 0) {
            recommendations.push('üî¥ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—á–∏—Å—Ç–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤.');
        }
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if (average / peak < 0.3) {
            recommendations.push('üìä –ù–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—É–ª—ã –æ–±—ä–µ–∫—Ç–æ–≤.');
        }
        return recommendations;
    }
    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
     */
    calculateEfficiency(peak, average, leaks) {
        let score = 100;
        // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –≤—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ
        if (peak > 1000)
            score -= 40;
        else if (peak > 500)
            score -= 25;
        else if (peak > 200)
            score -= 10;
        // –®—Ç—Ä–∞—Ñ—ã –∑–∞ —É—Ç–µ—á–∫–∏
        const criticalLeaks = leaks.filter(l => l.severity === 'critical').length;
        const highLeaks = leaks.filter(l => l.severity === 'high').length;
        const mediumLeaks = leaks.filter(l => l.severity === 'medium').length;
        score -= criticalLeaks * 30;
        score -= highLeaks * 15;
        score -= mediumLeaks * 5;
        // –®—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        const efficiency = peak > 0 ? average / peak : 1;
        if (efficiency < 0.3)
            score -= 15;
        else if (efficiency < 0.5)
            score -= 8;
        score = Math.max(0, score);
        let grade;
        let description;
        if (score >= 90) {
            grade = 'A';
            description = '–û—Ç–ª–∏—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é';
        }
        else if (score >= 80) {
            grade = 'B';
            description = '–•–æ—Ä–æ—à–µ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é';
        }
        else if (score >= 70) {
            grade = 'C';
            description = '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é';
        }
        else if (score >= 60) {
            grade = 'D';
            description = '–ü–ª–æ—Ö–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é';
        }
        else {
            grade = 'F';
            description = '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞–º—è—Ç—å—é';
        }
        return { score, grade, description };
    }
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
     */
    getEmptyResult() {
        return {
            snapshots: [],
            peakMemory: 0,
            averageMemory: 0,
            memoryLeaks: [],
            recommendations: ['–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–æ—Å—å'],
            efficiency: {
                score: 0,
                grade: 'F',
                description: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞',
            },
        };
    }
    /**
     * –§–æ—Ä—Å–∏—Ä—É–µ—Ç —Å–±–æ—Ä–∫—É –º—É—Å–æ—Ä–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
     */
    forceGC() {
        if (global.gc) {
            global.gc();
            return true;
        }
        return false;
    }
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
     */
    getCurrentMemoryUsage() {
        const memUsage = process.memoryUsage();
        return {
            timestamp: Date.now(),
            heapUsed: Math.round((memUsage.heapUsed / 1024 / 1024) * 100) / 100,
            heapTotal: Math.round((memUsage.heapTotal / 1024 / 1024) * 100) / 100,
            external: Math.round((memUsage.external / 1024 / 1024) * 100) / 100,
            rss: Math.round((memUsage.rss / 1024 / 1024) * 100) / 100,
            arrayBuffers: Math.round((memUsage.arrayBuffers / 1024 / 1024) * 100) / 100,
            phase: 'current',
        };
    }
}
exports.MemoryProfiler = MemoryProfiler;
//# sourceMappingURL=memory-profiler.js.map