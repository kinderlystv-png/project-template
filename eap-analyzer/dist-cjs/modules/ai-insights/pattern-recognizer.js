"use strict";
/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –ò–ò-—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –∫–æ–¥–µ
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PatternRecognizer = void 0;
const pattern_matchers_1 = require("./pattern-matchers");
const pattern_definitions_1 = require("./pattern-definitions");
class PatternRecognizer {
    CONFIDENCE_THRESHOLD = 50; // –°–Ω–∏–∂–µ–Ω –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
    PATTERN_WEIGHTS = {
        architectural: 1.0,
        design: 0.8,
        antipattern: 1.2,
        performance: 0.9,
        security: 1.3,
    };
    context;
    constructor() {
        this.context = {
            files: [],
            directories: [],
            imports: new Map(),
            classes: new Map(),
            functions: new Map(),
            fileContents: new Map(),
            projectSize: 0,
        };
    }
    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏
     */
    async analyzePatterns(files) {
        console.log(`ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ ${files.length} —Ñ–∞–π–ª–∞—Ö —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏...`);
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        this.updateContext(files);
        const detectedPatterns = [];
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏
        detectedPatterns.push(...(await this.analyzePatternGroup('architectural', pattern_definitions_1.ARCHITECTURAL_PATTERNS)));
        detectedPatterns.push(...(await this.analyzePatternGroup('design', pattern_definitions_1.DESIGN_PATTERNS)));
        detectedPatterns.push(...(await this.analyzePatternGroup('antipattern', pattern_definitions_1.ANTIPATTERNS)));
        detectedPatterns.push(...(await this.analyzePatternGroup('security', pattern_definitions_1.SECURITY_PATTERNS)));
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        const significantPatterns = detectedPatterns.filter(p => p.confidence >= this.CONFIDENCE_THRESHOLD);
        const analysis = this.analyzeResults(significantPatterns);
        console.log(`‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${significantPatterns.length} –∑–Ω–∞—á–∏–º—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (—É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)`);
        return {
            detectedPatterns: significantPatterns,
            ...analysis,
        };
    }
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–π–ª–æ–≤
     */
    updateContext(files) {
        this.context.files = files.map(f => f.path);
        this.context.projectSize = files.length;
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        const directories = new Set();
        files.forEach(f => {
            const pathParts = f.path.split(/[\/\\]/);
            for (let i = 1; i < pathParts.length; i++) {
                directories.add(pathParts.slice(0, i).join('/'));
            }
        });
        this.context.directories = Array.from(directories);
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Ñ–∞–π–ª–æ–≤
        this.context.fileContents.clear();
        files.forEach(f => {
            this.context.fileContents.set(f.path, f.content);
        });
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        this.context.imports.clear();
        files.forEach(f => {
            const imports = this.extractImports(f.content);
            if (imports.length > 0) {
                this.context.imports.set(f.path, imports);
            }
        });
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏
        this.context.classes.clear();
        this.context.functions.clear();
        files.forEach(f => {
            f.classes.forEach(c => {
                this.context.classes.set(c.name, {
                    name: c.name,
                    methods: Array.from({ length: c.methods }, (_, i) => `method${i}`),
                    properties: Array.from({ length: c.properties }, (_, i) => `prop${i}`),
                    extends: c.inheritance[0],
                    implements: c.interfaces,
                });
            });
            f.functions.forEach(fn => {
                this.context.functions.set(fn.name, {
                    name: fn.name,
                    parameters: fn.parameters,
                    async: fn.async,
                    generator: false,
                    complexity: fn.complexity,
                });
            });
        });
    }
    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥—Ä—É–ø–ø—É –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
     */
    async analyzePatternGroup(groupType, patterns) {
        const results = [];
        for (const patternDef of patterns) {
            const result = this.analyzePatternDefinition(patternDef);
            if (result) {
                results.push(result);
            }
        }
        return results;
    }
    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
     */
    analyzePatternDefinition(definition) {
        const evidence = [];
        const matchedConditions = [];
        let totalScore = 0;
        let matchedMatchers = 0;
        // –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ç—á–µ—Ä
        for (const matcher of definition.matchers) {
            const score = pattern_matchers_1.PatternMatchers.matchCombined(this.context, [matcher]);
            if (score > 0) {
                matchedMatchers++;
                totalScore += score * matcher.weight;
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ
                const evidenceText = this.generateEvidence(matcher, score);
                if (evidenceText) {
                    evidence.push(evidenceText);
                    matchedConditions.push(matcher.type);
                }
            }
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        if (matchedMatchers < definition.minMatches) {
            return null;
        }
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        let confidence = definition.baseConfidence * totalScore;
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        const appliedModifiers = [];
        if (definition.confidenceModifiers) {
            for (const modifier of definition.confidenceModifiers) {
                try {
                    if (modifier.condition(this.context)) {
                        confidence *= modifier.modifier;
                        appliedModifiers.push({
                            description: modifier.description,
                            impact: modifier.modifier,
                        });
                        evidence.push(`‚úì ${modifier.description}`);
                    }
                }
                catch (error) {
                    console.warn(`Confidence modifier evaluation error: ${error}`);
                }
            }
        }
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 0-100
        confidence = Math.max(0, Math.min(100, confidence * 100));
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const pattern = {
            id: definition.id,
            name: definition.name,
            type: definition.category,
            confidence: Math.round(confidence),
            description: definition.description,
            impact: this.determineImpact(definition.category, confidence),
            locations: this.generateLocations(evidence),
            recommendation: this.generateRecommendation(definition),
            examples: this.generateExamples(definition),
            evidence,
            matchDetails: {
                matchedConditions: matchedMatchers,
                totalConditions: definition.matchers.length,
                criticalMatches: matchedConditions,
                confidenceModifiers: appliedModifiers,
            },
        };
        return pattern;
    }
    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
     */
    determineImpact(category, confidence) {
        if (category === 'security') {
            return confidence > 80 ? 'critical' : confidence > 60 ? 'high' : 'medium';
        }
        if (category === 'antipattern') {
            return confidence > 85 ? 'high' : confidence > 65 ? 'medium' : 'low';
        }
        if (category === 'architectural') {
            return confidence > 80 ? 'medium' : 'low';
        }
        return 'low';
    }
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
     */
    generateEvidence(matcher, score) {
        const confidence = Math.round(score * 100);
        switch (matcher.type) {
            case 'file':
                return `–§–∞–π–ª–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É (${confidence}%)`;
            case 'directory':
                return `–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω (${confidence}%)`;
            case 'content':
                return `–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ (${confidence}%)`;
            case 'import':
                return `–ò–º–ø–æ—Ä—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É (${confidence}%)`;
            case 'class':
                return `–ù–∞–π–¥–µ–Ω—ã –∫–ª–∞—Å—Å—ã, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ (${confidence}%)`;
            case 'function':
                return `–§—É–Ω–∫—Ü–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É (${confidence}%)`;
            default:
                return `–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–∏–∑–Ω–∞–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ (${confidence}%)`;
        }
    }
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
     */
    generateLocations(evidence) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–∫–∞—Ü–∏–π
        const locations = [];
        const files = Array.from(this.context.files).slice(0, 3);
        files.forEach((filePath, index) => {
            locations.push({
                filePath,
                startLine: 1,
                endLine: 10,
                codeSnippet: `// Pattern evidence ${index + 1}`,
                context: evidence[index] || 'Pattern detected',
            });
        });
        return locations;
    }
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
     */
    generateRecommendation(definition) {
        const category = definition.category;
        const name = definition.name;
        if (category === 'architectural') {
            return `–•–æ—Ä–æ—à–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ (${name}). –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª–µ–¥–æ–≤–∞—Ç—å —ç—Ç–æ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É.`;
        }
        if (category === 'design') {
            return `–ü–∞—Ç—Ç–µ—Ä–Ω –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (${name}) –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.`;
        }
        if (category === 'antipattern') {
            return `–í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–Ω—Ç–∏–ø–∞—Ç—Ç–µ—Ä–Ω (${name}). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥.`;
        }
        if (category === 'security') {
            return `–ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–±–ª–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (${name}). –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.`;
        }
        return `–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω: ${name}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º.`;
    }
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
     */
    generateExamples(definition) {
        const examples = [];
        definition.matchers.forEach(matcher => {
            if (matcher.type === 'class') {
                examples.push(`–ö–ª–∞—Å—Å—ã —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º ${matcher.type}`);
            }
            else if (matcher.type === 'file') {
                examples.push(`–§–∞–π–ª—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ`);
            }
            else {
                examples.push(`–ü—Ä–∏–∑–Ω–∞–∫–∏ –≤ ${matcher.type}`);
            }
        });
        return examples.slice(0, 3);
    }
    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
     */
    extractImports(content) {
        const imports = [];
        // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤
        const importRegex = /import\s+(?:[\w\s{},*]+\s+from\s+)?['"]([^'"]+)['"]/g;
        const requireRegex = /require\s*\(\s*['"]([^'"]+)['"]\s*\)/g;
        let match;
        while ((match = importRegex.exec(content)) !== null) {
            imports.push(match[1]);
        }
        while ((match = requireRegex.exec(content)) !== null) {
            imports.push(match[1]);
        }
        return imports;
    } /**
     * –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     */
    async detectArchitecturalPatterns(files) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
        this.updateContext(files);
        return this.analyzePatternGroup('architectural', pattern_definitions_1.ARCHITECTURAL_PATTERNS);
    }
    /**
     * –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    async detectDesignPatterns(files) {
        return this.analyzePatternGroup('design', pattern_definitions_1.DESIGN_PATTERNS);
    }
    /**
     * –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –∞–Ω—Ç–∏–ø–∞—Ç—Ç–µ—Ä–Ω—ã
     */
    async detectAntipatterns(files) {
        return this.analyzePatternGroup('antipattern', pattern_definitions_1.ANTIPATTERNS);
    }
    /**
     * –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    async detectPerformancePatterns(files) {
        const patterns = [];
        // N+1 Query Problem (—É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ)
        const nPlusOnePattern = this.detectNPlusOneQueries(files);
        if (nPlusOnePattern)
            patterns.push(nPlusOnePattern);
        // Memory Leaks (—É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ)
        const memoryLeakPattern = this.detectMemoryLeaks(files);
        if (memoryLeakPattern)
            patterns.push(memoryLeakPattern);
        // Inefficient Loops (—É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ)
        const inefficientLoopsPattern = this.detectInefficientLoops(files);
        if (inefficientLoopsPattern)
            patterns.push(inefficientLoopsPattern);
        return patterns;
    }
    /**
     * –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
     */
    async detectSecurityPatterns(files) {
        return this.analyzePatternGroup('security', pattern_definitions_1.SECURITY_PATTERNS);
    }
    /**
     * –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω MVC
     */
    detectMVCPattern(files) {
        const controllers = files.filter(f => f.path.includes('controller') ||
            f.path.includes('route') ||
            f.content.includes('app.get(') ||
            f.content.includes('app.post('));
        const models = files.filter(f => f.path.includes('model') ||
            f.path.includes('schema') ||
            f.content.includes('mongoose.Schema') ||
            f.content.includes('class.*Model'));
        const views = files.filter(f => f.path.includes('view') ||
            f.path.includes('template') ||
            f.path.includes('component') ||
            f.path.endsWith('.jsx') ||
            f.path.endsWith('.vue'));
        if (controllers.length === 0 && models.length === 0 && views.length === 0) {
            return null;
        }
        const confidence = Math.min(100, controllers.length * 20 + models.length * 25 + views.length * 15);
        if (confidence < 40)
            return null;
        return {
            id: 'mvc-pattern',
            name: 'Model-View-Controller (MVC)',
            type: 'architectural',
            confidence,
            description: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω MVC —Ä–∞–∑–¥–µ–ª—è–µ—Ç –ª–æ–≥–∏–∫—É –Ω–∞ –º–æ–¥–µ–ª–∏, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã',
            impact: 'medium',
            locations: [
                ...controllers.slice(0, 3).map(f => this.createPatternLocation(f, 'Controller')),
                ...models.slice(0, 3).map(f => this.createPatternLocation(f, 'Model')),
                ...views.slice(0, 3).map(f => this.createPatternLocation(f, 'View')),
            ],
            recommendation: '–•–æ—Ä–æ—à–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è –æ—Å–Ω–æ–≤–∞. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —á–µ—Ç–∫–æ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É —Å–ª–æ—è–º–∏.',
            examples: [
                'Controllers: –æ–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤',
                'Models: –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –∏ –¥–∞–Ω–Ω—ã–µ',
                'Views: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
            ],
        };
    }
    /**
     * –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
     */
    detectMicroservicesPattern(files) {
        const serviceIndicators = files.filter(f => f.path.includes('service') ||
            f.content.includes('microservice') ||
            f.content.includes('api/v') ||
            f.content.includes('express()') ||
            f.content.includes('fastify()'));
        const dockerFiles = files.filter(f => f.path.includes('Dockerfile') || f.path.includes('docker-compose'));
        const apiGateways = files.filter(f => f.content.includes('proxy') || f.content.includes('gateway') || f.content.includes('nginx'));
        const confidence = Math.min(100, serviceIndicators.length * 15 + dockerFiles.length * 25 + apiGateways.length * 30);
        if (confidence < 50)
            return null;
        return {
            id: 'microservices-pattern',
            name: 'Microservices Architecture',
            type: 'architectural',
            confidence,
            description: '–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã',
            impact: 'high',
            locations: serviceIndicators
                .slice(0, 5)
                .map(f => this.createPatternLocation(f, 'Microservice')),
            recommendation: '–û—Ç–ª–∏—á–Ω–∞—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏.',
            examples: [
                '–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ API',
                '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è —Å Docker',
                'API Gateway –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏',
            ],
        };
    }
    /**
     * –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç —Å–ª–æ–∏—Å—Ç—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
     */
    detectLayeredArchitecture(files) {
        const layers = {
            presentation: files.filter(f => f.path.includes('ui/') || f.path.includes('frontend/') || f.path.includes('components/')),
            business: files.filter(f => f.path.includes('business/') || f.path.includes('logic/') || f.path.includes('services/')),
            data: files.filter(f => f.path.includes('data/') || f.path.includes('dao/') || f.path.includes('repository/')),
        };
        const layerCount = Object.values(layers).filter(layer => layer.length > 0).length;
        if (layerCount < 2)
            return null;
        const confidence = Math.min(100, layerCount * 25 +
            Object.values(layers).reduce((sum, layer) => sum + Math.min(layer.length, 5), 0) * 5);
        return {
            id: 'layered-architecture',
            name: 'Layered Architecture',
            type: 'architectural',
            confidence,
            description: '–°–ª–æ–∏—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å —á–µ—Ç–∫–∏–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º —É—Ä–æ–≤–Ω–µ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏',
            impact: 'medium',
            locations: Object.entries(layers)
                .filter(([_, files]) => files.length > 0)
                .map(([layer, files]) => this.createPatternLocation(files[0], `${layer} layer`)),
            recommendation: '–•–æ—Ä–æ—à–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞ –ø–æ —Å–ª–æ—è–º. –ò–∑–±–µ–≥–∞–π—Ç–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É —Å–ª–æ—è–º–∏.',
            examples: [
                'Presentation Layer: UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã',
                'Business Layer: –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞',
                'Data Layer: —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏',
            ],
        };
    }
    /**
     * –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
     */
    detectComponentPattern(files) {
        const componentFiles = files.filter(f => f.path.includes('component') ||
            f.path.endsWith('.jsx') ||
            f.path.endsWith('.tsx') ||
            f.path.endsWith('.vue') ||
            f.content.includes('React.Component') ||
            f.content.includes('Vue.component'));
        if (componentFiles.length < 3)
            return null;
        const confidence = Math.min(100, componentFiles.length * 8);
        return {
            id: 'component-pattern',
            name: 'Component-Based Architecture',
            type: 'architectural',
            confidence,
            description: '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º–∏ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏',
            impact: 'medium',
            locations: componentFiles.slice(0, 5).map(f => this.createPatternLocation(f, 'Component')),
            recommendation: '–û—Ç–ª–∏—á–Ω–∞—è –º–æ–¥—É–ª—å–Ω–æ—Å—Ç—å. –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–∞–∑–º–µ—Ä–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –∏–∑–±–µ–≥–∞–π—Ç–µ –≥–ª—É–±–æ–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏.',
            examples: [
                '–ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã',
                '–ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è –ª–æ–≥–∏–∫–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è',
                '–ö–æ–º–ø–æ–∑–∏—Ü–∏—è –≤–º–µ—Å—Ç–æ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è',
            ],
        };
    }
    /**
     * –°–æ–∑–¥–∞–µ—Ç –ª–æ–∫–∞—Ü–∏—é –ø–∞—Ç—Ç–µ—Ä–Ω–∞
     */
    createPatternLocation(file, context) {
        const lines = file.content.split('\n');
        const snippet = lines.slice(0, 5).join('\n');
        return {
            filePath: file.path,
            startLine: 1,
            endLine: Math.min(5, lines.length),
            codeSnippet: snippet,
            context,
        };
    }
    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
     */
    analyzeResults(patterns) {
        const antipatterns = patterns.filter(p => p.type === 'antipattern');
        const securityConcerns = patterns.filter(p => p.type === 'security');
        const performanceIssues = patterns.filter(p => p.type === 'performance');
        const goodPatterns = patterns.filter(p => ['architectural', 'design'].includes(p.type));
        // –†–∞—Å—á–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–≥–æ —Å—á–µ—Ç–∞
        const architecturalScore = Math.max(0, 100 -
            antipatterns.length * 15 -
            securityConcerns.length * 25 -
            performanceIssues.length * 10 +
            goodPatterns.length * 5);
        // –†–∞—Å—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∏–∑–∞–π–Ω–∞
        const designQuality = Math.max(0, 100 -
            antipatterns.filter(p => p.impact === 'high' || p.impact === 'critical').length * 20 -
            patterns.filter(p => p.confidence < 70).length * 5);
        // –û–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        const totalConfidence = patterns.length > 0
            ? patterns.reduce((sum, p) => sum + p.confidence, 0) / patterns.length
            : 0;
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        const architecturalPatterns = patterns.filter(p => p.type === 'architectural');
        const predominantArchitecture = architecturalPatterns.length > 0
            ? architecturalPatterns.reduce((prev, current) => current.confidence > prev.confidence ? current : prev).name
            : '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞';
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        const recommendations = this.generateSummaryRecommendations(patterns, architecturalScore, designQuality);
        return {
            architecturalScore: Math.round(architecturalScore),
            designQuality: Math.round(designQuality),
            antipatternCount: antipatterns.length,
            securityConcerns,
            performanceIssues,
            recommendations,
            summary: {
                goodPatterns: goodPatterns.length,
                problematicPatterns: antipatterns.length + securityConcerns.length + performanceIssues.length,
                totalConfidence: Math.round(totalConfidence),
                predominantArchitecture,
            },
        };
    }
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
     */
    generateSummaryRecommendations(patterns, architecturalScore, designQuality) {
        const recommendations = [];
        // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        const criticalPatterns = patterns.filter(p => p.impact === 'critical');
        if (criticalPatterns.length > 0) {
            recommendations.push(`üö® –ö–†–ò–¢–ò–ß–ù–û: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${criticalPatterns.length} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º —Ç—Ä–µ–±—É—é—â–∏—Ö –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è!`);
        }
        // –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (architecturalScore < 50) {
            recommendations.push('üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–π –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥.');
        }
        else if (architecturalScore < 70) {
            recommendations.push('üîß –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —É–ª—É—á—à–µ–Ω–∏—è—Ö. –£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –∞–Ω—Ç–∏–ø–∞—Ç—Ç–µ—Ä–Ω—ã.');
        }
        else {
            recommendations.push('‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª–µ–¥–æ–≤–∞—Ç—å –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º.');
        }
        // –î–∏–∑–∞–π–Ω —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (designQuality < 60) {
            recommendations.push('üìê –ö–∞—á–µ—Å—Ç–≤–æ –¥–∏–∑–∞–π–Ω–∞ –Ω–∏–∑–∫–æ–µ. –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã SOLID –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
        }
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        const securityIssues = patterns.filter(p => p.type === 'security').length;
        if (securityIssues > 0) {
            recommendations.push(`üîí –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${securityIssues} –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ security –∞—É–¥–∏—Ç.`);
        }
        // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        const performanceIssues = patterns.filter(p => p.type === 'performance').length;
        if (performanceIssues > 0) {
            recommendations.push(`‚ö° –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${performanceIssues} –ø—Ä–æ–±–ª–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã.`);
        }
        if (recommendations.length === 0) {
            recommendations.push('üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –°–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.');
        }
        return recommendations;
    }
    /**
     * –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç N+1 Query Problem
     */
    detectNPlusOneQueries(files) {
        const suspiciousFiles = files.filter(f => {
            const content = f.content.toLowerCase();
            const hasLoopWithQuery = (content.includes('for') || content.includes('foreach') || content.includes('map')) &&
                (content.includes('query') || content.includes('find') || content.includes('select'));
            return hasLoopWithQuery;
        });
        if (suspiciousFiles.length === 0)
            return null;
        return {
            id: 'n-plus-one-queries',
            name: 'N+1 Query Problem',
            type: 'performance',
            confidence: Math.min(75, suspiciousFiles.length * 35),
            description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ N+1 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ü–∏–∫–ª–∞—Ö',
            impact: 'high',
            locations: suspiciousFiles.map(f => this.createPatternLocation(f, 'N+1 Queries')),
            recommendation: '–ö–†–ò–¢–ò–ß–ù–û –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ eager loading, batch queries –∏–ª–∏ JOIN –∑–∞–ø—Ä–æ—Å—ã –≤–º–µ—Å—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ü–∏–∫–ª–∞—Ö.',
            examples: [
                '–ó–∞–ø—Ä–æ—Å—ã –∫ –ë–î –≤ —Ü–∏–∫–ª–∞—Ö',
                'API –≤—ã–∑–æ–≤—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞',
                '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ batch loading',
            ],
        };
    }
    /**
     * –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏
     */
    detectMemoryLeaks(files) {
        const suspiciousFiles = files.filter(f => {
            const content = f.content.toLowerCase();
            const hasEventListeners = content.includes('addeventlistener') && !content.includes('removeeventlistener');
            const hasIntervals = content.includes('setinterval') && !content.includes('clearinterval');
            const hasTimeouts = content.includes('settimeout') && !content.includes('cleartimeout');
            return hasEventListeners || hasIntervals || hasTimeouts;
        });
        if (suspiciousFiles.length === 0)
            return null;
        return {
            id: 'memory-leaks',
            name: 'Potential Memory Leaks',
            type: 'performance',
            confidence: Math.min(65, suspiciousFiles.length * 30),
            description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏ –∏–∑-–∑–∞ –Ω–µ–æ—á–∏—â–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤',
            impact: 'medium',
            locations: suspiciousFiles.map(f => this.createPatternLocation(f, 'Memory Leak Risk')),
            recommendation: '–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ event listeners, timers –∏ –¥—Ä—É–≥–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ cleanup –º–µ—Ç–æ–¥—ã.',
            examples: [
                'Event listeners –±–µ–∑ removeEventListener',
                'setInterval –±–µ–∑ clearInterval',
                'setTimeout –±–µ–∑ clearTimeout',
            ],
        };
    }
    /**
     * –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ü–∏–∫–ª—ã
     */
    detectInefficientLoops(files) {
        const suspiciousFiles = files.filter(f => {
            const content = f.content;
            const nestedLoops = (content.match(/for.*{[\s\S]*?for/g) || []).length;
            const inefficientOperations = (content.includes('indexOf') && content.includes('for')) ||
                (content.includes('includes') && content.includes('for'));
            return nestedLoops > 2 || inefficientOperations;
        });
        if (suspiciousFiles.length === 0)
            return null;
        return {
            id: 'inefficient-loops',
            name: 'Inefficient Loop Patterns',
            type: 'performance',
            confidence: Math.min(70, suspiciousFiles.length * 25),
            description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ü–∏–∫–ª—ã –∏–ª–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã',
            impact: 'medium',
            locations: suspiciousFiles.map(f => this.createPatternLocation(f, 'Inefficient Loop')),
            recommendation: '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤: Map/Set –¥–ª—è –ø–æ–∏—Å–∫–∞, —É–º–µ–Ω—å—à–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Ü–∏–∫–ª–æ–≤.',
            examples: [
                '–ì–ª—É–±–æ–∫–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã (O(n¬≥)+)',
                '–ü–æ–∏—Å–∫ –≤ –º–∞—Å—Å–∏–≤–µ –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞',
                '–ù–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏',
            ],
        };
    }
}
exports.PatternRecognizer = PatternRecognizer;
//# sourceMappingURL=pattern-recognizer.js.map