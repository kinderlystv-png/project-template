"use strict";
/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ —Å –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç–æ–π –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è–º–∏
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportGenerator = void 0;
class ReportGenerator {
    generateComprehensiveReport(results) {
        console.log('üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...');
        return {
            executiveSummary: this.generateExecutiveSummary(results),
            detailedFindings: this.aggregateAllFindings(results),
            roadmap: this.generateRoadmap(results),
            visualizations: this.generateVisualizations(results),
            recommendations: this.prioritizeRecommendations(results),
        };
    }
    generateExecutiveSummary(results) {
        const { summary } = results;
        return {
            overallScore: summary.overallScore,
            status: this.getProjectStatus(summary.overallScore),
            criticalIssuesCount: summary.criticalIssues.length,
            topIssues: summary.criticalIssues.slice(0, 3),
            categoryScores: {
                quality: summary.categories.quality.score,
                security: summary.categories.security.score,
                performance: summary.categories.performance.score,
                structure: summary.categories.structure.score,
            },
        };
    }
    getProjectStatus(score) {
        if (score >= 90)
            return '–û—Ç–ª–∏—á–Ω–æ';
        if (score >= 80)
            return '–•–æ—Ä–æ—à–æ';
        if (score >= 70)
            return '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ';
        if (score >= 60)
            return '–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è';
        if (score >= 50)
            return '–ü–ª–æ—Ö–æ';
        return '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ';
    }
    aggregateAllFindings(results) {
        const findings = [];
        // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        Object.entries(results.checks).forEach(([checkerName, result]) => {
            if (!result.passed) {
                findings.push({
                    source: `Checker: ${checkerName}`,
                    category: result.category,
                    score: result.score,
                    message: result.message,
                    details: result.details,
                    recommendations: result.recommendations || [],
                    priority: this.calculatePriority(result.score, result.category),
                    estimatedEffort: this.estimateEffort(result.score, result.category),
                });
            }
        });
        // –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ –º–æ–¥—É–ª–µ–π
        Object.entries(results.modules).forEach(([moduleName, moduleResult]) => {
            if (moduleResult.issues) {
                moduleResult.issues.forEach((issue) => {
                    findings.push({
                        source: `Module: ${moduleName}`,
                        category: issue.category || 'quality',
                        score: issue.score || 0,
                        message: issue.message || issue.description,
                        details: issue.details || {},
                        recommendations: issue.recommendations || [],
                        priority: this.calculatePriority(issue.score || 0, issue.category || 'quality'),
                        estimatedEffort: this.estimateEffort(issue.score || 0, issue.category || 'quality'),
                    });
                });
            }
        });
        return findings.sort((a, b) => a.score - b.score);
    }
    calculatePriority(score, category) {
        // –ë–∞–∑–æ–≤—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        const categoryWeights = {
            security: 1.5,
            quality: 1.0,
            performance: 1.2,
            structure: 1.1,
        };
        const adjustedScore = score * (categoryWeights[category] || 1);
        if (adjustedScore < 30)
            return 'critical';
        if (adjustedScore < 50)
            return 'high';
        if (adjustedScore < 70)
            return 'medium';
        return 'low';
    }
    estimateEffort(score, category) {
        // –û—Ü–µ–Ω–∫–∞ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ—Ü–µ–Ω–∫–∏
        const baseEffort = {
            security: 2,
            quality: 1,
            performance: 1.5,
            structure: 3,
        };
        const categoryBase = baseEffort[category] || 1;
        // –ë–æ–ª–µ–µ –Ω–∏–∑–∫–∏–µ –æ—Ü–µ–Ω–∫–∏ –æ–∑–Ω–∞—á–∞—é—Ç –±–æ–ª–µ–µ —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        const scoreFactor = ((100 - score) / 100) * 2;
        const days = Math.round(categoryBase * scoreFactor * 10) / 10;
        let complexity = '–ù–∏–∑–∫–∞—è';
        if (days > 3)
            complexity = '–°—Ä–µ–¥–Ω—è—è';
        if (days > 5)
            complexity = '–í—ã—Å–æ–∫–∞—è';
        return { days, complexity };
    }
    generateRoadmap(results) {
        const allFindings = this.aggregateAllFindings(results);
        const immediate = allFindings.filter(f => f.priority === 'critical');
        const shortTerm = allFindings.filter(f => f.priority === 'high');
        const longTerm = allFindings.filter(f => f.priority === 'medium');
        return {
            immediate,
            shortTerm,
            longTerm,
            timeline: this.generateTimeline(immediate, shortTerm, longTerm),
            dependencies: this.analyzeDependencies(allFindings),
            estimatedEffort: this.calculateTotalEffort(allFindings),
        };
    }
    generateTimeline(immediate, shortTerm, longTerm) {
        const phases = [
            {
                name: '–§–∞–∑–∞ 1: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã',
                duration: this.calculatePhaseDuration(immediate),
                items: immediate.map(i => ({
                    title: this.truncate(i.message, 50),
                    effort: i.estimatedEffort?.days || 1,
                })),
            },
            {
                name: '–§–∞–∑–∞ 2: –í–∞–∂–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è',
                duration: this.calculatePhaseDuration(shortTerm),
                items: shortTerm.map(i => ({
                    title: this.truncate(i.message, 50),
                    effort: i.estimatedEffort?.days || 1,
                })),
            },
            {
                name: '–§–∞–∑–∞ 3: –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è',
                duration: this.calculatePhaseDuration(longTerm),
                items: longTerm.map(i => ({
                    title: this.truncate(i.message, 50),
                    effort: i.estimatedEffort?.days || 1,
                })),
            },
        ];
        const totalDuration = phases.reduce((sum, phase) => sum + phase.duration, 0);
        const startDate = new Date();
        const estimatedEndDate = this.calculateEndDate(totalDuration);
        return {
            phases,
            totalDuration,
            startDate,
            estimatedEndDate,
        };
    }
    calculatePhaseDuration(issues) {
        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 30% –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã
        const totalEffort = issues.reduce((sum, i) => sum + (i.estimatedEffort?.days || 1), 0);
        return Math.round(totalEffort * 0.7);
    }
    calculateEndDate(totalDays) {
        // –£—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –∏ –±—É—Ñ–µ—Ä –≤—Ä–µ–º–µ–Ω–∏
        const workingDays = Math.round(totalDays * 1.4);
        const result = new Date();
        result.setDate(result.getDate() + workingDays);
        return result;
    }
    analyzeDependencies(findings) {
        const nodes = findings
            .filter(f => f.priority === 'critical' || f.priority === 'high')
            .map((finding, index) => ({
            id: `issue-${index}`,
            label: this.truncate(finding.message, 30),
            category: finding.category,
        }));
        const edges = [];
        // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        const securityNodes = nodes.filter(n => n.category === 'security');
        const otherNodes = nodes.filter(n => n.category !== 'security');
        for (const security of securityNodes) {
            for (const other of otherNodes) {
                edges.push({
                    from: security.id,
                    to: other.id,
                    label: '–±–ª–æ–∫–∏—Ä—É–µ—Ç',
                });
            }
        }
        return { nodes, edges };
    }
    calculateTotalEffort(findings) {
        const totalDays = findings.reduce((sum, f) => sum + (f.estimatedEffort?.days || 1), 0);
        const avgDeveloperCost = 500; // USD –≤ –¥–µ–Ω—å
        const byPriority = {
            critical: this.sumEffortByPriority(findings, 'critical'),
            high: this.sumEffortByPriority(findings, 'high'),
            medium: this.sumEffortByPriority(findings, 'medium'),
            low: this.sumEffortByPriority(findings, 'low'),
        };
        const byCategory = this.effortByCategory(findings);
        return {
            days: Math.round(totalDays),
            cost: Math.round(totalDays * avgDeveloperCost),
            byPriority,
            byCategory,
        };
    }
    sumEffortByPriority(findings, priority) {
        return Math.round(findings
            .filter(f => f.priority === priority)
            .reduce((sum, f) => sum + (f.estimatedEffort?.days || 1), 0));
    }
    effortByCategory(findings) {
        const categories = ['security', 'quality', 'performance', 'structure'];
        const result = {};
        categories.forEach(category => {
            result[category] = Math.round(findings
                .filter(f => f.category === category)
                .reduce((sum, f) => sum + (f.estimatedEffort?.days || 1), 0));
        });
        return result;
    }
    generateVisualizations(results) {
        return {
            architectureDiagram: this.generateArchitectureDiagram(results),
            debtHeatmap: this.generateDebtHeatmap(results),
            trendCharts: this.generateTrendCharts(results),
        };
    }
    generateArchitectureDiagram(results) {
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Mermaid –¥–∏–∞–≥—Ä–∞–º–º—ã
        let diagram = 'graph TD\n';
        if (results.modules.architecture?.dependencies) {
            const { dependencies } = results.modules.architecture;
            dependencies.nodes.forEach((node) => {
                diagram += `  ${node.id}["${node.label}"]\n`;
            });
            dependencies.edges.forEach((edge) => {
                diagram += `  ${edge.from} --> ${edge.to}\n`;
            });
        }
        else {
            // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            diagram += '  A[–Ø–¥—Ä–æ]\n';
            diagram += '  B[–ú–æ–¥—É–ª–∏]\n';
            diagram += '  C[–ß–µ–∫–µ—Ä—ã]\n';
            diagram += '  D[–£—Ç–∏–ª–∏—Ç—ã]\n';
            diagram += '  A --> B\n';
            diagram += '  A --> C\n';
            diagram += '  B --> D\n';
            diagram += '  C --> D\n';
        }
        return diagram;
    }
    generateDebtHeatmap(results) {
        if (results.modules.technicalDebt?.heatmap) {
            return results.modules.technicalDebt.heatmap;
        }
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á–µ–∫–µ—Ä–æ–≤
        const heatmap = {};
        Object.entries(results.checks).forEach(([checker, result]) => {
            const category = result.category;
            if (!heatmap[category]) {
                heatmap[category] = {
                    score: 0,
                    count: 0,
                    items: [],
                };
            }
            heatmap[category].count++;
            heatmap[category].score += result.score;
            if (!result.passed) {
                heatmap[category].items.push({
                    name: checker,
                    score: result.score,
                    message: result.message,
                });
            }
        });
        // –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ —Ü–≤–µ—Ç–æ–≤
        Object.values(heatmap).forEach((category) => {
            if (category.count > 0) {
                category.score = Math.round(category.score / category.count);
            }
            category.color = this.getHeatmapColor(category.score);
        });
        return heatmap;
    }
    getHeatmapColor(score) {
        if (score >= 80)
            return '#4caf50'; // –∑–µ–ª–µ–Ω—ã–π
        if (score >= 60)
            return '#8bc34a'; // —Å–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
        if (score >= 40)
            return '#ffeb3b'; // –∂–µ–ª—Ç—ã–π
        if (score >= 20)
            return '#ff9800'; // –æ—Ä–∞–Ω–∂–µ–≤—ã–π
        return '#f44336'; // –∫—Ä–∞—Å–Ω—ã–π
    }
    generateTrendCharts(results) {
        return {
            quality: this.generateTrendData(results.summary.categories.quality.score),
            security: this.generateTrendData(results.summary.categories.security.score),
            performance: this.generateTrendData(results.summary.categories.performance.score),
            structure: this.generateTrendData(results.summary.categories.structure.score),
        };
    }
    generateTrendData(currentScore) {
        const months = 6;
        const data = [];
        let score = Math.max(currentScore - 15, 0);
        for (let i = 0; i < months; i++) {
            const upDown = Math.random() > 0.7 ? -1 : 1;
            const change = Math.random() * 10 * upDown;
            score = Math.min(Math.max(score + change, 0), 100);
            if (i === months - 1) {
                score = currentScore;
            }
            const date = new Date();
            date.setMonth(date.getMonth() - (months - i - 1));
            data.push({
                date: date.toISOString().split('T')[0],
                score: Math.round(score),
            });
        }
        return data;
    }
    prioritizeRecommendations(results) {
        const recommendations = [];
        // –°–±–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ —á–µ–∫–µ—Ä–æ–≤
        Object.entries(results.checks).forEach(([checkerName, result]) => {
            if (result.recommendations) {
                result.recommendations.forEach(rec => {
                    recommendations.push({
                        text: rec,
                        category: result.category,
                        priority: this.calculatePriority(result.score, result.category),
                        source: checkerName,
                    });
                });
            }
        });
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };
        return recommendations
            .sort((a, b) => priorityOrder[b.priority] - priorityOrder[a.priority])
            .slice(0, 20); // –¢–æ–ø 20 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    }
    truncate(str, length) {
        return str.length > length ? str.substring(0, length) + '...' : str;
    }
}
exports.ReportGenerator = ReportGenerator;
//# sourceMappingURL=report-generator.js.map