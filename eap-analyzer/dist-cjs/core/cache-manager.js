"use strict";
/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheManager = void 0;
class CacheManager {
    cache = new Map();
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –≤—ã—á–∏—Å–ª–∏—Ç—å –∏—Ö
     * @param key –ö–ª—é—á –∫—ç—à–∞
     * @param compute –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –∫—ç—à–µ
     * @param ttl –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å)
     */
    async getOrCompute(key, compute, ttl = 3600000 // 1 —á–∞—Å
    ) {
        const cached = this.cache.get(key);
        if (cached && cached.expiry > Date.now()) {
            console.log(`‚úÖ Cache hit for key: ${key}`);
            return cached.data;
        }
        console.log(`‚ùå Cache miss for key: ${key}`);
        const result = await compute();
        this.cache.set(key, {
            data: result,
            expiry: Date.now() + ttl,
        });
        return result;
    }
    /**
     * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à –ø–æ –∫–ª—é—á—É
     */
    invalidate(key) {
        return this.cache.delete(key);
    }
    /**
     * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–ª—é—á–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—É
     */
    invalidatePattern(pattern) {
        const regex = new RegExp(pattern);
        let count = 0;
        for (const key of this.cache.keys()) {
            if (regex.test(key)) {
                this.cache.delete(key);
                count++;
            }
        }
        return count;
    }
    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à
     */
    clear() {
        this.cache.clear();
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
     */
    getCacheStats() {
        return {
            size: this.cache.size,
            keys: Array.from(this.cache.keys()),
        };
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–ª—é—á–µ –∫—ç—à–∞
     */
    getCacheInfo(key) {
        const cached = this.cache.get(key);
        if (!cached) {
            return { exists: false };
        }
        return {
            exists: true,
            expiry: new Date(cached.expiry),
            ttl: Math.max(0, cached.expiry - Date.now()),
        };
    }
    /**
     * –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
     */
    cleanup() {
        const now = Date.now();
        let cleaned = 0;
        for (const [key, cached] of this.cache.entries()) {
            if (cached.expiry <= now) {
                this.cache.delete(key);
                cleaned++;
            }
        }
        if (cleaned > 0) {
            console.log(`üßπ Cleaned ${cleaned} expired cache entries`);
        }
        return cleaned;
    }
}
exports.CacheManager = CacheManager;
//# sourceMappingURL=cache-manager.js.map