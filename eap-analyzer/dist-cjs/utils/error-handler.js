"use strict";
/**
 * –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ (TypeScript –≤–µ—Ä—Å–∏—è)
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EAPError = exports.ErrorType = void 0;
exports.handleFileError = handleFileError;
exports.handleParsingError = handleParsingError;
exports.handleConfigError = handleConfigError;
exports.handleAnalysisError = handleAnalysisError;
exports.safeExecute = safeExecute;
exports.setupGlobalErrorHandlers = setupGlobalErrorHandlers;
var ErrorType;
(function (ErrorType) {
    ErrorType["FILE_ERROR"] = "FILE_ERROR";
    ErrorType["PARSING_ERROR"] = "PARSING_ERROR";
    ErrorType["CONFIG_ERROR"] = "CONFIG_ERROR";
    ErrorType["ANALYSIS_ERROR"] = "ANALYSIS_ERROR";
    ErrorType["NETWORK_ERROR"] = "NETWORK_ERROR";
    ErrorType["VALIDATION_ERROR"] = "VALIDATION_ERROR";
})(ErrorType || (exports.ErrorType = ErrorType = {}));
class EAPError extends Error {
    type;
    details;
    originalError;
    constructor(type, message, details = {}, originalError) {
        super(message);
        this.name = 'EAPError';
        this.type = type;
        this.details = {
            timestamp: new Date(),
            ...details,
        };
        this.originalError = originalError;
    }
    formatForConsole() {
        const icon = this.getErrorIcon();
        const timestamp = this.details.timestamp.toLocaleTimeString();
        let output = `${icon} [${timestamp}] ${this.type}: ${this.message}`;
        if (this.details.path) {
            output += `\n   üìÅ –§–∞–π–ª: ${this.details.path}`;
        }
        if (this.details.operation) {
            output += `\n   üîß –û–ø–µ—Ä–∞—Ü–∏—è: ${this.details.operation}`;
        }
        if (this.details.code) {
            output += `\n   üî¢ –ö–æ–¥: ${this.details.code}`;
        }
        if (this.originalError) {
            output += `\n   üêõ –ò—Å—Ö–æ–¥–Ω–∞—è –æ—à–∏–±–∫–∞: ${this.originalError.message}`;
        }
        return output;
    }
    getErrorIcon() {
        switch (this.type) {
            case ErrorType.FILE_ERROR:
                return 'üìÑ';
            case ErrorType.PARSING_ERROR:
                return 'üîç';
            case ErrorType.CONFIG_ERROR:
                return '‚öôÔ∏è';
            case ErrorType.ANALYSIS_ERROR:
                return 'üî¨';
            case ErrorType.NETWORK_ERROR:
                return 'üåê';
            case ErrorType.VALIDATION_ERROR:
                return '‚úÖ';
            default:
                return '‚ùå';
        }
    }
    toJSON() {
        return {
            type: this.type,
            message: this.message,
            details: this.details,
            originalError: this.originalError?.message,
            stack: this.stack,
        };
    }
}
exports.EAPError = EAPError;
/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */
function handleFileError(error, filePath, operation) {
    const originalError = error instanceof Error ? error : new Error(String(error));
    let code = 'UNKNOWN';
    let message = `–û—à–∏–±–∫–∞ –ø—Ä–∏ ${operation} —Ñ–∞–π–ª–∞`;
    if (originalError.message.includes('ENOENT')) {
        code = 'FILE_NOT_FOUND';
        message = `–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ ${operation}`;
    }
    else if (originalError.message.includes('EACCES')) {
        code = 'ACCESS_DENIED';
        message = `–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –ø—Ä–∏ ${operation}`;
    }
    else if (originalError.message.includes('EMFILE')) {
        code = 'TOO_MANY_FILES';
        message = `–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ ${operation}`;
    }
    else if (originalError.message.includes('ENOTDIR')) {
        code = 'NOT_DIRECTORY';
        message = `–ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π –ø—Ä–∏ ${operation}`;
    }
    return new EAPError(ErrorType.FILE_ERROR, message, { code, path: filePath, operation }, originalError);
}
/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
function handleParsingError(error, filePath, parserType) {
    const originalError = error instanceof Error ? error : new Error(String(error));
    return new EAPError(ErrorType.PARSING_ERROR, `–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${parserType}`, {
        path: filePath,
        operation: 'parsing',
        context: { parserType },
    }, originalError);
}
/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
function handleConfigError(error, configType) {
    const originalError = error instanceof Error ? error : new Error(String(error));
    return new EAPError(ErrorType.CONFIG_ERROR, `–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ${configType}`, {
        operation: 'configuration',
        context: { configType },
    }, originalError);
}
/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∞–Ω–∞–ª–∏–∑–∞
 */
function handleAnalysisError(error, analysisType, context) {
    const originalError = error instanceof Error ? error : new Error(String(error));
    return new EAPError(ErrorType.ANALYSIS_ERROR, `–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ${analysisType}`, {
        operation: 'analysis',
        context: { analysisType, ...context },
    }, originalError);
}
/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 */
async function safeExecute(operation, errorType, context = {}) {
    try {
        return await operation();
    }
    catch (error) {
        const eapError = new EAPError(errorType, `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏`, context, error instanceof Error ? error : new Error(String(error)));
        console.error(eapError.formatForConsole());
        return null;
    }
}
/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
 */
function setupGlobalErrorHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
    process.on('unhandledRejection', (reason, promise) => {
        const error = new EAPError(ErrorType.ANALYSIS_ERROR, '–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞', {
            operation: 'promise-rejection',
            context: { reason: String(reason) },
        });
        console.error(error.formatForConsole());
        console.error('Promise:', promise);
    });
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    process.on('uncaughtException', error => {
        const eapError = new EAPError(ErrorType.ANALYSIS_ERROR, '–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ', { operation: 'uncaught-exception' }, error);
        console.error(eapError.formatForConsole());
        // Graceful shutdown
        process.exit(1);
    });
}
//# sourceMappingURL=error-handler.js.map