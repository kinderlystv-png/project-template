/**
 * –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CoverageAnalyzer –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ kinderly-events
 */

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CoverageAnalyzer –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ kinderly-events');
console.log('='.repeat(60));

// –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è
async function testCoverageAnalyzer() {
  let foundTools = 0; // –û–±—ä—è–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏

  try {
    console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CoverageAnalyzer...');

    // –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É kinderly
    const kindlerlyPath = 'C:\\kinderly-events';
    console.log(`üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø—Ä–æ–µ–∫—Ç: ${kindlerlyPath}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    const fs = require('fs').promises;
    let projectPath = kindlerlyPath;

    try {
      await fs.access(kindlerlyPath);
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç kinderly-events –Ω–∞–π–¥–µ–Ω');
    } catch (error) {
      console.log('‚ùå –ü—Ä–æ–µ–∫—Ç kinderly-events –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç');
      projectPath = process.cwd();
    }

    console.log();
    console.log('üîç –ü–æ–∏—Å–∫ –æ—Ç—á–µ—Ç–æ–≤ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞...');
    console.log('-'.repeat(40));

    // –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ coverage
    const coverageFiles = [];
    const commonCoveragePaths = [
      'coverage',
      'nyc_output',
      '.nyc_output',
      'jest-coverage',
      'coverage-final.json',
      'lcov.info',
      'clover.xml',
    ];

    for (const coveragePath of commonCoveragePaths) {
      const fullPath = `${projectPath}/${coveragePath}`;
      try {
        const stat = await fs.stat(fullPath);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω: ${coveragePath} (${stat.isDirectory() ? '–ø–∞–ø–∫–∞' : '—Ñ–∞–π–ª'})`);
        coverageFiles.push({
          path: coveragePath,
          fullPath,
          type: stat.isDirectory() ? 'directory' : 'file',
        });
      } catch (error) {
        console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: ${coveragePath}`);
      }
    }

    console.log();
    console.log('üìã –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
    console.log('-'.repeat(40));

    // –ê–Ω–∞–ª–∏–∑ package.json –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç testing tools
    try {
      const packageJsonPath = `${projectPath}/package.json`;
      const packageJson = JSON.parse(await fs.readFile(packageJsonPath, 'utf8'));

      console.log('üì¶ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');

      const testingTools = {
        jest: 'Jest testing framework',
        mocha: 'Mocha testing framework',
        chai: 'Chai assertion library',
        nyc: 'Istanbul code coverage',
        c8: 'Native V8 coverage',
        '@testing-library': 'Testing Library',
        cypress: 'Cypress E2E testing',
        playwright: 'Playwright testing',
        vitest: 'Vite testing framework',
      };

      const allDeps = {
        ...(packageJson.dependencies || {}),
        ...(packageJson.devDependencies || {}),
      };

      foundTools = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      Object.entries(testingTools).forEach(([tool, description]) => {
        const found = Object.keys(allDeps).find(dep => dep.includes(tool));
        if (found) {
          console.log(`  ‚úÖ ${tool}: ${found} - ${description}`);
          foundTools++;
        } else {
          console.log(`  ‚ùå ${tool}: –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
      });

      console.log();
      console.log(
        `üìä –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${foundTools}/${Object.keys(testingTools).length}`
      );

      // –ê–Ω–∞–ª–∏–∑ scripts
      if (packageJson.scripts) {
        console.log();
        console.log('üîß –ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–ø—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
        const testScripts = Object.entries(packageJson.scripts).filter(
          ([name, script]) =>
            name.includes('test') ||
            name.includes('coverage') ||
            script.includes('jest') ||
            script.includes('vitest') ||
            script.includes('mocha')
        );

        if (testScripts.length > 0) {
          testScripts.forEach(([name, script]) => {
            console.log(`  ‚úÖ ${name}: ${script}`);
          });
        } else {
          console.log('  ‚ùå –°–∫—Ä–∏–ø—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
      }
    } catch (error) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å package.json');
    }

    console.log();
    console.log('üéØ –ö–†–ò–¢–ï–†–ò–ò –û–¶–ï–ù–ö–ò –ü–û–ö–†–´–¢–ò–Ø:');
    console.log('='.repeat(40));
    console.log('üü¢ –û—Ç–ª–∏—á–Ω–æ (90%+):');
    console.log('   - –í—ã—Å–æ–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–æ–∫, –≤–µ—Ç–æ–∫ –∏ —Ñ—É–Ω–∫—Ü–∏–π');
    console.log('   - –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤');
    console.log('   - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CI/CD');
    console.log();
    console.log('üü° –•–æ—Ä–æ—à–æ (70-89%):');
    console.log('   - –ü—Ä–∏–µ–º–ª–µ–º–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞');
    console.log('   - –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –±–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã');
    console.log('   - –ù—É–∂–Ω—ã —É–ª—É—á—à–µ–Ω–∏—è –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–ª–∞—Å—Ç—è—Ö');
    console.log();
    console.log('üî¥ –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è (<70%):');
    console.log('   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞');
    console.log('   - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø–ª–æ—Ö–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã');
    console.log('   - –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–µ—Ä—å–µ–∑–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');

    console.log();
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:');
    console.log('='.repeat(40));

    let score = 0;
    let maxScore = 100;

    // –û—Ü–µ–Ω–∫–∞ –Ω–∞–ª–∏—á–∏—è coverage —Ñ–∞–π–ª–æ–≤
    if (coverageFiles.length > 0) {
      score += 30;
      console.log('‚úÖ –§–∞–π–ª—ã –ø–æ–∫—Ä—ã—Ç–∏—è –Ω–∞–π–¥–µ–Ω—ã (+30 –±–∞–ª–ª–æ–≤)');
    } else {
      console.log('‚ùå –§–∞–π–ª—ã –ø–æ–∫—Ä—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (0 –±–∞–ª–ª–æ–≤)');
    }

    // –û—Ü–µ–Ω–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    if (foundTools > 0) {
      const toolsScore = Math.min(40, foundTools * 10);
      score += toolsScore;
      console.log(`‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã (+${toolsScore} –±–∞–ª–ª–æ–≤)`);
    } else {
      console.log('‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (0 –±–∞–ª–ª–æ–≤)');
    }

    // –ë–æ–Ω—É—Å—ã –∑–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    score += 30; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –±–∞–∑–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É

    console.log();
    console.log(`üéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê: ${score}/${maxScore} (${Math.round((score / maxScore) * 100)}%)`);

    if (score >= 80) {
      console.log('üü¢ –û–¢–õ–ò–ß–ù–´–ô —É—Ä–æ–≤–µ–Ω—å –ø–æ–∫—Ä—ã—Ç–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!');
    } else if (score >= 60) {
      console.log('üü° –•–û–†–û–®–ò–ô —É—Ä–æ–≤–µ–Ω—å, –µ—Å—Ç—å –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è');
    } else {
      console.log('üî¥ –¢–†–ï–ë–£–ï–¢–°–Ø –°–ï–†–¨–ï–ó–ù–ê–Ø –†–ê–ë–û–¢–ê –Ω–∞–¥ –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞');
    }

    console.log();
    console.log('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('-'.repeat(30));
    if (coverageFiles.length === 0) {
      console.log('- –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏');
      console.log('- –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∫—Ä—ã—Ç–∏—è (nyc, c8, jest)');
    }
    if (foundTools < 3) {
      console.log('- –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      console.log('- –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ CI/CD');
    }
    console.log('- –°—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ –ø–æ–∫—Ä—ã—Ç–∏—é 80%+ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π');
    console.log('- –†–µ–≥—É–ª—è—Ä–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–∫—Ä—ã—Ç–∏—è');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫
testCoverageAnalyzer().catch(console.error);
